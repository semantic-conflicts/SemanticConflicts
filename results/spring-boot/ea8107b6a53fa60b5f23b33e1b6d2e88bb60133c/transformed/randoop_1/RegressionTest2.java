import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory2.setDocumentRoot(file9);
        undertowEmbeddedServletContainerFactory2.useForwardHeaders = false;
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray1 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray2 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray3 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        java.io.File file6 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory4.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        io.undertow.Undertow.Builder builder11 = undertowEmbeddedServletContainerFactory8.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager12 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer14 = undertowEmbeddedServletContainerFactory4.getUndertowEmbeddedServletContainer(builder11, deploymentManager12, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker15 = undertowEmbeddedServletContainerFactory4.createWorker();
        java.net.InetAddress inetAddress16 = null;
        undertowEmbeddedServletContainerFactory4.setAddress(inetAddress16);
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory4.setSsl(ssl18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        java.io.File file22 = undertowEmbeddedServletContainerFactory20.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray23 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory20.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray23);
        org.springframework.boot.context.embedded.Ssl ssl25 = undertowEmbeddedServletContainerFactory20.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        undertowEmbeddedServletContainerFactory26.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory30.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager34 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer36 = undertowEmbeddedServletContainerFactory26.getUndertowEmbeddedServletContainer(builder33, deploymentManager34, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer39 = undertowEmbeddedServletContainerFactory20.getUndertowEmbeddedServletContainer(builder33, deploymentManager37, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        undertowEmbeddedServletContainerFactory40.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        io.undertow.Undertow.Builder builder47 = undertowEmbeddedServletContainerFactory44.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager48 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer50 = undertowEmbeddedServletContainerFactory40.getUndertowEmbeddedServletContainer(builder47, deploymentManager48, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean52 = undertowEmbeddedServletContainerFactory51.isPersistSession();
        java.io.File file53 = undertowEmbeddedServletContainerFactory51.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList54 = undertowEmbeddedServletContainerFactory51.builderCustomizers;
        undertowEmbeddedServletContainerFactory51.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray57 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory51.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory51.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression61 = undertowEmbeddedServletContainerFactory51.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory64.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file67 = null;
        undertowEmbeddedServletContainerFactory64.accessLogDirectory = file67;
        boolean boolean69 = undertowEmbeddedServletContainerFactory64.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory64.addInitializers(servletContextInitializerArray70);
        io.undertow.servlet.api.DeploymentManager deploymentManager72 = undertowEmbeddedServletContainerFactory51.createDeploymentManager(servletContextInitializerArray70);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer74 = undertowEmbeddedServletContainerFactory20.getUndertowEmbeddedServletContainer(builder47, deploymentManager72, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean76 = undertowEmbeddedServletContainerFactory75.isPersistSession();
        java.io.File file77 = undertowEmbeddedServletContainerFactory75.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings78 = undertowEmbeddedServletContainerFactory75.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader79 = undertowEmbeddedServletContainerFactory75.resourceLoader;
        java.io.File file80 = null;
        undertowEmbeddedServletContainerFactory75.setSessionStoreDir(file80);
        undertowEmbeddedServletContainerFactory75.setBufferSize((java.lang.Integer) (-1));
        java.io.File file84 = null;
        undertowEmbeddedServletContainerFactory75.accessLogDirectory = file84;
        java.lang.Integer int86 = undertowEmbeddedServletContainerFactory75.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray87 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory75.addInitializers(servletContextInitializerArray87);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer89 = undertowEmbeddedServletContainerFactory20.getEmbeddedServletContainer(servletContextInitializerArray87);
        undertowEmbeddedServletContainerFactory4.addInitializers(servletContextInitializerArray87);
        initializer0.initializers = servletContextInitializerArray87;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray92 = initializer0.initializers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray92);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("hi!", (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) ' ');
        undertowEmbeddedServletContainerFactory2.accessLogEnabled = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        java.io.File file9 = undertowEmbeddedServletContainerFactory7.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory7.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray10);
        org.springframework.boot.context.embedded.Ssl ssl12 = undertowEmbeddedServletContainerFactory7.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        undertowEmbeddedServletContainerFactory13.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        io.undertow.Undertow.Builder builder20 = undertowEmbeddedServletContainerFactory17.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager21 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer23 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder20, deploymentManager21, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager24 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer26 = undertowEmbeddedServletContainerFactory7.getUndertowEmbeddedServletContainer(builder20, deploymentManager24, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory5.getUndertowEmbeddedServletContainer(builder20, deploymentManager27, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress33 = undertowEmbeddedServletContainerFactory32.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        java.io.File file36 = undertowEmbeddedServletContainerFactory34.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory34.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader38 = undertowEmbeddedServletContainerFactory34.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet39 = undertowEmbeddedServletContainerFactory34.getErrorPages();
        undertowEmbeddedServletContainerFactory32.setErrorPages(errorPageSet39);
        undertowEmbeddedServletContainerFactory5.setErrorPages(errorPageSet39);
        undertowEmbeddedServletContainerFactory2.setErrorPages(errorPageSet39);
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory2.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        io.undertow.Undertow.Builder builder47 = undertowEmbeddedServletContainerFactory44.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings48 = undertowEmbeddedServletContainerFactory44.getMimeMappings();
        int int49 = undertowEmbeddedServletContainerFactory44.getPort();
        java.lang.ClassLoader classLoader50 = undertowEmbeddedServletContainerFactory44.getServletClassLoader();
        undertowEmbeddedServletContainerFactory44.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean54 = undertowEmbeddedServletContainerFactory53.isPersistSession();
        undertowEmbeddedServletContainerFactory53.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder58 = undertowEmbeddedServletContainerFactory53.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager59 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer61 = undertowEmbeddedServletContainerFactory44.getUndertowEmbeddedServletContainer(builder58, deploymentManager59, (int) (byte) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory64.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file67 = null;
        undertowEmbeddedServletContainerFactory64.accessLogDirectory = file67;
        boolean boolean69 = undertowEmbeddedServletContainerFactory64.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory64.addInitializers(servletContextInitializerArray70);
        undertowEmbeddedServletContainerFactory64.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory76.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file79 = null;
        undertowEmbeddedServletContainerFactory76.accessLogDirectory = file79;
        boolean boolean81 = undertowEmbeddedServletContainerFactory76.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray82 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory76.addInitializers(servletContextInitializerArray82);
        io.undertow.servlet.api.DeploymentManager deploymentManager84 = undertowEmbeddedServletContainerFactory64.createDeploymentManager(servletContextInitializerArray82);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer86 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder58, deploymentManager84, (int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8080 + "'", int49 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer86);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        org.springframework.boot.context.embedded.Ssl ssl3 = null;
        undertowEmbeddedServletContainerFactory2.setSsl(ssl3);
        java.lang.Class<?> wildcardClass5 = undertowEmbeddedServletContainerFactory2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory0.directBuffers;
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings12);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression11);
        java.lang.ClassLoader classLoader13 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection17 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection17);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 1800);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory0.getContextPath();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory0.workerThreads = 1800;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file14);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        java.net.InetAddress inetAddress20 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress20);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        undertowEmbeddedServletContainerFactory22.accessLogEnabled = false;
        boolean boolean26 = undertowEmbeddedServletContainerFactory22.isRegisterDefaultServlet();
        java.io.File file27 = undertowEmbeddedServletContainerFactory22.getDocumentRoot();
        undertowEmbeddedServletContainerFactory22.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet30);
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet30);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        java.lang.ClassLoader classLoader17 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory18.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        int int23 = undertowEmbeddedServletContainerFactory18.getPort();
        java.lang.ClassLoader classLoader24 = undertowEmbeddedServletContainerFactory18.getServletClassLoader();
        undertowEmbeddedServletContainerFactory18.setPort((int) (short) 1);
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory18.createBuilder((-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection29 = undertowEmbeddedServletContainerFactory18.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8080 + "'", int23 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection29);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.lang.String str8 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory2.resourceLoader;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader9);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader7 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList11 = undertowEmbeddedServletContainerFactory8.builderCustomizers;
        undertowEmbeddedServletContainerFactory8.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray14 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray14);
        java.net.InetAddress inetAddress16 = undertowEmbeddedServletContainerFactory8.getAddress();
        undertowEmbeddedServletContainerFactory8.ioThreads = 0;
        undertowEmbeddedServletContainerFactory8.setDisplayName("hi!");
        java.io.File file21 = undertowEmbeddedServletContainerFactory8.getSessionStoreDir();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory8.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory23.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory23.getMimeMappings();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet28 = undertowEmbeddedServletContainerFactory23.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        undertowEmbeddedServletContainerFactory29.accessLogEnabled = false;
        boolean boolean33 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        java.io.File file34 = undertowEmbeddedServletContainerFactory29.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager35 = undertowEmbeddedServletContainerFactory29.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean39 = undertowEmbeddedServletContainerFactory38.isPersistSession();
        java.io.File file40 = undertowEmbeddedServletContainerFactory38.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray41 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory38.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray41);
        org.springframework.boot.context.embedded.Ssl ssl43 = undertowEmbeddedServletContainerFactory38.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        undertowEmbeddedServletContainerFactory44.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean49 = undertowEmbeddedServletContainerFactory48.isPersistSession();
        io.undertow.Undertow.Builder builder51 = undertowEmbeddedServletContainerFactory48.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer54 = undertowEmbeddedServletContainerFactory44.getUndertowEmbeddedServletContainer(builder51, deploymentManager52, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager55 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer57 = undertowEmbeddedServletContainerFactory38.getUndertowEmbeddedServletContainer(builder51, deploymentManager55, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager58 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer60 = undertowEmbeddedServletContainerFactory36.getUndertowEmbeddedServletContainer(builder51, deploymentManager58, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress64 = undertowEmbeddedServletContainerFactory63.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean66 = undertowEmbeddedServletContainerFactory65.isPersistSession();
        java.io.File file67 = undertowEmbeddedServletContainerFactory65.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings68 = undertowEmbeddedServletContainerFactory65.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader69 = undertowEmbeddedServletContainerFactory65.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet70 = undertowEmbeddedServletContainerFactory65.getErrorPages();
        undertowEmbeddedServletContainerFactory63.setErrorPages(errorPageSet70);
        undertowEmbeddedServletContainerFactory36.setErrorPages(errorPageSet70);
        undertowEmbeddedServletContainerFactory29.setErrorPages(errorPageSet70);
        undertowEmbeddedServletContainerFactory23.setErrorPages(errorPageSet70);
        boolean boolean75 = undertowEmbeddedServletContainerFactory23.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean77 = undertowEmbeddedServletContainerFactory76.isPersistSession();
        java.io.File file78 = undertowEmbeddedServletContainerFactory76.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings79 = undertowEmbeddedServletContainerFactory76.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader80 = undertowEmbeddedServletContainerFactory76.resourceLoader;
        undertowEmbeddedServletContainerFactory76.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList83 = undertowEmbeddedServletContainerFactory76.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory86 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory86.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file89 = null;
        undertowEmbeddedServletContainerFactory86.accessLogDirectory = file89;
        boolean boolean91 = undertowEmbeddedServletContainerFactory86.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray92 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory86.addInitializers(servletContextInitializerArray92);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray94 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory86.addErrorPages(errorPageArray94);
        undertowEmbeddedServletContainerFactory76.addErrorPages(errorPageArray94);
        undertowEmbeddedServletContainerFactory23.addErrorPages(errorPageArray94);
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray94);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray94);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(false);
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory2.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory2.setPort((int) '4');
        undertowEmbeddedServletContainerFactory2.setAccessLogPattern("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager14);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet12 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file15);
        org.springframework.boot.context.embedded.Compression compression17 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Customizers must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression17);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        int int7 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8080 + "'", int7 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        java.io.File file11 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory0.workerThreads = 1800;
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader2 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader2;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        java.io.File file6 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList6 = undertowEmbeddedServletContainerFactory1.builderCustomizers;
        undertowEmbeddedServletContainerFactory1.ioThreads = 1800;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList6);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory0.workerThreads;
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray10 = undertowEmbeddedServletContainerFactory0.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        java.lang.String str5 = undertowEmbeddedServletContainerFactory0.accessLogPattern;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet8 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 8080);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        undertowEmbeddedServletContainerFactory12.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader18 = undertowEmbeddedServletContainerFactory12.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        undertowEmbeddedServletContainerFactory12.setMimeMappings(mimeMappings22);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings22);
        org.springframework.boot.context.embedded.JspServlet jspServlet25 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory12.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager20 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getUndertowEmbeddedServletContainer(builder19, deploymentManager20, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory12.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) (-1));
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory25.accessLogDirectory = file34;
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory25.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory25.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader44 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList47 = undertowEmbeddedServletContainerFactory40.builderCustomizers;
        undertowEmbeddedServletContainerFactory25.builderCustomizers = undertowBuilderCustomizerList47;
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList47;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection50);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        io.undertow.server.handlers.resource.ResourceManager resourceManager53 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection54 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "0.0.0.0" + "'", str9.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection54);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        java.net.InetAddress inetAddress20 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress20);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        undertowEmbeddedServletContainerFactory22.accessLogEnabled = false;
        boolean boolean26 = undertowEmbeddedServletContainerFactory22.isRegisterDefaultServlet();
        java.io.File file27 = undertowEmbeddedServletContainerFactory22.getDocumentRoot();
        undertowEmbeddedServletContainerFactory22.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet30);
        java.net.InetAddress inetAddress32 = undertowEmbeddedServletContainerFactory0.getAddress();
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress32);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory2.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory12.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory15.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory15.getMimeMappings();
        undertowEmbeddedServletContainerFactory12.setMimeMappings(mimeMappings19);
        undertowEmbeddedServletContainerFactory2.setMimeMappings(mimeMappings19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(false);
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory2.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.String str17 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory18.resourceLoader;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file23);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo25);
        undertowEmbeddedServletContainerFactory18.setRegisterDefaultServlet(false);
        java.io.File file29 = undertowEmbeddedServletContainerFactory18.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        io.undertow.Undertow.Builder builder33 = undertowEmbeddedServletContainerFactory30.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings34 = undertowEmbeddedServletContainerFactory30.getMimeMappings();
        undertowEmbeddedServletContainerFactory18.setMimeMappings(mimeMappings34);
        undertowEmbeddedServletContainerFactory2.setMimeMappings(mimeMappings34);
        int int37 = undertowEmbeddedServletContainerFactory2.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 8080);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings11);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory2.getDeploymentInfoCustomizers();
        boolean boolean10 = undertowEmbeddedServletContainerFactory2.useForwardHeaders;
        org.springframework.boot.context.embedded.Compression compression11 = undertowEmbeddedServletContainerFactory2.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression11);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(jspServlet13);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 1800);
        boolean boolean9 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory7.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray23 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        undertowEmbeddedServletContainerFactory0.workerThreads = 10;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory8.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader12 = undertowEmbeddedServletContainerFactory8.resourceLoader;
        undertowEmbeddedServletContainerFactory8.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory8.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList15;
        java.lang.String str17 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "0.0.0.0" + "'", str17.equals("0.0.0.0"));
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory0.directBuffers;
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory0.bufferSize = (-1);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        java.net.InetAddress inetAddress6 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        java.lang.Class<?> wildcardClass11 = undertowEmbeddedServletContainerFactory0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory0.ioThreads = 1800;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        boolean boolean16 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder13, deploymentManager14, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer19 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder13, deploymentManager17, (int) 'a');
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader20;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file24);
        java.io.File file26 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.lang.String str8 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        undertowEmbeddedServletContainerFactory2.workerThreads = 10;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection11 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory2.workerThreads = 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection11);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        io.undertow.server.handlers.resource.ResourceManager resourceManager10 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        java.lang.Class<?> wildcardClass11 = resourceManager10.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean2 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file3 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader5 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer10 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer10 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray11);
        initializer0.initializers = servletContextInitializerArray11;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer0.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo24);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer26 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer26 };
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray27);
        initializer16.initializers = servletContextInitializerArray27;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer16.initializers = servletContextInitializerArray30;
        initializer0.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress37 = undertowEmbeddedServletContainerFactory36.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean39 = undertowEmbeddedServletContainerFactory38.isPersistSession();
        java.io.File file40 = undertowEmbeddedServletContainerFactory38.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings41 = undertowEmbeddedServletContainerFactory38.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader42 = undertowEmbeddedServletContainerFactory38.resourceLoader;
        java.io.File file43 = null;
        undertowEmbeddedServletContainerFactory38.setSessionStoreDir(file43);
        undertowEmbeddedServletContainerFactory38.setBufferSize((java.lang.Integer) (-1));
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory38.accessLogDirectory = file47;
        java.lang.Integer int49 = undertowEmbeddedServletContainerFactory38.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory38.addInitializers(servletContextInitializerArray50);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer52 = undertowEmbeddedServletContainerFactory36.getEmbeddedServletContainer(servletContextInitializerArray50);
        initializer0.initializers = servletContextInitializerArray50;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer52);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory10.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray13);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        undertowEmbeddedServletContainerFactory15.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        io.undertow.Undertow.Builder builder22 = undertowEmbeddedServletContainerFactory19.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager23 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder22, deploymentManager23, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager26 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer28 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder22, deploymentManager26, (int) (byte) -1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet31 = undertowEmbeddedServletContainerFactory29.getJspServlet();
        boolean boolean32 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory29.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean36 = undertowEmbeddedServletContainerFactory35.isPersistSession();
        java.io.File file37 = undertowEmbeddedServletContainerFactory35.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings38 = undertowEmbeddedServletContainerFactory35.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader39 = undertowEmbeddedServletContainerFactory35.resourceLoader;
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory35.setSessionStoreDir(file40);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo42 = null;
        undertowEmbeddedServletContainerFactory35.configureErrorPages(deploymentInfo42);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer44 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer44 };
        undertowEmbeddedServletContainerFactory35.addInitializers(servletContextInitializerArray45);
        initializer34.initializers = servletContextInitializerArray45;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer34.initializers = servletContextInitializerArray48;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean52 = undertowEmbeddedServletContainerFactory51.isPersistSession();
        java.io.File file53 = undertowEmbeddedServletContainerFactory51.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings54 = undertowEmbeddedServletContainerFactory51.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader55 = undertowEmbeddedServletContainerFactory51.resourceLoader;
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory51.setSessionStoreDir(file56);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo58 = null;
        undertowEmbeddedServletContainerFactory51.configureErrorPages(deploymentInfo58);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer60 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer60 };
        undertowEmbeddedServletContainerFactory51.addInitializers(servletContextInitializerArray61);
        initializer50.initializers = servletContextInitializerArray61;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray64 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer50.initializers = servletContextInitializerArray64;
        initializer34.initializers = servletContextInitializerArray64;
        io.undertow.servlet.api.DeploymentManager deploymentManager67 = undertowEmbeddedServletContainerFactory29.createDeploymentManager(servletContextInitializerArray64);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer69 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder22, deploymentManager67, 1800);
        undertowEmbeddedServletContainerFactory2.workerThreads = 8080;
        boolean boolean72 = undertowEmbeddedServletContainerFactory2.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        int int9 = undertowEmbeddedServletContainerFactory2.getSessionTimeout();
        java.lang.String str10 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        undertowEmbeddedServletContainerFactory2.setRegisterJspServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.String str41 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        java.io.File file47 = undertowEmbeddedServletContainerFactory45.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings48 = undertowEmbeddedServletContainerFactory45.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory45.resourceLoader;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory45.setSessionStoreDir(file50);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo52 = null;
        undertowEmbeddedServletContainerFactory45.configureErrorPages(deploymentInfo52);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer54 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer54 };
        undertowEmbeddedServletContainerFactory45.addInitializers(servletContextInitializerArray55);
        initializer44.initializers = servletContextInitializerArray55;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean59 = undertowEmbeddedServletContainerFactory58.isPersistSession();
        java.io.File file60 = undertowEmbeddedServletContainerFactory58.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings61 = undertowEmbeddedServletContainerFactory58.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader62 = undertowEmbeddedServletContainerFactory58.resourceLoader;
        java.io.File file63 = null;
        undertowEmbeddedServletContainerFactory58.setSessionStoreDir(file63);
        undertowEmbeddedServletContainerFactory58.setBufferSize((java.lang.Integer) (-1));
        java.io.File file67 = null;
        undertowEmbeddedServletContainerFactory58.accessLogDirectory = file67;
        java.lang.Integer int69 = undertowEmbeddedServletContainerFactory58.buffersPerRegion;
        undertowEmbeddedServletContainerFactory58.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory58.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory74 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean75 = undertowEmbeddedServletContainerFactory74.isPersistSession();
        java.io.File file76 = undertowEmbeddedServletContainerFactory74.accessLogDirectory;
        undertowEmbeddedServletContainerFactory74.setSessionTimeout(1);
        boolean boolean79 = undertowEmbeddedServletContainerFactory74.accessLogEnabled;
        undertowEmbeddedServletContainerFactory74.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory84 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory84.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file87 = null;
        undertowEmbeddedServletContainerFactory84.accessLogDirectory = file87;
        boolean boolean89 = undertowEmbeddedServletContainerFactory84.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray90 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory84.addInitializers(servletContextInitializerArray90);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer92 = undertowEmbeddedServletContainerFactory74.getEmbeddedServletContainer(servletContextInitializerArray90);
        undertowEmbeddedServletContainerFactory58.addInitializers(servletContextInitializerArray90);
        initializer44.initializers = servletContextInitializerArray90;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer95 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer95);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.String str41 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        int int42 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1800 + "'", int42 == 1800);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory13.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        int int18 = undertowEmbeddedServletContainerFactory13.getPort();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        undertowEmbeddedServletContainerFactory13.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory13.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.io.File file26 = undertowEmbeddedServletContainerFactory24.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory24.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader28 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        undertowEmbeddedServletContainerFactory24.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory24.builderCustomizers;
        undertowEmbeddedServletContainerFactory13.builderCustomizers = undertowBuilderCustomizerList31;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList31);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        java.io.File file38 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = undertowEmbeddedServletContainerFactory36.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory40.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager44 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getUndertowEmbeddedServletContainer(builder43, deploymentManager44, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory36.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder50 = undertowEmbeddedServletContainerFactory36.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean52 = undertowEmbeddedServletContainerFactory51.isPersistSession();
        java.io.File file53 = undertowEmbeddedServletContainerFactory51.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList54 = undertowEmbeddedServletContainerFactory51.builderCustomizers;
        undertowEmbeddedServletContainerFactory51.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray57 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory51.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray57);
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("hi!");
        undertowEmbeddedServletContainerFactory0.bufferSize = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8080 + "'", int18 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray57);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.accessLogDirectory = file17;
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray20);
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray20);
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory27.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory27.directBuffers = true;
        org.springframework.boot.context.embedded.JspServlet jspServlet32 = undertowEmbeddedServletContainerFactory27.getJspServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection33 = undertowEmbeddedServletContainerFactory27.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers(undertowBuilderCustomizerCollection33);
        io.undertow.Undertow.Builder builder36 = undertowEmbeddedServletContainerFactory2.createBuilder((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory39.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory39.directBuffers = true;
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory39.setSessionStoreDir(file44);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean48 = undertowEmbeddedServletContainerFactory47.isPersistSession();
        java.io.File file49 = undertowEmbeddedServletContainerFactory47.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings50 = undertowEmbeddedServletContainerFactory47.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader51 = undertowEmbeddedServletContainerFactory47.resourceLoader;
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory47.setSessionStoreDir(file52);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory47.configureErrorPages(deploymentInfo54);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer56 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer56 };
        undertowEmbeddedServletContainerFactory47.addInitializers(servletContextInitializerArray57);
        initializer46.initializers = servletContextInitializerArray57;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer46.initializers = servletContextInitializerArray60;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean64 = undertowEmbeddedServletContainerFactory63.isPersistSession();
        java.io.File file65 = undertowEmbeddedServletContainerFactory63.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings66 = undertowEmbeddedServletContainerFactory63.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader67 = undertowEmbeddedServletContainerFactory63.resourceLoader;
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory63.setSessionStoreDir(file68);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo70 = null;
        undertowEmbeddedServletContainerFactory63.configureErrorPages(deploymentInfo70);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer72 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray73 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer72 };
        undertowEmbeddedServletContainerFactory63.addInitializers(servletContextInitializerArray73);
        initializer62.initializers = servletContextInitializerArray73;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray76 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer62.initializers = servletContextInitializerArray76;
        initializer46.initializers = servletContextInitializerArray76;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray79 = initializer46.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray80 = initializer46.initializers;
        io.undertow.servlet.api.DeploymentManager deploymentManager81 = undertowEmbeddedServletContainerFactory39.createDeploymentManager(servletContextInitializerArray80);
        io.undertow.servlet.api.DeploymentManager deploymentManager82 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager82);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.accessLogEnabled = false;
        boolean boolean10 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        java.io.File file11 = undertowEmbeddedServletContainerFactory6.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory6.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder28, deploymentManager35, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress41 = undertowEmbeddedServletContainerFactory40.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        java.io.File file44 = undertowEmbeddedServletContainerFactory42.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader46 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet47 = undertowEmbeddedServletContainerFactory42.getErrorPages();
        undertowEmbeddedServletContainerFactory40.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory13.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory6.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet47);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.String str53 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "" + "'", str53.equals(""));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet12 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file15 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        boolean boolean20 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory0.ioThreads;
        boolean boolean14 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        org.xnio.XnioWorker xnioWorker17 = undertowEmbeddedServletContainerFactory0.createWorker();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker17);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory9.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray12);
        org.springframework.boot.context.embedded.Ssl ssl14 = undertowEmbeddedServletContainerFactory9.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        undertowEmbeddedServletContainerFactory15.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        io.undertow.Undertow.Builder builder22 = undertowEmbeddedServletContainerFactory19.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager23 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder22, deploymentManager23, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager26 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer28 = undertowEmbeddedServletContainerFactory9.getUndertowEmbeddedServletContainer(builder22, deploymentManager26, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory7.getUndertowEmbeddedServletContainer(builder22, deploymentManager29, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress35 = undertowEmbeddedServletContainerFactory34.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        java.io.File file38 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings39 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader40 = undertowEmbeddedServletContainerFactory36.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet41 = undertowEmbeddedServletContainerFactory36.getErrorPages();
        undertowEmbeddedServletContainerFactory34.setErrorPages(errorPageSet41);
        undertowEmbeddedServletContainerFactory7.setErrorPages(errorPageSet41);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet41);
        java.io.File file45 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        boolean boolean46 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo47 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet9);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.workerThreads = 10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl8);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        java.lang.Boolean boolean10 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean10);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        java.lang.String str15 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        org.springframework.boot.context.embedded.Ssl ssl16 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        boolean boolean15 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray16);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray18 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray18);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray18);
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray18);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file9);
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        java.lang.String str2 = jarResourceManager0.jarPath;
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        java.io.File file41 = undertowEmbeddedServletContainerFactory39.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings42 = undertowEmbeddedServletContainerFactory39.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader43 = undertowEmbeddedServletContainerFactory39.resourceLoader;
        boolean boolean44 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader45 = undertowEmbeddedServletContainerFactory39.getServletClassLoader();
        undertowEmbeddedServletContainerFactory39.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList48 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean50 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        java.io.File file51 = undertowEmbeddedServletContainerFactory49.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList52 = undertowEmbeddedServletContainerFactory49.builderCustomizers;
        int int53 = undertowEmbeddedServletContainerFactory49.getPort();
        undertowEmbeddedServletContainerFactory49.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray56 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory49.addErrorPages(errorPageArray56);
        undertowEmbeddedServletContainerFactory39.addErrorPages(errorPageArray56);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray56);
        io.undertow.Undertow.Builder builder61 = undertowEmbeddedServletContainerFactory0.createBuilder(1);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8080 + "'", int53 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        boolean boolean17 = undertowEmbeddedServletContainerFactory2.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory2.setDisplayName("");
        java.util.concurrent.TimeUnit timeUnit21 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (byte) 1, timeUnit21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression11);
        java.lang.ClassLoader classLoader13 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader14);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory2.setAccessLogDirectory(file8);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file10;
        undertowEmbeddedServletContainerFactory2.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory2.ioThreads = 100;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray9 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.core.io.ResourceLoader resourceLoader16 = undertowEmbeddedServletContainerFactory14.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory19.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory19.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        java.lang.String str25 = undertowEmbeddedServletContainerFactory19.accessLogPattern;
        undertowEmbeddedServletContainerFactory19.workerThreads = 10;
        org.springframework.core.io.ResourceLoader resourceLoader28 = null;
        undertowEmbeddedServletContainerFactory19.setResourceLoader(resourceLoader28);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory32.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo37 = null;
        undertowEmbeddedServletContainerFactory32.configureErrorPages(deploymentInfo37);
        java.io.File file39 = undertowEmbeddedServletContainerFactory32.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory42.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory42.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings47 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader48 = null;
        undertowEmbeddedServletContainerFactory42.setResourceLoader(resourceLoader48);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory42.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory32.setBuilderCustomizers(undertowBuilderCustomizerCollection50);
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory32.setDocumentRoot(file52);
        undertowEmbeddedServletContainerFactory32.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean57 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        java.io.File file58 = undertowEmbeddedServletContainerFactory56.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings59 = undertowEmbeddedServletContainerFactory56.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader60 = undertowEmbeddedServletContainerFactory56.resourceLoader;
        undertowEmbeddedServletContainerFactory56.setBufferSize((java.lang.Integer) 1);
        boolean boolean63 = undertowEmbeddedServletContainerFactory56.useForwardHeaders;
        java.lang.ClassLoader classLoader64 = undertowEmbeddedServletContainerFactory56.getServletClassLoader();
        java.lang.Boolean boolean65 = undertowEmbeddedServletContainerFactory56.directBuffers;
        undertowEmbeddedServletContainerFactory56.setRegisterJspServlet(false);
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory56.setSessionStoreDir(file68);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean71 = undertowEmbeddedServletContainerFactory70.isPersistSession();
        undertowEmbeddedServletContainerFactory70.setPersistSession(false);
        undertowEmbeddedServletContainerFactory70.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory70.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory78 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean79 = undertowEmbeddedServletContainerFactory78.isPersistSession();
        java.io.File file80 = undertowEmbeddedServletContainerFactory78.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray81 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory78.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory70.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory56.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory32.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory14.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray81);
        java.io.File file89 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        int int21 = undertowEmbeddedServletContainerFactory16.getPort();
        java.lang.ClassLoader classLoader22 = undertowEmbeddedServletContainerFactory16.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        undertowEmbeddedServletContainerFactory23.setPersistSession(false);
        undertowEmbeddedServletContainerFactory23.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory23.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        java.io.File file33 = undertowEmbeddedServletContainerFactory31.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray34 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory31.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory23.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray34);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray39 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8080 + "'", int21 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray34);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        java.net.InetAddress inetAddress6 = undertowEmbeddedServletContainerFactory0.getAddress();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.ioThreads;
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory8.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory16.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory16.accessLogDirectory = file19;
        boolean boolean21 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray22 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory16.addInitializers(servletContextInitializerArray22);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray24 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray24);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList26 = undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList26;
        boolean boolean28 = undertowEmbeddedServletContainerFactory8.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory8.setBufferSize((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory33.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory33.accessLogDirectory = file36;
        boolean boolean38 = undertowEmbeddedServletContainerFactory33.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray39);
        undertowEmbeddedServletContainerFactory33.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory45.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file48 = null;
        undertowEmbeddedServletContainerFactory45.accessLogDirectory = file48;
        boolean boolean50 = undertowEmbeddedServletContainerFactory45.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory45.addInitializers(servletContextInitializerArray51);
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = undertowEmbeddedServletContainerFactory33.createDeploymentManager(servletContextInitializerArray51);
        undertowEmbeddedServletContainerFactory33.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Integer int56 = undertowEmbeddedServletContainerFactory33.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory59.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory59.directBuffers = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean66 = undertowEmbeddedServletContainerFactory65.isPersistSession();
        java.io.File file67 = undertowEmbeddedServletContainerFactory65.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings68 = undertowEmbeddedServletContainerFactory65.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader69 = undertowEmbeddedServletContainerFactory65.resourceLoader;
        java.io.File file70 = null;
        undertowEmbeddedServletContainerFactory65.setSessionStoreDir(file70);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo72 = null;
        undertowEmbeddedServletContainerFactory65.configureErrorPages(deploymentInfo72);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer74 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray75 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer74 };
        undertowEmbeddedServletContainerFactory65.addInitializers(servletContextInitializerArray75);
        initializer64.initializers = servletContextInitializerArray75;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray78 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer64.initializers = servletContextInitializerArray78;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer80 = undertowEmbeddedServletContainerFactory59.getEmbeddedServletContainer(servletContextInitializerArray78);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer81 = undertowEmbeddedServletContainerFactory33.getEmbeddedServletContainer(servletContextInitializerArray78);
        io.undertow.servlet.api.DeploymentManager deploymentManager82 = undertowEmbeddedServletContainerFactory8.createDeploymentManager(servletContextInitializerArray78);
        io.undertow.servlet.api.DeploymentManager deploymentManager83 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray78);
        java.lang.Class<?> wildcardClass84 = deploymentManager83.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.accessLogEnabled = false;
        boolean boolean12 = undertowEmbeddedServletContainerFactory8.isRegisterDefaultServlet();
        java.io.File file13 = undertowEmbeddedServletContainerFactory8.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory8.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray20 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory17.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray20);
        org.springframework.boot.context.embedded.Ssl ssl22 = undertowEmbeddedServletContainerFactory17.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        undertowEmbeddedServletContainerFactory23.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        io.undertow.Undertow.Builder builder30 = undertowEmbeddedServletContainerFactory27.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager31 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer33 = undertowEmbeddedServletContainerFactory23.getUndertowEmbeddedServletContainer(builder30, deploymentManager31, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager34 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer36 = undertowEmbeddedServletContainerFactory17.getUndertowEmbeddedServletContainer(builder30, deploymentManager34, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer39 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder30, deploymentManager37, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress43 = undertowEmbeddedServletContainerFactory42.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        java.io.File file46 = undertowEmbeddedServletContainerFactory44.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings47 = undertowEmbeddedServletContainerFactory44.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader48 = undertowEmbeddedServletContainerFactory44.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet49 = undertowEmbeddedServletContainerFactory44.getErrorPages();
        undertowEmbeddedServletContainerFactory42.setErrorPages(errorPageSet49);
        undertowEmbeddedServletContainerFactory15.setErrorPages(errorPageSet49);
        undertowEmbeddedServletContainerFactory8.setErrorPages(errorPageSet49);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet49);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader37;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        java.net.InetAddress inetAddress10 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress10);
        java.io.File file12 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings6 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings6);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.bufferSize = (-1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo9);
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader11;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        undertowEmbeddedServletContainerFactory15.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory27.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory27.accessLogDirectory = file30;
        undertowEmbeddedServletContainerFactory27.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression34 = null;
        undertowEmbeddedServletContainerFactory27.setCompression(compression34);
        java.io.File file36 = undertowEmbeddedServletContainerFactory27.getSessionStoreDir();
        org.springframework.core.io.ResourceLoader resourceLoader37 = null;
        undertowEmbeddedServletContainerFactory27.resourceLoader = resourceLoader37;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = undertowEmbeddedServletContainerFactory27.builderCustomizers;
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList39;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList39;
        undertowEmbeddedServletContainerFactory0.ioThreads = 10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList39);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo6);
        org.springframework.boot.context.embedded.ErrorPage errorPage8 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage9 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory6.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory6.accessLogDirectory = file9;
        boolean boolean11 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray12 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray12);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray14 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory6.addErrorPages(errorPageArray14);
        undertowEmbeddedServletContainerFactory1.addErrorPages(errorPageArray14);
        boolean boolean17 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setDisplayName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        java.io.File file16 = undertowEmbeddedServletContainerFactory14.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = undertowEmbeddedServletContainerFactory14.builderCustomizers;
        undertowEmbeddedServletContainerFactory14.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray20 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray20);
        undertowEmbeddedServletContainerFactory14.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression24 = undertowEmbeddedServletContainerFactory14.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory27.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory27.accessLogDirectory = file30;
        boolean boolean32 = undertowEmbeddedServletContainerFactory27.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory27.addInitializers(servletContextInitializerArray33);
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = undertowEmbeddedServletContainerFactory14.createDeploymentManager(servletContextInitializerArray33);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer36 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "0.0.0.0" + "'", str9.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer36);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        java.lang.String str8 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener3 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        boolean boolean21 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean23 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory13.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray16);
        org.springframework.boot.context.embedded.Ssl ssl18 = undertowEmbeddedServletContainerFactory13.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        undertowEmbeddedServletContainerFactory19.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory23.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory19.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer32 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder26, deploymentManager30, (int) 'a');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory13.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory34.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean38 = undertowEmbeddedServletContainerFactory37.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet39 = undertowEmbeddedServletContainerFactory37.getJspServlet();
        undertowEmbeddedServletContainerFactory34.setJspServlet(jspServlet39);
        undertowEmbeddedServletContainerFactory13.setJspServlet(jspServlet39);
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet39);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        undertowEmbeddedServletContainerFactory0.ioThreads = 10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList13 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        undertowEmbeddedServletContainerFactory10.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray16 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray16);
        java.net.InetAddress inetAddress18 = undertowEmbeddedServletContainerFactory10.getAddress();
        undertowEmbeddedServletContainerFactory10.ioThreads = 0;
        undertowEmbeddedServletContainerFactory10.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory10.setJspServletClassName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory27.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory27.accessLogDirectory = file30;
        boolean boolean32 = undertowEmbeddedServletContainerFactory27.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory27.addInitializers(servletContextInitializerArray33);
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray33);
        initializer9.initializers = servletContextInitializerArray33;
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager37);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener7 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.registerResourceChangeListener(resourceChangeListener7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean2 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file3 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader5 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer10 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer10 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray11);
        initializer0.initializers = servletContextInitializerArray11;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = null;
        initializer0.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = initializer0.initializers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray16);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.Ssl ssl8 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        int int10 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1800 + "'", int10 == 1800);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setDisplayName("");
        int int12 = undertowEmbeddedServletContainerFactory2.getPort();
        undertowEmbeddedServletContainerFactory2.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory17.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory17.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory17.setResourceLoader(resourceLoader23);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection25 = undertowEmbeddedServletContainerFactory17.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory17.setAccessLogEnabled(false);
        org.xnio.XnioWorker xnioWorker28 = undertowEmbeddedServletContainerFactory17.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory31.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory31.accessLogDirectory = file34;
        boolean boolean36 = undertowEmbeddedServletContainerFactory31.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean38 = undertowEmbeddedServletContainerFactory37.isPersistSession();
        java.io.File file39 = undertowEmbeddedServletContainerFactory37.accessLogDirectory;
        boolean boolean40 = undertowEmbeddedServletContainerFactory37.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray41 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList42 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList42, undertowDeploymentInfoCustomizerArray41);
        undertowEmbeddedServletContainerFactory37.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList42;
        undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList42;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray46 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList47 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList47, undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory31.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList47);
        org.springframework.boot.context.embedded.Compression compression50 = null;
        undertowEmbeddedServletContainerFactory31.setCompression(compression50);
        undertowEmbeddedServletContainerFactory31.setSessionTimeout(0);
        undertowEmbeddedServletContainerFactory31.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean57 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        undertowEmbeddedServletContainerFactory56.setPersistSession(false);
        undertowEmbeddedServletContainerFactory56.accessLogEnabled = false;
        boolean boolean62 = undertowEmbeddedServletContainerFactory56.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList63 = undertowEmbeddedServletContainerFactory56.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory31.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList63;
        undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList63;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList63;
        java.io.File file67 = null;
        undertowEmbeddedServletContainerFactory2.setAccessLogDirectory(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList63);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.io.File file12 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        boolean boolean13 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 100);
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory0.directBuffers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet2 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.xnio.XnioWorker xnioWorker3 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory6.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory6.accessLogDirectory = file9;
        boolean boolean11 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray12 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray12);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray14 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory6.addErrorPages(errorPageArray14);
        undertowEmbeddedServletContainerFactory6.useForwardHeaders = true;
        boolean boolean18 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory6.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory20.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory20.getMimeMappings();
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory20.setDocumentRoot(file25);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory20.ioThreads;
        java.net.InetAddress inetAddress28 = null;
        undertowEmbeddedServletContainerFactory20.setAddress(inetAddress28);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory32.accessLogDirectory = file35;
        boolean boolean37 = undertowEmbeddedServletContainerFactory32.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory32.addInitializers(servletContextInitializerArray38);
        undertowEmbeddedServletContainerFactory32.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory44.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.accessLogDirectory = file47;
        boolean boolean49 = undertowEmbeddedServletContainerFactory44.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory44.addInitializers(servletContextInitializerArray50);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory32.createDeploymentManager(servletContextInitializerArray50);
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = undertowEmbeddedServletContainerFactory20.createDeploymentManager(servletContextInitializerArray50);
        io.undertow.servlet.api.DeploymentManager deploymentManager54 = undertowEmbeddedServletContainerFactory6.createDeploymentManager(servletContextInitializerArray50);
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray50);
        java.lang.Class<?> wildcardClass56 = undertowEmbeddedServletContainerFactory0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (byte) 10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection3 = undertowEmbeddedServletContainerFactory2.getDeploymentInfoCustomizers();
        java.lang.Boolean boolean4 = undertowEmbeddedServletContainerFactory2.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean4);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("hi!", (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory2.createWorker();
        java.net.InetAddress inetAddress7 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory2.bufferSize;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.Compression compression8 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression8);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo6);
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory10.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray13);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (byte) 10);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory2.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(0);
        java.lang.Integer int15 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15.equals(1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet16 = undertowEmbeddedServletContainerFactory14.getJspServlet();
        boolean boolean17 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection18 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        java.io.File file22 = undertowEmbeddedServletContainerFactory20.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings23 = undertowEmbeddedServletContainerFactory20.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader24 = undertowEmbeddedServletContainerFactory20.resourceLoader;
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory20.setSessionStoreDir(file25);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo27 = null;
        undertowEmbeddedServletContainerFactory20.configureErrorPages(deploymentInfo27);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer29 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer29 };
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray30);
        initializer19.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer19.initializers = servletContextInitializerArray33;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        java.io.File file38 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings39 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader40 = undertowEmbeddedServletContainerFactory36.resourceLoader;
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory36.setSessionStoreDir(file41);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo43 = null;
        undertowEmbeddedServletContainerFactory36.configureErrorPages(deploymentInfo43);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer45 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer45 };
        undertowEmbeddedServletContainerFactory36.addInitializers(servletContextInitializerArray46);
        initializer35.initializers = servletContextInitializerArray46;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer35.initializers = servletContextInitializerArray49;
        initializer19.initializers = servletContextInitializerArray49;
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory14.createDeploymentManager(servletContextInitializerArray49);
        initializer13.initializers = servletContextInitializerArray49;
        io.undertow.servlet.api.DeploymentManager deploymentManager54 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray49);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList55 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList55);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory2.getAddress();
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) (-1));
        java.util.concurrent.TimeUnit timeUnit13 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (short) 1, timeUnit13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setDisplayName("0.0.0.0");
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file37);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file39);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file41;
        java.net.InetAddress inetAddress43 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer5 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray6 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer5 };
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray6);
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader8);
        io.undertow.Undertow.Builder builder10 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        java.io.File file13 = undertowEmbeddedServletContainerFactory11.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray14 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        undertowEmbeddedServletContainerFactory11.setMimeMappings(mimeMappings19);
        org.springframework.boot.context.embedded.Compression compression21 = undertowEmbeddedServletContainerFactory11.getCompression();
        java.lang.String str22 = undertowEmbeddedServletContainerFactory11.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        undertowEmbeddedServletContainerFactory23.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory23.createBuilder((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray32 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory29.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray32);
        org.springframework.boot.context.embedded.Ssl ssl34 = undertowEmbeddedServletContainerFactory29.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean36 = undertowEmbeddedServletContainerFactory35.isPersistSession();
        undertowEmbeddedServletContainerFactory35.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory39.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager43 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getUndertowEmbeddedServletContainer(builder42, deploymentManager43, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager46 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer48 = undertowEmbeddedServletContainerFactory29.getUndertowEmbeddedServletContainer(builder42, deploymentManager46, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean50 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        undertowEmbeddedServletContainerFactory49.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean54 = undertowEmbeddedServletContainerFactory53.isPersistSession();
        io.undertow.Undertow.Builder builder56 = undertowEmbeddedServletContainerFactory53.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager57 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer59 = undertowEmbeddedServletContainerFactory49.getUndertowEmbeddedServletContainer(builder56, deploymentManager57, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean61 = undertowEmbeddedServletContainerFactory60.isPersistSession();
        java.io.File file62 = undertowEmbeddedServletContainerFactory60.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList63 = undertowEmbeddedServletContainerFactory60.builderCustomizers;
        undertowEmbeddedServletContainerFactory60.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray66 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory60.addErrorPages(errorPageArray66);
        undertowEmbeddedServletContainerFactory60.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression70 = undertowEmbeddedServletContainerFactory60.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory73 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory73.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file76 = null;
        undertowEmbeddedServletContainerFactory73.accessLogDirectory = file76;
        boolean boolean78 = undertowEmbeddedServletContainerFactory73.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray79 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory73.addInitializers(servletContextInitializerArray79);
        io.undertow.servlet.api.DeploymentManager deploymentManager81 = undertowEmbeddedServletContainerFactory60.createDeploymentManager(servletContextInitializerArray79);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer83 = undertowEmbeddedServletContainerFactory29.getUndertowEmbeddedServletContainer(builder56, deploymentManager81, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer85 = undertowEmbeddedServletContainerFactory11.getUndertowEmbeddedServletContainer(builder28, deploymentManager81, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer87 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder10, deploymentManager81, (int) (short) -1);
        undertowEmbeddedServletContainerFactory0.bufferSize = 1800;
        java.lang.Integer int90 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "" + "'", str22.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int90);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory14.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory14.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        undertowEmbeddedServletContainerFactory24.setPersistSession(false);
        undertowEmbeddedServletContainerFactory24.accessLogEnabled = false;
        boolean boolean30 = undertowEmbeddedServletContainerFactory24.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList31 = undertowEmbeddedServletContainerFactory24.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList31;
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        org.springframework.boot.context.embedded.Ssl ssl36 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode37 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList31);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        boolean boolean9 = undertowEmbeddedServletContainerFactory6.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList11 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList11, undertowDeploymentInfoCustomizerArray10);
        undertowEmbeddedServletContainerFactory6.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList11;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList11;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.Compression compression17 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory0.setDisplayName("0.0.0.0");
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory0.ioThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.io.File file41 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.io.File file42 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader8);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.lang.Boolean boolean15 = undertowEmbeddedServletContainerFactory2.directBuffers;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        int int18 = undertowEmbeddedServletContainerFactory2.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15.equals(true));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        int int14 = undertowEmbeddedServletContainerFactory0.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer9 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer9 };
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray10);
        int int12 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean13 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) '#');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection16 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8080 + "'", int12 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection16);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        org.xnio.XnioWorker xnioWorker13 = undertowEmbeddedServletContainerFactory0.createWorker();
        undertowEmbeddedServletContainerFactory0.setDisplayName("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker13);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        java.lang.String str2 = jarResourceManager0.jarPath;
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "";
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener6 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource6 = jarResourceManager0.getResource("");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo6 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.bufferSize = 0;
        org.springframework.core.io.ResourceLoader resourceLoader11 = undertowEmbeddedServletContainerFactory2.resourceLoader;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory2.setSessionStoreDir(file12);
        undertowEmbeddedServletContainerFactory2.setRegisterJspServlet(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader11);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory8.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory8.setSsl(ssl14);
        undertowEmbeddedServletContainerFactory8.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory18.resourceLoader;
        boolean boolean23 = undertowEmbeddedServletContainerFactory18.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader24 = undertowEmbeddedServletContainerFactory18.getServletClassLoader();
        undertowEmbeddedServletContainerFactory18.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList27 = undertowEmbeddedServletContainerFactory18.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        java.io.File file30 = undertowEmbeddedServletContainerFactory28.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory28.builderCustomizers;
        int int32 = undertowEmbeddedServletContainerFactory28.getPort();
        undertowEmbeddedServletContainerFactory28.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray35 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray35);
        undertowEmbeddedServletContainerFactory18.addErrorPages(errorPageArray35);
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray35);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8080 + "'", int32 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray35);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        java.lang.String str2 = jarResourceManager0.jarPath;
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.jarPath = "0.0.0.0";
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource7 = jarResourceManager0.getResource("hi!");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory9.accessLogDirectory = file12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory9.addInitializers(servletContextInitializerArray15);
        undertowEmbeddedServletContainerFactory9.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory21.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory21.accessLogDirectory = file24;
        boolean boolean26 = undertowEmbeddedServletContainerFactory21.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory21.addInitializers(servletContextInitializerArray27);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = undertowEmbeddedServletContainerFactory9.createDeploymentManager(servletContextInitializerArray27);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager30);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        java.lang.String str6 = jarResourceManager0.jarPath;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory2.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray10 = undertowEmbeddedServletContainerFactory2.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader8);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.accessLogPattern = "hi!";
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory2.ioThreads;
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        int int21 = undertowEmbeddedServletContainerFactory16.getPort();
        java.lang.ClassLoader classLoader22 = undertowEmbeddedServletContainerFactory16.getServletClassLoader();
        undertowEmbeddedServletContainerFactory16.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        undertowEmbeddedServletContainerFactory25.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder30 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager31 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer33 = undertowEmbeddedServletContainerFactory16.getUndertowEmbeddedServletContainer(builder30, deploymentManager31, (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.configureSsl(ssl14, (int) (byte) 100, builder30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8080 + "'", int21 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer33);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory0.createWorker();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory0.bufferSize = (-1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder13, deploymentManager14, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer19 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder13, deploymentManager17, (int) 'a');
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader20;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file24);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray26 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer19);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList7 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList7);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ErrorPages must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.workerThreads = 0;
        boolean boolean12 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory15.getMimeMappings();
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory15.bufferSize;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setDocumentRoot(file20);
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory15.setResourceLoader(resourceLoader22);
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory15.createBuilder((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.configureSsl(ssl13, (int) '4', builder25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader4);
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file6);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.workerThreads = 10;
        java.net.InetAddress inetAddress12 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 8080);
        boolean boolean17 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet9);
        java.lang.ClassLoader classLoader11 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.xnio.XnioWorker xnioWorker12 = undertowEmbeddedServletContainerFactory0.createWorker();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker12);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        io.undertow.server.handlers.resource.ResourceManager resourceManager13 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager13);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory11.getJspServlet();
        boolean boolean14 = undertowEmbeddedServletContainerFactory11.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory11.setContextPath("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        undertowEmbeddedServletContainerFactory17.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory17.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl23 = null;
        undertowEmbeddedServletContainerFactory17.setSsl(ssl23);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory17.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        java.io.File file28 = undertowEmbeddedServletContainerFactory26.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray29 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory26.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray29);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        java.io.File file33 = undertowEmbeddedServletContainerFactory31.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings34 = undertowEmbeddedServletContainerFactory31.getMimeMappings();
        undertowEmbeddedServletContainerFactory26.setMimeMappings(mimeMappings34);
        org.springframework.boot.context.embedded.Compression compression36 = undertowEmbeddedServletContainerFactory26.getCompression();
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory26.setPort((-1));
        undertowEmbeddedServletContainerFactory26.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory26.directBuffers = true;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList45 = undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory17.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList45;
        undertowEmbeddedServletContainerFactory11.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList45;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory50.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory50.accessLogDirectory = file53;
        boolean boolean55 = undertowEmbeddedServletContainerFactory50.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray56 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory50.addInitializers(servletContextInitializerArray56);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray58 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory50.addErrorPages(errorPageArray58);
        undertowEmbeddedServletContainerFactory50.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean63 = undertowEmbeddedServletContainerFactory62.isPersistSession();
        java.io.File file64 = undertowEmbeddedServletContainerFactory62.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings65 = undertowEmbeddedServletContainerFactory62.getMimeMappings();
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory62.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer67 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray68 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer67 };
        undertowEmbeddedServletContainerFactory62.addBuilderCustomizers(undertowBuilderCustomizerArray68);
        undertowEmbeddedServletContainerFactory50.addBuilderCustomizers(undertowBuilderCustomizerArray68);
        undertowEmbeddedServletContainerFactory11.addBuilderCustomizers(undertowBuilderCustomizerArray68);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray68);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.ioThreads;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory2.getDisplayName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory13.accessLogDirectory = file16;
        boolean boolean18 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray19);
        io.undertow.servlet.api.DeploymentManager deploymentManager21 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray19);
        io.undertow.server.handlers.resource.ResourceManager resourceManager22 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.ErrorPage errorPage23 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage24 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager22);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory25.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory25.directBuffers = true;
        org.springframework.boot.context.embedded.JspServlet jspServlet30 = undertowEmbeddedServletContainerFactory25.getJspServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection31 = undertowEmbeddedServletContainerFactory25.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection31);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory33.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        io.undertow.Undertow.Builder builder39 = undertowEmbeddedServletContainerFactory36.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings40 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        undertowEmbeddedServletContainerFactory33.setMimeMappings(mimeMappings40);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings40);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.Compression compression8 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.Ssl ssl9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory13.accessLogDirectory = file16;
        undertowEmbeddedServletContainerFactory13.setPersistSession(true);
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory13.bufferSize;
        undertowEmbeddedServletContainerFactory13.workerThreads = 0;
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory13.setResourceLoader(resourceLoader23);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory26.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory26.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory26.setBuffersPerRegion((java.lang.Integer) 1800);
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory26.createBuilder((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory37.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory37.accessLogDirectory = file40;
        boolean boolean42 = undertowEmbeddedServletContainerFactory37.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory37.addInitializers(servletContextInitializerArray43);
        undertowEmbeddedServletContainerFactory37.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory49.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory49.accessLogDirectory = file52;
        boolean boolean54 = undertowEmbeddedServletContainerFactory49.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory49.addInitializers(servletContextInitializerArray55);
        io.undertow.servlet.api.DeploymentManager deploymentManager57 = undertowEmbeddedServletContainerFactory37.createDeploymentManager(servletContextInitializerArray55);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer59 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder34, deploymentManager57, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureSsl(ssl9, (int) (short) 0, builder34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer59);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.accessLogEnabled = false;
        boolean boolean10 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        java.io.File file11 = undertowEmbeddedServletContainerFactory6.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory6.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder28, deploymentManager35, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress41 = undertowEmbeddedServletContainerFactory40.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        java.io.File file44 = undertowEmbeddedServletContainerFactory42.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader46 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet47 = undertowEmbeddedServletContainerFactory42.getErrorPages();
        undertowEmbeddedServletContainerFactory40.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory13.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory6.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet47);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        io.undertow.Undertow.Builder builder53 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean55 = undertowEmbeddedServletContainerFactory54.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet56 = undertowEmbeddedServletContainerFactory54.getJspServlet();
        boolean boolean57 = undertowEmbeddedServletContainerFactory54.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean61 = undertowEmbeddedServletContainerFactory60.isPersistSession();
        java.io.File file62 = undertowEmbeddedServletContainerFactory60.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings63 = undertowEmbeddedServletContainerFactory60.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader64 = undertowEmbeddedServletContainerFactory60.resourceLoader;
        java.io.File file65 = null;
        undertowEmbeddedServletContainerFactory60.setSessionStoreDir(file65);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory60.configureErrorPages(deploymentInfo67);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer69 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer69 };
        undertowEmbeddedServletContainerFactory60.addInitializers(servletContextInitializerArray70);
        initializer59.initializers = servletContextInitializerArray70;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray73 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer59.initializers = servletContextInitializerArray73;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean77 = undertowEmbeddedServletContainerFactory76.isPersistSession();
        java.io.File file78 = undertowEmbeddedServletContainerFactory76.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings79 = undertowEmbeddedServletContainerFactory76.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader80 = undertowEmbeddedServletContainerFactory76.resourceLoader;
        java.io.File file81 = null;
        undertowEmbeddedServletContainerFactory76.setSessionStoreDir(file81);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo83 = null;
        undertowEmbeddedServletContainerFactory76.configureErrorPages(deploymentInfo83);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer85 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray86 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer85 };
        undertowEmbeddedServletContainerFactory76.addInitializers(servletContextInitializerArray86);
        initializer75.initializers = servletContextInitializerArray86;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray89 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer75.initializers = servletContextInitializerArray89;
        initializer59.initializers = servletContextInitializerArray89;
        io.undertow.servlet.api.DeploymentManager deploymentManager92 = undertowEmbeddedServletContainerFactory54.createDeploymentManager(servletContextInitializerArray89);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer94 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder53, deploymentManager92, 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer94);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        boolean boolean11 = undertowEmbeddedServletContainerFactory2.useForwardHeaders;
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        java.io.File file14 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.net.InetAddress inetAddress14 = undertowEmbeddedServletContainerFactory0.getAddress();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo15 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress14);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.workerThreads = 0;
        undertowEmbeddedServletContainerFactory2.setContextPath("");
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress14);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory2.bufferSize;
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.lang.ClassLoader classLoader5 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader5);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        int int8 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1800 + "'", int8 == 1800);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 0;
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = (-1);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        int int4 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray8 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory5.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory5.getCompression();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory5.buffersPerRegion;
        undertowEmbeddedServletContainerFactory5.bufferSize = (-1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo14);
        org.springframework.core.io.ResourceLoader resourceLoader16 = null;
        undertowEmbeddedServletContainerFactory5.resourceLoader = resourceLoader16;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory20.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory20.accessLogDirectory = file23;
        boolean boolean25 = undertowEmbeddedServletContainerFactory20.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray26 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray26);
        undertowEmbeddedServletContainerFactory20.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory32.accessLogDirectory = file35;
        undertowEmbeddedServletContainerFactory32.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression39 = null;
        undertowEmbeddedServletContainerFactory32.setCompression(compression39);
        java.io.File file41 = undertowEmbeddedServletContainerFactory32.getSessionStoreDir();
        org.springframework.core.io.ResourceLoader resourceLoader42 = null;
        undertowEmbeddedServletContainerFactory32.resourceLoader = resourceLoader42;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory32.builderCustomizers;
        undertowEmbeddedServletContainerFactory20.builderCustomizers = undertowBuilderCustomizerList44;
        undertowEmbeddedServletContainerFactory5.builderCustomizers = undertowBuilderCustomizerList44;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList44;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1800 + "'", int4 == 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.io.File file41 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory0.workerThreads;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo43 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        java.io.File file47 = undertowEmbeddedServletContainerFactory45.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings48 = undertowEmbeddedServletContainerFactory45.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory45.resourceLoader;
        java.io.File file50 = null;
        undertowEmbeddedServletContainerFactory45.setSessionStoreDir(file50);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo52 = null;
        undertowEmbeddedServletContainerFactory45.configureErrorPages(deploymentInfo52);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer54 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray55 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer54 };
        undertowEmbeddedServletContainerFactory45.addInitializers(servletContextInitializerArray55);
        initializer44.initializers = servletContextInitializerArray55;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray58 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer44.initializers = servletContextInitializerArray58;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean62 = undertowEmbeddedServletContainerFactory61.isPersistSession();
        java.io.File file63 = undertowEmbeddedServletContainerFactory61.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings64 = undertowEmbeddedServletContainerFactory61.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader65 = undertowEmbeddedServletContainerFactory61.resourceLoader;
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory61.setSessionStoreDir(file66);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo68 = null;
        undertowEmbeddedServletContainerFactory61.configureErrorPages(deploymentInfo68);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer70 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray71 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer70 };
        undertowEmbeddedServletContainerFactory61.addInitializers(servletContextInitializerArray71);
        initializer60.initializers = servletContextInitializerArray71;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray74 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer60.initializers = servletContextInitializerArray74;
        initializer44.initializers = servletContextInitializerArray74;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray77 = initializer44.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray78 = initializer44.initializers;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo43, servletContextInitializerArray78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray78);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory2.setSessionStoreDir(file7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory10.resourceLoader;
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory10.setSessionStoreDir(file15);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory10.configureErrorPages(deploymentInfo17);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer19 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer19 };
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray20);
        initializer9.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray23 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer9.initializers = servletContextInitializerArray23;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        java.io.File file28 = undertowEmbeddedServletContainerFactory26.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings29 = undertowEmbeddedServletContainerFactory26.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader30 = undertowEmbeddedServletContainerFactory26.resourceLoader;
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory26.setSessionStoreDir(file31);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo33 = null;
        undertowEmbeddedServletContainerFactory26.configureErrorPages(deploymentInfo33);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer35 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer35 };
        undertowEmbeddedServletContainerFactory26.addInitializers(servletContextInitializerArray36);
        initializer25.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer25.initializers = servletContextInitializerArray39;
        initializer9.initializers = servletContextInitializerArray39;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = initializer9.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = initializer9.initializers;
        io.undertow.servlet.api.DeploymentManager deploymentManager44 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray43);
        java.lang.ClassLoader classLoader45 = undertowEmbeddedServletContainerFactory2.getServletClassLoader();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader45);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        java.net.InetAddress inetAddress11 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "0.0.0.0" + "'", str10.equals("0.0.0.0"));
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection8 = undertowEmbeddedServletContainerFactory2.getDeploymentInfoCustomizers();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory2.setSessionStoreDir(file9);
        undertowEmbeddedServletContainerFactory2.setAccessLogPattern("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection8);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader8;
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getContextPath();
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file12);
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "hi!";
        org.springframework.boot.context.embedded.Ssl ssl16 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 10);
        java.lang.ClassLoader classLoader23 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet26 = undertowEmbeddedServletContainerFactory24.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet26);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet26);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList9 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList13 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        int int14 = undertowEmbeddedServletContainerFactory10.getPort();
        undertowEmbeddedServletContainerFactory10.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray17 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray17);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray17);
        io.undertow.server.handlers.resource.ResourceManager resourceManager20 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo21 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8080 + "'", int14 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager20);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        int int7 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory0.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList10 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray11 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8080 + "'", int7 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList10);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        boolean boolean15 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray16);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray16);
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory21.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory21.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder35 = undertowEmbeddedServletContainerFactory21.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        java.io.File file38 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = undertowEmbeddedServletContainerFactory36.builderCustomizers;
        undertowEmbeddedServletContainerFactory36.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray42 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray42);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray42);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray42);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file46;
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        org.springframework.core.io.ResourceLoader resourceLoader50 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray42);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory13.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings18);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file23);
        io.undertow.server.HttpHandler httpHandler25 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler26 = undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray2 = initializer1.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray3 = initializer1.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory5.resourceLoader;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory5.setSessionStoreDir(file10);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory5.configureErrorPages(deploymentInfo12);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer14 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer14 };
        undertowEmbeddedServletContainerFactory5.addInitializers(servletContextInitializerArray15);
        initializer4.initializers = servletContextInitializerArray15;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer4.initializers = servletContextInitializerArray18;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory21.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader25 = undertowEmbeddedServletContainerFactory21.resourceLoader;
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory21.setSessionStoreDir(file26);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo28 = null;
        undertowEmbeddedServletContainerFactory21.configureErrorPages(deploymentInfo28);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer30 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer30 };
        undertowEmbeddedServletContainerFactory21.addInitializers(servletContextInitializerArray31);
        initializer20.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer20.initializers = servletContextInitializerArray34;
        initializer4.initializers = servletContextInitializerArray34;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = initializer4.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = initializer4.initializers;
        initializer1.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = initializer1.initializers;
        initializer0.initializers = servletContextInitializerArray40;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        undertowEmbeddedServletContainerFactory11.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory11.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray22 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray22);
        undertowEmbeddedServletContainerFactory11.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray22);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray22);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        java.io.File file28 = undertowEmbeddedServletContainerFactory26.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray29 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory26.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray29);
        org.springframework.boot.context.embedded.Ssl ssl31 = undertowEmbeddedServletContainerFactory26.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        undertowEmbeddedServletContainerFactory32.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        io.undertow.Undertow.Builder builder39 = undertowEmbeddedServletContainerFactory36.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager40 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer42 = undertowEmbeddedServletContainerFactory32.getUndertowEmbeddedServletContainer(builder39, deploymentManager40, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager43 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer45 = undertowEmbeddedServletContainerFactory26.getUndertowEmbeddedServletContainer(builder39, deploymentManager43, (int) 'a');
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection46 = undertowEmbeddedServletContainerFactory26.getDeploymentInfoCustomizers();
        java.io.File file47 = undertowEmbeddedServletContainerFactory26.getSessionStoreDir();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection48 = undertowEmbeddedServletContainerFactory26.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean50 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        java.io.File file51 = undertowEmbeddedServletContainerFactory49.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings52 = undertowEmbeddedServletContainerFactory49.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader53 = undertowEmbeddedServletContainerFactory49.resourceLoader;
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory49.setSessionStoreDir(file54);
        undertowEmbeddedServletContainerFactory49.setBufferSize((java.lang.Integer) (-1));
        java.io.File file58 = null;
        undertowEmbeddedServletContainerFactory49.accessLogDirectory = file58;
        undertowEmbeddedServletContainerFactory49.buffersPerRegion = 0;
        org.xnio.XnioWorker xnioWorker62 = undertowEmbeddedServletContainerFactory49.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList63 = undertowEmbeddedServletContainerFactory49.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory26.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList63;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList63);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet8 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        org.springframework.core.io.ResourceLoader resourceLoader13 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader13;
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 8080);
        boolean boolean17 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.String str12 = undertowEmbeddedServletContainerFactory0.accessLogPattern;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.net.InetAddress inetAddress14 = undertowEmbeddedServletContainerFactory0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress14);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        int int7 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory41.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        io.undertow.Undertow.Builder builder48 = undertowEmbeddedServletContainerFactory45.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager49 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer51 = undertowEmbeddedServletContainerFactory41.getUndertowEmbeddedServletContainer(builder48, deploymentManager49, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory41.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder55 = undertowEmbeddedServletContainerFactory41.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean57 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        java.io.File file58 = undertowEmbeddedServletContainerFactory56.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList59 = undertowEmbeddedServletContainerFactory56.builderCustomizers;
        undertowEmbeddedServletContainerFactory56.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray62 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory56.addErrorPages(errorPageArray62);
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray62);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray62);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo66 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo66);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet68 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet68);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader12);
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "0.0.0.0";
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) -1);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file18);
        java.io.File file20 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress8);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = initializer13.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray15 = initializer13.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo24);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer26 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer26 };
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray27);
        initializer16.initializers = servletContextInitializerArray27;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer16.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        java.io.File file35 = undertowEmbeddedServletContainerFactory33.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings36 = undertowEmbeddedServletContainerFactory33.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader37 = undertowEmbeddedServletContainerFactory33.resourceLoader;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory33.setSessionStoreDir(file38);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo40 = null;
        undertowEmbeddedServletContainerFactory33.configureErrorPages(deploymentInfo40);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer42 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer42 };
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray43);
        initializer32.initializers = servletContextInitializerArray43;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer32.initializers = servletContextInitializerArray46;
        initializer16.initializers = servletContextInitializerArray46;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = initializer16.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = initializer16.initializers;
        initializer13.initializers = servletContextInitializerArray50;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray52 = initializer13.initializers;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer53 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer53);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.useForwardHeaders = true;
        boolean boolean14 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 0);
        java.lang.String str17 = undertowEmbeddedServletContainerFactory2.getContextPath();
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory2.setSessionStoreDir(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.lang.String str3 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory2.bufferSize = 0;
        undertowEmbeddedServletContainerFactory2.setAccessLogPattern("");
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory2.resourceLoader;
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory2.bufferSize;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10.equals(0));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory7.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray23 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        org.springframework.boot.context.embedded.Compression compression28 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.String str29 = undertowEmbeddedServletContainerFactory0.accessLogPattern;
        org.springframework.boot.context.embedded.Compression compression30 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression30);
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory2.setAccessLogPattern("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "0.0.0.0" + "'", str13.equals("0.0.0.0"));
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory2.getErrorPages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet4);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection5 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection5);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        int int12 = undertowEmbeddedServletContainerFactory0.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8080 + "'", int12 == 8080);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory13.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings18);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        org.springframework.core.io.ResourceLoader resourceLoader24 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader24;
        org.springframework.boot.context.embedded.Compression compression26 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression26);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray11 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory16.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory16.accessLogDirectory = file19;
        boolean boolean21 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        boolean boolean25 = undertowEmbeddedServletContainerFactory22.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList27 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList27, undertowDeploymentInfoCustomizerArray26);
        undertowEmbeddedServletContainerFactory22.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList27;
        undertowEmbeddedServletContainerFactory16.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList27;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray31 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList32 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList32, undertowBuilderCustomizerArray31);
        undertowEmbeddedServletContainerFactory16.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList32);
        org.springframework.boot.context.embedded.Compression compression35 = null;
        undertowEmbeddedServletContainerFactory16.setCompression(compression35);
        undertowEmbeddedServletContainerFactory16.setSessionTimeout(0);
        undertowEmbeddedServletContainerFactory16.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray44 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory41.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray44);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean47 = undertowEmbeddedServletContainerFactory46.isPersistSession();
        java.io.File file48 = undertowEmbeddedServletContainerFactory46.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings49 = undertowEmbeddedServletContainerFactory46.getMimeMappings();
        undertowEmbeddedServletContainerFactory41.setMimeMappings(mimeMappings49);
        org.springframework.boot.context.embedded.Compression compression51 = undertowEmbeddedServletContainerFactory41.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory54.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory54.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings59 = undertowEmbeddedServletContainerFactory54.getMimeMappings();
        undertowEmbeddedServletContainerFactory41.setMimeMappings(mimeMappings59);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory41.setSessionStoreDir(file61);
        boolean boolean63 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings64 = undertowEmbeddedServletContainerFactory41.getMimeMappings();
        undertowEmbeddedServletContainerFactory16.setMimeMappings(mimeMappings64);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings64);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory0.getSsl();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.lang.Boolean boolean12 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean12);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray12 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray12);
        java.io.File file14 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader15;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory7.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory7.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory7.configureErrorPages(deploymentInfo12);
        java.io.File file14 = undertowEmbeddedServletContainerFactory7.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean36 = undertowEmbeddedServletContainerFactory35.isPersistSession();
        undertowEmbeddedServletContainerFactory35.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        io.undertow.Undertow.Builder builder42 = undertowEmbeddedServletContainerFactory39.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager43 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer45 = undertowEmbeddedServletContainerFactory35.getUndertowEmbeddedServletContainer(builder42, deploymentManager43, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean47 = undertowEmbeddedServletContainerFactory46.isPersistSession();
        java.io.File file48 = undertowEmbeddedServletContainerFactory46.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList49 = undertowEmbeddedServletContainerFactory46.builderCustomizers;
        undertowEmbeddedServletContainerFactory46.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray52 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory46.addErrorPages(errorPageArray52);
        undertowEmbeddedServletContainerFactory46.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression56 = undertowEmbeddedServletContainerFactory46.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory59.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory59.accessLogDirectory = file62;
        boolean boolean64 = undertowEmbeddedServletContainerFactory59.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory59.addInitializers(servletContextInitializerArray65);
        io.undertow.servlet.api.DeploymentManager deploymentManager67 = undertowEmbeddedServletContainerFactory46.createDeploymentManager(servletContextInitializerArray65);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer69 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder42, deploymentManager67, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean71 = undertowEmbeddedServletContainerFactory70.isPersistSession();
        java.io.File file72 = undertowEmbeddedServletContainerFactory70.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings73 = undertowEmbeddedServletContainerFactory70.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader74 = undertowEmbeddedServletContainerFactory70.resourceLoader;
        java.io.File file75 = null;
        undertowEmbeddedServletContainerFactory70.setSessionStoreDir(file75);
        undertowEmbeddedServletContainerFactory70.setBufferSize((java.lang.Integer) (-1));
        java.io.File file79 = null;
        undertowEmbeddedServletContainerFactory70.accessLogDirectory = file79;
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory70.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray82 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory70.addInitializers(servletContextInitializerArray82);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer84 = undertowEmbeddedServletContainerFactory15.getEmbeddedServletContainer(servletContextInitializerArray82);
        io.undertow.servlet.api.DeploymentManager deploymentManager85 = undertowEmbeddedServletContainerFactory7.createDeploymentManager(servletContextInitializerArray82);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer86 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer86);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        java.io.File file1 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.ioThreads = 1;
        org.springframework.boot.context.embedded.ErrorPage errorPage6 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage7 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory0.workerThreads = 1800;
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        int int15 = undertowEmbeddedServletContainerFactory10.getPort();
        java.lang.ClassLoader classLoader16 = undertowEmbeddedServletContainerFactory10.getServletClassLoader();
        int int17 = undertowEmbeddedServletContainerFactory10.getPort();
        boolean boolean18 = undertowEmbeddedServletContainerFactory10.isAccessLogEnabled();
        java.net.InetAddress inetAddress19 = undertowEmbeddedServletContainerFactory10.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory26.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory26.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo31 = null;
        undertowEmbeddedServletContainerFactory26.configureErrorPages(deploymentInfo31);
        java.io.File file33 = undertowEmbeddedServletContainerFactory26.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory36.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory36.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings41 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader42 = null;
        undertowEmbeddedServletContainerFactory36.setResourceLoader(resourceLoader42);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection44 = undertowEmbeddedServletContainerFactory36.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory26.setBuilderCustomizers(undertowBuilderCustomizerCollection44);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory26.setDocumentRoot(file46);
        undertowEmbeddedServletContainerFactory26.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean51 = undertowEmbeddedServletContainerFactory50.isPersistSession();
        java.io.File file52 = undertowEmbeddedServletContainerFactory50.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings53 = undertowEmbeddedServletContainerFactory50.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader54 = undertowEmbeddedServletContainerFactory50.resourceLoader;
        undertowEmbeddedServletContainerFactory50.setBufferSize((java.lang.Integer) 1);
        boolean boolean57 = undertowEmbeddedServletContainerFactory50.useForwardHeaders;
        java.lang.ClassLoader classLoader58 = undertowEmbeddedServletContainerFactory50.getServletClassLoader();
        java.lang.Boolean boolean59 = undertowEmbeddedServletContainerFactory50.directBuffers;
        undertowEmbeddedServletContainerFactory50.setRegisterJspServlet(false);
        java.io.File file62 = null;
        undertowEmbeddedServletContainerFactory50.setSessionStoreDir(file62);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean65 = undertowEmbeddedServletContainerFactory64.isPersistSession();
        undertowEmbeddedServletContainerFactory64.setPersistSession(false);
        undertowEmbeddedServletContainerFactory64.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory64.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean73 = undertowEmbeddedServletContainerFactory72.isPersistSession();
        java.io.File file74 = undertowEmbeddedServletContainerFactory72.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray75 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory72.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray75);
        undertowEmbeddedServletContainerFactory64.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray75);
        undertowEmbeddedServletContainerFactory50.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray75);
        undertowEmbeddedServletContainerFactory26.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray75);
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8080 + "'", int15 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8080 + "'", int17 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray75);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) -1);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet3 = undertowEmbeddedServletContainerFactory2.getErrorPages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet3);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.useForwardHeaders = true;
        java.lang.String str14 = undertowEmbeddedServletContainerFactory2.getListenAddress();
        undertowEmbeddedServletContainerFactory2.setDisplayName("hi!");
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression17);
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory2.resourceLoader = resourceLoader19;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "0.0.0.0" + "'", str14.equals("0.0.0.0"));
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory0.directBuffers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        undertowEmbeddedServletContainerFactory12.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory12.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 8080);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet20 = undertowEmbeddedServletContainerFactory12.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.Boolean boolean23 = undertowEmbeddedServletContainerFactory0.directBuffers;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet12 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file15 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "0.0.0.0";
        java.io.File file24 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory10.resourceLoader;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory20.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory20.accessLogDirectory = file23;
        boolean boolean25 = undertowEmbeddedServletContainerFactory20.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray26 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray26);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray28 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray28);
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray28);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray28);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file32;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray28);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory8.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory8.accessLogDirectory = file11;
        boolean boolean13 = undertowEmbeddedServletContainerFactory8.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory8.addInitializers(servletContextInitializerArray14);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray16 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        boolean boolean24 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        io.undertow.server.handlers.resource.ResourceManager resourceManager25 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory28.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory28.accessLogDirectory = file31;
        boolean boolean33 = undertowEmbeddedServletContainerFactory28.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray34 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory28.addInitializers(servletContextInitializerArray34);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray36 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory28.addErrorPages(errorPageArray36);
        undertowEmbeddedServletContainerFactory28.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory40.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer45 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray46 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer45 };
        undertowEmbeddedServletContainerFactory40.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory28.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean53 = undertowEmbeddedServletContainerFactory52.isPersistSession();
        io.undertow.Undertow.Builder builder55 = undertowEmbeddedServletContainerFactory52.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings56 = undertowEmbeddedServletContainerFactory52.getMimeMappings();
        boolean boolean57 = undertowEmbeddedServletContainerFactory52.isPersistSession();
        undertowEmbeddedServletContainerFactory52.setIoThreads((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.Ssl ssl60 = undertowEmbeddedServletContainerFactory52.getSsl();
        org.springframework.boot.context.embedded.JspServlet jspServlet61 = undertowEmbeddedServletContainerFactory52.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet61);
        org.springframework.boot.context.embedded.Ssl ssl63 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean66 = undertowEmbeddedServletContainerFactory65.isPersistSession();
        undertowEmbeddedServletContainerFactory65.setPersistSession(false);
        undertowEmbeddedServletContainerFactory65.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet71 = undertowEmbeddedServletContainerFactory65.getErrorPages();
        undertowEmbeddedServletContainerFactory65.setRegisterDefaultServlet(true);
        org.xnio.XnioWorker xnioWorker74 = undertowEmbeddedServletContainerFactory65.createWorker();
        io.undertow.Undertow.Builder builder76 = undertowEmbeddedServletContainerFactory65.createBuilder((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureSsl(ssl63, (int) (short) 0, builder76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 10);
        java.lang.ClassLoader classLoader23 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader23);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.lang.String str8 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        org.springframework.boot.context.embedded.Ssl ssl9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        java.io.File file13 = undertowEmbeddedServletContainerFactory11.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory11.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory11.resourceLoader;
        undertowEmbeddedServletContainerFactory11.setBufferSize((java.lang.Integer) 1);
        boolean boolean18 = undertowEmbeddedServletContainerFactory11.useForwardHeaders;
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory11.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray20 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList21 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList21, undertowBuilderCustomizerArray20);
        undertowEmbeddedServletContainerFactory11.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList21);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.io.File file26 = undertowEmbeddedServletContainerFactory24.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray27 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory24.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray27);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        undertowEmbeddedServletContainerFactory24.setMimeMappings(mimeMappings32);
        org.springframework.boot.context.embedded.Compression compression34 = undertowEmbeddedServletContainerFactory24.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory37.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory37.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings42 = undertowEmbeddedServletContainerFactory37.getMimeMappings();
        undertowEmbeddedServletContainerFactory24.setMimeMappings(mimeMappings42);
        undertowEmbeddedServletContainerFactory11.setMimeMappings(mimeMappings42);
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory11.createBuilder((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.configureSsl(ssl9, (int) (short) 0, builder46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager6 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(true);
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.Ssl ssl10 = undertowEmbeddedServletContainerFactory0.getSsl();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl10);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        undertowEmbeddedServletContainerFactory12.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray21 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory18.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray21);
        org.springframework.boot.context.embedded.Ssl ssl23 = undertowEmbeddedServletContainerFactory18.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        undertowEmbeddedServletContainerFactory24.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        io.undertow.Undertow.Builder builder31 = undertowEmbeddedServletContainerFactory28.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory24.getUndertowEmbeddedServletContainer(builder31, deploymentManager32, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory18.getUndertowEmbeddedServletContainer(builder31, deploymentManager35, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean39 = undertowEmbeddedServletContainerFactory38.isPersistSession();
        undertowEmbeddedServletContainerFactory38.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        io.undertow.Undertow.Builder builder45 = undertowEmbeddedServletContainerFactory42.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager46 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer48 = undertowEmbeddedServletContainerFactory38.getUndertowEmbeddedServletContainer(builder45, deploymentManager46, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean50 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        java.io.File file51 = undertowEmbeddedServletContainerFactory49.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList52 = undertowEmbeddedServletContainerFactory49.builderCustomizers;
        undertowEmbeddedServletContainerFactory49.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray55 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory49.addErrorPages(errorPageArray55);
        undertowEmbeddedServletContainerFactory49.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression59 = undertowEmbeddedServletContainerFactory49.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory62.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file65 = null;
        undertowEmbeddedServletContainerFactory62.accessLogDirectory = file65;
        boolean boolean67 = undertowEmbeddedServletContainerFactory62.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray68 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory62.addInitializers(servletContextInitializerArray68);
        io.undertow.servlet.api.DeploymentManager deploymentManager70 = undertowEmbeddedServletContainerFactory49.createDeploymentManager(servletContextInitializerArray68);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer72 = undertowEmbeddedServletContainerFactory18.getUndertowEmbeddedServletContainer(builder45, deploymentManager70, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer74 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder17, deploymentManager70, (int) '#');
        java.lang.Class<?> wildcardClass75 = deploymentManager70.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader9 = undertowEmbeddedServletContainerFactory5.resourceLoader;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory5.setSessionStoreDir(file10);
        undertowEmbeddedServletContainerFactory5.setBufferSize((java.lang.Integer) (-1));
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory5.accessLogDirectory = file14;
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory5.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory5.addInitializers(servletContextInitializerArray17);
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray17);
        int int20 = undertowEmbeddedServletContainerFactory0.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8080 + "'", int20 == 8080);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo4 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo4);
        org.springframework.boot.context.embedded.Ssl ssl6 = undertowEmbeddedServletContainerFactory0.getSsl();
        io.undertow.Undertow.Builder builder8 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        org.springframework.boot.context.embedded.Ssl ssl9 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory11.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory11.getMimeMappings();
        int int16 = undertowEmbeddedServletContainerFactory11.getPort();
        java.lang.ClassLoader classLoader17 = undertowEmbeddedServletContainerFactory11.getServletClassLoader();
        undertowEmbeddedServletContainerFactory11.setPort((int) (short) 1);
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory11.createBuilder((-1));
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureSsl(ssl9, (int) (short) 1, builder21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8080 + "'", int16 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18, undertowBuilderCustomizerArray17);
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18);
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression21);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout(0);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        java.io.File file29 = undertowEmbeddedServletContainerFactory27.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray30 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory27.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray30);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        java.io.File file34 = undertowEmbeddedServletContainerFactory32.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory32.getMimeMappings();
        undertowEmbeddedServletContainerFactory27.setMimeMappings(mimeMappings35);
        org.springframework.boot.context.embedded.Compression compression37 = undertowEmbeddedServletContainerFactory27.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory40.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory40.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        undertowEmbeddedServletContainerFactory27.setMimeMappings(mimeMappings45);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory27.setSessionStoreDir(file47);
        boolean boolean49 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings50 = undertowEmbeddedServletContainerFactory27.getMimeMappings();
        undertowEmbeddedServletContainerFactory2.setMimeMappings(mimeMappings50);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray52 = undertowEmbeddedServletContainerFactory2.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings50);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.jarPath = "hi!";
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener4 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        int int7 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory0.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8080 + "'", int7 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList10);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (byte) 10);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 1);
        io.undertow.Undertow.Builder builder5 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory6.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.accessLogDirectory = file17;
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray20);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray22 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory14.addErrorPages(errorPageArray22);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList24 = undertowEmbeddedServletContainerFactory14.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory6.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList24;
        boolean boolean26 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory31.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory31.accessLogDirectory = file34;
        boolean boolean36 = undertowEmbeddedServletContainerFactory31.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory31.addInitializers(servletContextInitializerArray37);
        undertowEmbeddedServletContainerFactory31.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory43.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory43.accessLogDirectory = file46;
        boolean boolean48 = undertowEmbeddedServletContainerFactory43.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory43.addInitializers(servletContextInitializerArray49);
        io.undertow.servlet.api.DeploymentManager deploymentManager51 = undertowEmbeddedServletContainerFactory31.createDeploymentManager(servletContextInitializerArray49);
        undertowEmbeddedServletContainerFactory31.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Integer int54 = undertowEmbeddedServletContainerFactory31.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory57.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory57.directBuffers = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory63 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean64 = undertowEmbeddedServletContainerFactory63.isPersistSession();
        java.io.File file65 = undertowEmbeddedServletContainerFactory63.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings66 = undertowEmbeddedServletContainerFactory63.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader67 = undertowEmbeddedServletContainerFactory63.resourceLoader;
        java.io.File file68 = null;
        undertowEmbeddedServletContainerFactory63.setSessionStoreDir(file68);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo70 = null;
        undertowEmbeddedServletContainerFactory63.configureErrorPages(deploymentInfo70);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer72 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray73 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer72 };
        undertowEmbeddedServletContainerFactory63.addInitializers(servletContextInitializerArray73);
        initializer62.initializers = servletContextInitializerArray73;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray76 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer62.initializers = servletContextInitializerArray76;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer78 = undertowEmbeddedServletContainerFactory57.getEmbeddedServletContainer(servletContextInitializerArray76);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer79 = undertowEmbeddedServletContainerFactory31.getEmbeddedServletContainer(servletContextInitializerArray76);
        io.undertow.servlet.api.DeploymentManager deploymentManager80 = undertowEmbeddedServletContainerFactory6.createDeploymentManager(servletContextInitializerArray76);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer82 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder5, deploymentManager80, 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer82);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) (byte) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory4.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory4.accessLogDirectory = file7;
        boolean boolean9 = undertowEmbeddedServletContainerFactory4.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory4.addInitializers(servletContextInitializerArray10);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray12 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory4.addErrorPages(errorPageArray12);
        undertowEmbeddedServletContainerFactory4.useForwardHeaders = true;
        boolean boolean16 = undertowEmbeddedServletContainerFactory4.isRegisterDefaultServlet();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory4.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory18.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setDocumentRoot(file23);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory18.ioThreads;
        java.net.InetAddress inetAddress26 = null;
        undertowEmbeddedServletContainerFactory18.setAddress(inetAddress26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory30.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory30.accessLogDirectory = file33;
        boolean boolean35 = undertowEmbeddedServletContainerFactory30.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory30.addInitializers(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory30.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory42.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory42.accessLogDirectory = file45;
        boolean boolean47 = undertowEmbeddedServletContainerFactory42.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory42.addInitializers(servletContextInitializerArray48);
        io.undertow.servlet.api.DeploymentManager deploymentManager50 = undertowEmbeddedServletContainerFactory30.createDeploymentManager(servletContextInitializerArray48);
        io.undertow.servlet.api.DeploymentManager deploymentManager51 = undertowEmbeddedServletContainerFactory18.createDeploymentManager(servletContextInitializerArray48);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory4.createDeploymentManager(servletContextInitializerArray48);
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = undertowEmbeddedServletContainerFactory1.createDeploymentManager(servletContextInitializerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager53);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory13.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        int int18 = undertowEmbeddedServletContainerFactory13.getPort();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        undertowEmbeddedServletContainerFactory13.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory13.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.io.File file26 = undertowEmbeddedServletContainerFactory24.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory24.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader28 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        undertowEmbeddedServletContainerFactory24.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory24.builderCustomizers;
        undertowEmbeddedServletContainerFactory13.builderCustomizers = undertowBuilderCustomizerList31;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList31);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        io.undertow.Undertow.Builder builder39 = undertowEmbeddedServletContainerFactory36.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings40 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        int int41 = undertowEmbeddedServletContainerFactory36.getPort();
        java.lang.ClassLoader classLoader42 = undertowEmbeddedServletContainerFactory36.getServletClassLoader();
        undertowEmbeddedServletContainerFactory36.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        java.io.File file47 = undertowEmbeddedServletContainerFactory45.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings48 = undertowEmbeddedServletContainerFactory45.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory45.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet50 = undertowEmbeddedServletContainerFactory45.getErrorPages();
        undertowEmbeddedServletContainerFactory36.setErrorPages(errorPageSet50);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet50);
        undertowEmbeddedServletContainerFactory0.workerThreads = 100;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8080 + "'", int18 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8080 + "'", int41 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet50);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.accessLogDirectory = file17;
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray20);
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray20);
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int25);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        undertowEmbeddedServletContainerFactory0.workerThreads = (-1);
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        java.lang.Class<?> wildcardClass37 = errorPageSet34.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 0;
        java.io.File file18 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.net.InetAddress inetAddress7 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress7);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo9);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        io.undertow.server.HttpHandler httpHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler13 = undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet11);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory0.createWorker();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker10);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.ioThreads = 1800;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory8.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader12 = undertowEmbeddedServletContainerFactory8.resourceLoader;
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory8.setSessionStoreDir(file13);
        undertowEmbeddedServletContainerFactory8.setBufferSize((java.lang.Integer) (-1));
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory8.accessLogDirectory = file17;
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory8.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory8.addInitializers(servletContextInitializerArray20);
        java.lang.Integer int22 = undertowEmbeddedServletContainerFactory8.workerThreads;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory8.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        undertowEmbeddedServletContainerFactory24.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory24.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file35 = null;
        undertowEmbeddedServletContainerFactory32.accessLogDirectory = file35;
        boolean boolean37 = undertowEmbeddedServletContainerFactory32.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory32.addInitializers(servletContextInitializerArray38);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray40 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory32.addErrorPages(errorPageArray40);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList42 = undertowEmbeddedServletContainerFactory32.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory24.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList42;
        undertowEmbeddedServletContainerFactory24.setBufferSize((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory24.setRegisterJspServlet(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory50.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file53 = null;
        undertowEmbeddedServletContainerFactory50.accessLogDirectory = file53;
        boolean boolean55 = undertowEmbeddedServletContainerFactory50.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray56 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory50.addInitializers(servletContextInitializerArray56);
        undertowEmbeddedServletContainerFactory50.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean61 = undertowEmbeddedServletContainerFactory60.isPersistSession();
        java.io.File file62 = undertowEmbeddedServletContainerFactory60.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings63 = undertowEmbeddedServletContainerFactory60.getMimeMappings();
        java.lang.Integer int64 = undertowEmbeddedServletContainerFactory60.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer65 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray66 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer65 };
        undertowEmbeddedServletContainerFactory60.addBuilderCustomizers(undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory50.addBuilderCustomizers(undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory8.addBuilderCustomizers(undertowBuilderCustomizerArray66);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray66);
        java.io.File file72 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo5 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.io.File file3 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file3);
        org.springframework.boot.context.embedded.Compression compression5 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression5);
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager7);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory14.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory14.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory14.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList22 = undertowEmbeddedServletContainerFactory14.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList22);
        java.net.InetAddress inetAddress24 = undertowEmbeddedServletContainerFactory0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress24);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 0;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray13 = initializer12.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = initializer12.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory16.resourceLoader;
        java.io.File file21 = null;
        undertowEmbeddedServletContainerFactory16.setSessionStoreDir(file21);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory16.configureErrorPages(deploymentInfo23);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer25 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray26 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer25 };
        undertowEmbeddedServletContainerFactory16.addInitializers(servletContextInitializerArray26);
        initializer15.initializers = servletContextInitializerArray26;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer15.initializers = servletContextInitializerArray29;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        java.io.File file34 = undertowEmbeddedServletContainerFactory32.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory32.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader36 = undertowEmbeddedServletContainerFactory32.resourceLoader;
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory32.setSessionStoreDir(file37);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo39 = null;
        undertowEmbeddedServletContainerFactory32.configureErrorPages(deploymentInfo39);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer41 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray42 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer41 };
        undertowEmbeddedServletContainerFactory32.addInitializers(servletContextInitializerArray42);
        initializer31.initializers = servletContextInitializerArray42;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray45 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer31.initializers = servletContextInitializerArray45;
        initializer15.initializers = servletContextInitializerArray45;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = initializer15.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = initializer15.initializers;
        initializer12.initializers = servletContextInitializerArray49;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = initializer12.initializers;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo11, servletContextInitializerArray51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory9.accessLogDirectory = file12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        boolean boolean18 = undertowEmbeddedServletContainerFactory15.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList20, undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory9.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings28);
        boolean boolean30 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.io.File file31 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        org.springframework.boot.context.embedded.Compression compression7 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression7);
        io.undertow.server.handlers.resource.ResourceManager resourceManager9 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager9);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        java.io.File file8 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.bufferSize;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8080 + "'", int10.equals(8080));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18, undertowBuilderCustomizerArray17);
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18);
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression21);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout(8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        io.undertow.Undertow.Builder builder11 = undertowEmbeddedServletContainerFactory8.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory8.getMimeMappings();
        int int13 = undertowEmbeddedServletContainerFactory8.getPort();
        java.lang.ClassLoader classLoader14 = undertowEmbeddedServletContainerFactory8.getServletClassLoader();
        undertowEmbeddedServletContainerFactory8.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory8.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader23 = undertowEmbeddedServletContainerFactory19.resourceLoader;
        undertowEmbeddedServletContainerFactory19.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList26 = undertowEmbeddedServletContainerFactory19.builderCustomizers;
        undertowEmbeddedServletContainerFactory8.builderCustomizers = undertowBuilderCustomizerList26;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList26;
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.Compression compression31 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression31);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection33 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        boolean boolean36 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8080 + "'", int13 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader8);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory15.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader19 = undertowEmbeddedServletContainerFactory15.resourceLoader;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory15.setSessionStoreDir(file20);
        undertowEmbeddedServletContainerFactory15.setBufferSize((java.lang.Integer) (-1));
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file24;
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory15.buffersPerRegion;
        undertowEmbeddedServletContainerFactory15.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory31.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory31.getMimeMappings();
        int int36 = undertowEmbeddedServletContainerFactory31.getPort();
        java.lang.ClassLoader classLoader37 = undertowEmbeddedServletContainerFactory31.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList38 = undertowEmbeddedServletContainerFactory31.builderCustomizers;
        undertowEmbeddedServletContainerFactory15.builderCustomizers = undertowBuilderCustomizerList38;
        undertowEmbeddedServletContainerFactory2.builderCustomizers = undertowBuilderCustomizerList38;
        undertowEmbeddedServletContainerFactory2.useForwardHeaders = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8080 + "'", int36 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList38);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.resource.Resource resource8 = jarResourceManager0.getResource("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no !/ in spec");
        } catch (java.net.MalformedURLException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getContextPath();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo10);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        int int8 = undertowEmbeddedServletContainerFactory0.getPort();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader16 = undertowEmbeddedServletContainerFactory12.resourceLoader;
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) 1);
        boolean boolean19 = undertowEmbeddedServletContainerFactory12.useForwardHeaders;
        java.lang.Integer int20 = undertowEmbeddedServletContainerFactory12.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        undertowEmbeddedServletContainerFactory21.setSessionTimeout(1);
        boolean boolean26 = undertowEmbeddedServletContainerFactory21.accessLogEnabled;
        undertowEmbeddedServletContainerFactory21.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        undertowEmbeddedServletContainerFactory29.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList36 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        undertowEmbeddedServletContainerFactory21.builderCustomizers = undertowBuilderCustomizerList36;
        undertowEmbeddedServletContainerFactory12.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList36);
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8080 + "'", int8 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList36);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getContextPath();
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (byte) -1, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory10.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        undertowEmbeddedServletContainerFactory15.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        io.undertow.Undertow.Builder builder22 = undertowEmbeddedServletContainerFactory19.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager23 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer25 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder22, deploymentManager23, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager26 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer28 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder22, deploymentManager26, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureSsl(ssl8, 1800, builder22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer28);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory12.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory12.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader18 = null;
        undertowEmbeddedServletContainerFactory12.setResourceLoader(resourceLoader18);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection20 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers(undertowBuilderCustomizerCollection20);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory2.setDocumentRoot(file22);
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        java.io.File file28 = undertowEmbeddedServletContainerFactory26.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings29 = undertowEmbeddedServletContainerFactory26.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader30 = undertowEmbeddedServletContainerFactory26.resourceLoader;
        undertowEmbeddedServletContainerFactory26.setBufferSize((java.lang.Integer) 1);
        boolean boolean33 = undertowEmbeddedServletContainerFactory26.useForwardHeaders;
        java.lang.ClassLoader classLoader34 = undertowEmbeddedServletContainerFactory26.getServletClassLoader();
        java.lang.Boolean boolean35 = undertowEmbeddedServletContainerFactory26.directBuffers;
        undertowEmbeddedServletContainerFactory26.setRegisterJspServlet(false);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory26.setSessionStoreDir(file38);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        undertowEmbeddedServletContainerFactory40.setPersistSession(false);
        undertowEmbeddedServletContainerFactory40.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory40.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory48 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean49 = undertowEmbeddedServletContainerFactory48.isPersistSession();
        java.io.File file50 = undertowEmbeddedServletContainerFactory48.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray51 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory48.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray51);
        undertowEmbeddedServletContainerFactory40.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray51);
        undertowEmbeddedServletContainerFactory26.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray51);
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray51);
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory2.setDocumentRoot(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray51);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory2.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        undertowEmbeddedServletContainerFactory10.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression17 = null;
        undertowEmbeddedServletContainerFactory10.setCompression(compression17);
        java.io.File file19 = undertowEmbeddedServletContainerFactory10.getSessionStoreDir();
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory10.resourceLoader = resourceLoader20;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList22 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList22);
        undertowEmbeddedServletContainerFactory2.setWorkerThreads((java.lang.Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList22);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.Ssl ssl5 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl5);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 100;
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory0.ioThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean2 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file3 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader5 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer10 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer10 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray11);
        initializer0.initializers = servletContextInitializerArray11;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer0.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = initializer0.initializers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet37 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        java.lang.Boolean boolean40 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean40);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        int int15 = undertowEmbeddedServletContainerFactory10.getPort();
        java.lang.ClassLoader classLoader16 = undertowEmbeddedServletContainerFactory10.getServletClassLoader();
        int int17 = undertowEmbeddedServletContainerFactory10.getPort();
        boolean boolean18 = undertowEmbeddedServletContainerFactory10.isAccessLogEnabled();
        java.net.InetAddress inetAddress19 = undertowEmbeddedServletContainerFactory10.getAddress();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = undertowEmbeddedServletContainerFactory10.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.ioThreads = 1;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo26 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8080 + "'", int15 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8080 + "'", int17 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList20);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 1;
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory2.workerThreads;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "hi!";
        jarResourceManager0.close();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.bufferSize = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.bufferSize;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8.equals(1));
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(false);
        boolean boolean14 = undertowEmbeddedServletContainerFactory2.accessLogEnabled;
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory2.setSessionStoreDir(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray6 = undertowEmbeddedServletContainerFactory1.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.Ssl ssl5 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl5);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file7);
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray9 = undertowEmbeddedServletContainerFactory0.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory9.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet14 = undertowEmbeddedServletContainerFactory9.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory23.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory23.accessLogDirectory = file26;
        boolean boolean28 = undertowEmbeddedServletContainerFactory23.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        boolean boolean32 = undertowEmbeddedServletContainerFactory29.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray33 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList34 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList34, undertowDeploymentInfoCustomizerArray33);
        undertowEmbeddedServletContainerFactory29.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList34;
        undertowEmbeddedServletContainerFactory23.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList34;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray38 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList39, undertowBuilderCustomizerArray38);
        undertowEmbeddedServletContainerFactory23.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList39);
        undertowEmbeddedServletContainerFactory16.builderCustomizers = undertowBuilderCustomizerList39;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList39;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        java.io.File file46 = undertowEmbeddedServletContainerFactory44.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings47 = undertowEmbeddedServletContainerFactory44.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader48 = undertowEmbeddedServletContainerFactory44.resourceLoader;
        undertowEmbeddedServletContainerFactory44.setBufferSize((java.lang.Integer) 1);
        boolean boolean51 = undertowEmbeddedServletContainerFactory44.useForwardHeaders;
        java.lang.Integer int52 = undertowEmbeddedServletContainerFactory44.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray53 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList54 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList54, undertowBuilderCustomizerArray53);
        undertowEmbeddedServletContainerFactory44.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList54);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean58 = undertowEmbeddedServletContainerFactory57.isPersistSession();
        java.io.File file59 = undertowEmbeddedServletContainerFactory57.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray60 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory57.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray60);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory62 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean63 = undertowEmbeddedServletContainerFactory62.isPersistSession();
        java.io.File file64 = undertowEmbeddedServletContainerFactory62.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings65 = undertowEmbeddedServletContainerFactory62.getMimeMappings();
        undertowEmbeddedServletContainerFactory57.setMimeMappings(mimeMappings65);
        org.springframework.boot.context.embedded.Compression compression67 = undertowEmbeddedServletContainerFactory57.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory70.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory70.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings75 = undertowEmbeddedServletContainerFactory70.getMimeMappings();
        undertowEmbeddedServletContainerFactory57.setMimeMappings(mimeMappings75);
        undertowEmbeddedServletContainerFactory44.setMimeMappings(mimeMappings75);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings75);
        boolean boolean79 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        int int8 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 8080);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8080 + "'", int8 == 8080);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 1800);
        io.undertow.Undertow.Builder builder9 = undertowEmbeddedServletContainerFactory1.createBuilder((int) 'a');
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 8080;
        java.io.File file12 = undertowEmbeddedServletContainerFactory1.getDocumentRoot();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory7.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray23 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder13, deploymentManager14, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer19 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder13, deploymentManager17, (int) 'a');
        org.springframework.core.io.ResourceLoader resourceLoader20 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader20;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.lang.ClassLoader classLoader25 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader25);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.KeyManager[] keyManagerArray9 = undertowEmbeddedServletContainerFactory0.getKeyManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory10.resourceLoader;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList17 = undertowEmbeddedServletContainerFactory10.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory20.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory20.accessLogDirectory = file23;
        boolean boolean25 = undertowEmbeddedServletContainerFactory20.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray26 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray26);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray28 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory20.addErrorPages(errorPageArray28);
        undertowEmbeddedServletContainerFactory10.addErrorPages(errorPageArray28);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray28);
        undertowEmbeddedServletContainerFactory0.workerThreads = 8080;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray28);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        org.springframework.boot.context.embedded.ErrorPage errorPage13 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage14 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean2 = undertowEmbeddedServletContainerFactory1.isPersistSession();
        java.io.File file3 = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory1.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader5 = undertowEmbeddedServletContainerFactory1.resourceLoader;
        java.io.File file6 = null;
        undertowEmbeddedServletContainerFactory1.setSessionStoreDir(file6);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        undertowEmbeddedServletContainerFactory1.configureErrorPages(deploymentInfo8);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer10 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray11 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer10 };
        undertowEmbeddedServletContainerFactory1.addInitializers(servletContextInitializerArray11);
        initializer0.initializers = servletContextInitializerArray11;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer0.initializers = servletContextInitializerArray14;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo24);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer26 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer26 };
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray27);
        initializer16.initializers = servletContextInitializerArray27;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer16.initializers = servletContextInitializerArray30;
        initializer0.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        java.io.File file36 = undertowEmbeddedServletContainerFactory34.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory34.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader38 = undertowEmbeddedServletContainerFactory34.resourceLoader;
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setSessionStoreDir(file39);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory34.configureErrorPages(deploymentInfo41);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer43 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer43 };
        undertowEmbeddedServletContainerFactory34.addInitializers(servletContextInitializerArray44);
        initializer33.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer33.initializers = servletContextInitializerArray47;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory50 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean51 = undertowEmbeddedServletContainerFactory50.isPersistSession();
        java.io.File file52 = undertowEmbeddedServletContainerFactory50.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings53 = undertowEmbeddedServletContainerFactory50.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader54 = undertowEmbeddedServletContainerFactory50.resourceLoader;
        java.io.File file55 = null;
        undertowEmbeddedServletContainerFactory50.setSessionStoreDir(file55);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo57 = null;
        undertowEmbeddedServletContainerFactory50.configureErrorPages(deploymentInfo57);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer59 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer59 };
        undertowEmbeddedServletContainerFactory50.addInitializers(servletContextInitializerArray60);
        initializer49.initializers = servletContextInitializerArray60;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray63 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer49.initializers = servletContextInitializerArray63;
        initializer33.initializers = servletContextInitializerArray63;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray66 = initializer33.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray67 = initializer33.initializers;
        initializer0.initializers = servletContextInitializerArray67;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray69 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean71 = undertowEmbeddedServletContainerFactory70.isPersistSession();
        java.io.File file72 = undertowEmbeddedServletContainerFactory70.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings73 = undertowEmbeddedServletContainerFactory70.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader74 = undertowEmbeddedServletContainerFactory70.resourceLoader;
        java.io.File file75 = null;
        undertowEmbeddedServletContainerFactory70.setSessionStoreDir(file75);
        undertowEmbeddedServletContainerFactory70.setBufferSize((java.lang.Integer) (-1));
        java.io.File file79 = null;
        undertowEmbeddedServletContainerFactory70.accessLogDirectory = file79;
        java.lang.Integer int81 = undertowEmbeddedServletContainerFactory70.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray82 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory70.addInitializers(servletContextInitializerArray82);
        initializer0.initializers = servletContextInitializerArray82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray82);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory0.createBuilder(1800);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList8 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory11.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory11.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings16 = undertowEmbeddedServletContainerFactory11.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader17 = null;
        undertowEmbeddedServletContainerFactory11.setResourceLoader(resourceLoader17);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection19 = undertowEmbeddedServletContainerFactory11.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection19);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory0.ioThreads = (-1);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) -1);
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory12.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager20 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getUndertowEmbeddedServletContainer(builder19, deploymentManager20, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory12.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) (-1));
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory25.accessLogDirectory = file34;
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory25.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory25.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader44 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList47 = undertowEmbeddedServletContainerFactory40.builderCustomizers;
        undertowEmbeddedServletContainerFactory25.builderCustomizers = undertowBuilderCustomizerList47;
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList47;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection50);
        java.io.File file52 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "0.0.0.0" + "'", str9.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray9 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getContextPath();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo10 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        int int9 = undertowEmbeddedServletContainerFactory2.getSessionTimeout();
        boolean boolean10 = undertowEmbeddedServletContainerFactory2.accessLogEnabled;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings11 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1800 + "'", int9 == 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings11);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "0.0.0.0" + "'", str10.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) -1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file7);
        undertowEmbeddedServletContainerFactory0.bufferSize = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression11);
        java.lang.ClassLoader classLoader13 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress15);
        undertowEmbeddedServletContainerFactory0.setContextPath("");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet19 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet19);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(false);
        java.lang.String str15 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("hi!");
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet18 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ErrorPages must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "0.0.0.0" + "'", str15.equals("0.0.0.0"));
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        int int21 = undertowEmbeddedServletContainerFactory16.getPort();
        java.lang.ClassLoader classLoader22 = undertowEmbeddedServletContainerFactory16.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8080 + "'", int21 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        int int9 = undertowEmbeddedServletContainerFactory2.getPort();
        undertowEmbeddedServletContainerFactory2.setBufferSize((java.lang.Integer) (-1));
        // The following exception was thrown during execution in test generation
        try {
            javax.net.ssl.TrustManager[] trustManagerArray12 = undertowEmbeddedServletContainerFactory2.getTrustManagers();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: java.lang.NullPointerException");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory0.workerThreads;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        java.lang.Integer int19 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file20;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str10 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray11 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file14);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray11);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        undertowEmbeddedServletContainerFactory10.setPersistSession(true);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory10.bufferSize;
        undertowEmbeddedServletContainerFactory10.workerThreads = 0;
        undertowEmbeddedServletContainerFactory10.setContextPath("");
        java.net.InetAddress inetAddress22 = null;
        undertowEmbeddedServletContainerFactory10.setAddress(inetAddress22);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.io.File file26 = undertowEmbeddedServletContainerFactory24.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray27 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory24.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray27);
        undertowEmbeddedServletContainerFactory10.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray27);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray27);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        io.undertow.Undertow.Builder builder36 = undertowEmbeddedServletContainerFactory33.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory33.getMimeMappings();
        int int38 = undertowEmbeddedServletContainerFactory33.getPort();
        java.lang.ClassLoader classLoader39 = undertowEmbeddedServletContainerFactory33.getServletClassLoader();
        undertowEmbeddedServletContainerFactory33.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory33.setDisplayName("");
        java.lang.Boolean boolean44 = undertowEmbeddedServletContainerFactory33.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet45 = undertowEmbeddedServletContainerFactory33.getErrorPages();
        undertowEmbeddedServletContainerFactory33.useForwardHeaders = false;
        java.io.File file48 = undertowEmbeddedServletContainerFactory33.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory51.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory51.accessLogDirectory = file54;
        boolean boolean56 = undertowEmbeddedServletContainerFactory51.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean58 = undertowEmbeddedServletContainerFactory57.isPersistSession();
        java.io.File file59 = undertowEmbeddedServletContainerFactory57.accessLogDirectory;
        boolean boolean60 = undertowEmbeddedServletContainerFactory57.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray61 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList62 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList62, undertowDeploymentInfoCustomizerArray61);
        undertowEmbeddedServletContainerFactory57.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        undertowEmbeddedServletContainerFactory51.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        undertowEmbeddedServletContainerFactory33.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8080 + "'", int38 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        java.io.File file1 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList2 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList2);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        int int6 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo9 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1800 + "'", int6 == 1800);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet37 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        io.undertow.Undertow.Builder builder41 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (byte) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.net.InetAddress inetAddress12 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress12);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        java.lang.String str16 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "0.0.0.0" + "'", str16.equals("0.0.0.0"));
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.accessLogEnabled = false;
        boolean boolean10 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        java.io.File file11 = undertowEmbeddedServletContainerFactory6.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory6.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder28, deploymentManager35, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress41 = undertowEmbeddedServletContainerFactory40.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        java.io.File file44 = undertowEmbeddedServletContainerFactory42.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader46 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet47 = undertowEmbeddedServletContainerFactory42.getErrorPages();
        undertowEmbeddedServletContainerFactory40.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory13.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory6.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet47);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        io.undertow.Undertow.Builder builder53 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean55 = undertowEmbeddedServletContainerFactory54.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet56 = undertowEmbeddedServletContainerFactory54.getJspServlet();
        boolean boolean57 = undertowEmbeddedServletContainerFactory54.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection58 = undertowEmbeddedServletContainerFactory54.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean61 = undertowEmbeddedServletContainerFactory60.isPersistSession();
        java.io.File file62 = undertowEmbeddedServletContainerFactory60.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings63 = undertowEmbeddedServletContainerFactory60.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader64 = undertowEmbeddedServletContainerFactory60.resourceLoader;
        java.io.File file65 = null;
        undertowEmbeddedServletContainerFactory60.setSessionStoreDir(file65);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo67 = null;
        undertowEmbeddedServletContainerFactory60.configureErrorPages(deploymentInfo67);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer69 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray70 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer69 };
        undertowEmbeddedServletContainerFactory60.addInitializers(servletContextInitializerArray70);
        initializer59.initializers = servletContextInitializerArray70;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray73 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer59.initializers = servletContextInitializerArray73;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer75 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean77 = undertowEmbeddedServletContainerFactory76.isPersistSession();
        java.io.File file78 = undertowEmbeddedServletContainerFactory76.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings79 = undertowEmbeddedServletContainerFactory76.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader80 = undertowEmbeddedServletContainerFactory76.resourceLoader;
        java.io.File file81 = null;
        undertowEmbeddedServletContainerFactory76.setSessionStoreDir(file81);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo83 = null;
        undertowEmbeddedServletContainerFactory76.configureErrorPages(deploymentInfo83);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer85 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray86 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer85 };
        undertowEmbeddedServletContainerFactory76.addInitializers(servletContextInitializerArray86);
        initializer75.initializers = servletContextInitializerArray86;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray89 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer75.initializers = servletContextInitializerArray89;
        initializer59.initializers = servletContextInitializerArray89;
        io.undertow.servlet.api.DeploymentManager deploymentManager92 = undertowEmbeddedServletContainerFactory54.createDeploymentManager(servletContextInitializerArray89);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer94 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder53, deploymentManager92, 0);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 0);
        boolean boolean99 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "";
        jarResourceManager0.jarPath = "0.0.0.0";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        boolean boolean6 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        org.springframework.boot.context.embedded.Compression compression9 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression9);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        undertowEmbeddedServletContainerFactory5.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet11 = undertowEmbeddedServletContainerFactory5.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet11);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 100);
        io.undertow.server.handlers.resource.ResourceManager resourceManager15 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager15);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        java.lang.String str12 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) (-1));
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        undertowEmbeddedServletContainerFactory11.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory15.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        io.undertow.Undertow.Builder builder21 = undertowEmbeddedServletContainerFactory18.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        undertowEmbeddedServletContainerFactory15.setMimeMappings(mimeMappings22);
        undertowEmbeddedServletContainerFactory11.setMimeMappings(mimeMappings22);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.setJspServletClassName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory7.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray23 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        java.lang.Integer int30 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.Compression compression31 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file32);
        boolean boolean34 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo35 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = (-1);
        org.springframework.boot.context.embedded.Ssl ssl21 = undertowEmbeddedServletContainerFactory0.getSsl();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl21);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader8);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(false);
        java.net.InetAddress inetAddress13 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress13);
        undertowEmbeddedServletContainerFactory2.setRegisterDefaultServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str9 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList15 = undertowEmbeddedServletContainerFactory12.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager20 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer22 = undertowEmbeddedServletContainerFactory12.getUndertowEmbeddedServletContainer(builder19, deploymentManager20, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory12.setSessionTimeout(100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file30);
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) (-1));
        java.io.File file34 = null;
        undertowEmbeddedServletContainerFactory25.accessLogDirectory = file34;
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory25.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray37);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory25.workerThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader44 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList47 = undertowEmbeddedServletContainerFactory40.builderCustomizers;
        undertowEmbeddedServletContainerFactory25.builderCustomizers = undertowBuilderCustomizerList47;
        undertowEmbeddedServletContainerFactory12.builderCustomizers = undertowBuilderCustomizerList47;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection50 = undertowEmbeddedServletContainerFactory12.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection50);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.boot.context.embedded.ErrorPage errorPage53 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage54 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "0.0.0.0" + "'", str9.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray11 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file14);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory0.getContextPath();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory18.resourceLoader;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file23);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo25);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer27 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer27 };
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray28);
        initializer17.initializers = servletContextInitializerArray28;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer17.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        java.io.File file36 = undertowEmbeddedServletContainerFactory34.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory34.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader38 = undertowEmbeddedServletContainerFactory34.resourceLoader;
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setSessionStoreDir(file39);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory34.configureErrorPages(deploymentInfo41);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer43 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer43 };
        undertowEmbeddedServletContainerFactory34.addInitializers(servletContextInitializerArray44);
        initializer33.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer33.initializers = servletContextInitializerArray47;
        initializer17.initializers = servletContextInitializerArray47;
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray47);
        org.springframework.boot.context.embedded.Ssl ssl51 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode52 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "" + "'", str16.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        java.io.File file6 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory4.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet9 = undertowEmbeddedServletContainerFactory4.getErrorPages();
        undertowEmbeddedServletContainerFactory2.setErrorPages(errorPageSet9);
        java.net.InetAddress inetAddress11 = undertowEmbeddedServletContainerFactory2.getAddress();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory2.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        undertowEmbeddedServletContainerFactory9.setSessionTimeout(1);
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.accessLogEnabled;
        undertowEmbeddedServletContainerFactory9.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        undertowEmbeddedServletContainerFactory17.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory17.builderCustomizers;
        undertowEmbeddedServletContainerFactory9.builderCustomizers = undertowBuilderCustomizerList24;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24);
        java.lang.Integer int27 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int27);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.accessLogEnabled = false;
        boolean boolean10 = undertowEmbeddedServletContainerFactory6.isRegisterDefaultServlet();
        java.io.File file11 = undertowEmbeddedServletContainerFactory6.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager12 = undertowEmbeddedServletContainerFactory6.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer37 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder28, deploymentManager35, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress41 = undertowEmbeddedServletContainerFactory40.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        java.io.File file44 = undertowEmbeddedServletContainerFactory42.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader46 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet47 = undertowEmbeddedServletContainerFactory42.getErrorPages();
        undertowEmbeddedServletContainerFactory40.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory13.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory6.setErrorPages(errorPageSet47);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet47);
        boolean boolean52 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory10.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray13);
        org.springframework.boot.context.embedded.Ssl ssl15 = undertowEmbeddedServletContainerFactory10.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        undertowEmbeddedServletContainerFactory16.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory20.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager24 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer26 = undertowEmbeddedServletContainerFactory16.getUndertowEmbeddedServletContainer(builder23, deploymentManager24, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder23, deploymentManager27, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        undertowEmbeddedServletContainerFactory30.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        io.undertow.Undertow.Builder builder37 = undertowEmbeddedServletContainerFactory34.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer40 = undertowEmbeddedServletContainerFactory30.getUndertowEmbeddedServletContainer(builder37, deploymentManager38, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory41.builderCustomizers;
        undertowEmbeddedServletContainerFactory41.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray47 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray47);
        undertowEmbeddedServletContainerFactory41.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression51 = undertowEmbeddedServletContainerFactory41.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory54.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory54.accessLogDirectory = file57;
        boolean boolean59 = undertowEmbeddedServletContainerFactory54.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory54.addInitializers(servletContextInitializerArray60);
        io.undertow.servlet.api.DeploymentManager deploymentManager62 = undertowEmbeddedServletContainerFactory41.createDeploymentManager(servletContextInitializerArray60);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer64 = undertowEmbeddedServletContainerFactory10.getUndertowEmbeddedServletContainer(builder37, deploymentManager62, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory65 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean66 = undertowEmbeddedServletContainerFactory65.isPersistSession();
        java.io.File file67 = undertowEmbeddedServletContainerFactory65.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings68 = undertowEmbeddedServletContainerFactory65.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader69 = undertowEmbeddedServletContainerFactory65.resourceLoader;
        java.io.File file70 = null;
        undertowEmbeddedServletContainerFactory65.setSessionStoreDir(file70);
        undertowEmbeddedServletContainerFactory65.setBufferSize((java.lang.Integer) (-1));
        java.io.File file74 = null;
        undertowEmbeddedServletContainerFactory65.accessLogDirectory = file74;
        java.lang.Integer int76 = undertowEmbeddedServletContainerFactory65.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray77 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory65.addInitializers(servletContextInitializerArray77);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer79 = undertowEmbeddedServletContainerFactory10.getEmbeddedServletContainer(servletContextInitializerArray77);
        io.undertow.servlet.api.DeploymentManager deploymentManager80 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray77);
        org.springframework.boot.context.embedded.Compression compression81 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression81);
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager80);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory4.getPort();
        java.lang.ClassLoader classLoader10 = undertowEmbeddedServletContainerFactory4.getServletClassLoader();
        undertowEmbeddedServletContainerFactory4.useForwardHeaders = false;
        java.io.File file13 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings14);
        java.lang.String str16 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        java.lang.ClassLoader classLoader17 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8080 + "'", int9 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "0.0.0.0" + "'", str16.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader17);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory4.getPort();
        java.lang.ClassLoader classLoader10 = undertowEmbeddedServletContainerFactory4.getServletClassLoader();
        undertowEmbeddedServletContainerFactory4.useForwardHeaders = false;
        java.io.File file13 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings14);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file16);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8080 + "'", int9 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file9);
        java.io.File file11 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory0.bufferSize = (-1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 10;
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection12 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection12);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str4 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0.0.0.0" + "'", str4.equals("0.0.0.0"));
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory2.resourceLoader = resourceLoader9;
        org.springframework.boot.context.embedded.Ssl ssl11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode12 = undertowEmbeddedServletContainerFactory2.getSslClientAuthMode(ssl11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression11);
        java.lang.ClassLoader classLoader13 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        io.undertow.server.handlers.resource.ResourceManager resourceManager14 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress15);
        undertowEmbeddedServletContainerFactory0.setContextPath("");
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager14);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        java.lang.String str2 = jarResourceManager0.jarPath;
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        io.undertow.server.handlers.resource.ResourceChangeListener resourceChangeListener5 = null;
        // The following exception was thrown during execution in test generation
        try {
            jarResourceManager0.removeResourceChangeListener(resourceChangeListener5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: UT000073: Resource change listeners are not supported");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader11);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory0.createWorker();
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "0.0.0.0";
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression13);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet5 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings12 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory9.resourceLoader;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory9.setSessionStoreDir(file14);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo16 = null;
        undertowEmbeddedServletContainerFactory9.configureErrorPages(deploymentInfo16);
        undertowEmbeddedServletContainerFactory9.setRegisterDefaultServlet(false);
        java.io.File file20 = undertowEmbeddedServletContainerFactory9.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory21.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader25 = undertowEmbeddedServletContainerFactory21.resourceLoader;
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory21.setSessionStoreDir(file26);
        undertowEmbeddedServletContainerFactory21.setBufferSize((java.lang.Integer) (-1));
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory21.accessLogDirectory = file30;
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory21.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory21.addInitializers(servletContextInitializerArray33);
        io.undertow.servlet.api.DeploymentManager deploymentManager35 = undertowEmbeddedServletContainerFactory9.createDeploymentManager(servletContextInitializerArray33);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo8, servletContextInitializerArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager35);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file11);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        undertowEmbeddedServletContainerFactory15.setPersistSession(false);
        java.io.File file19 = null;
        undertowEmbeddedServletContainerFactory15.setSessionStoreDir(file19);
        boolean boolean21 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        undertowEmbeddedServletContainerFactory15.directBuffers = false;
        boolean boolean24 = undertowEmbeddedServletContainerFactory15.isAccessLogEnabled();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet25 = undertowEmbeddedServletContainerFactory15.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet25);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet9 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1800);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        java.io.File file3 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader11);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList13 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList13);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress28 = undertowEmbeddedServletContainerFactory27.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory29.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader33 = undertowEmbeddedServletContainerFactory29.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet34 = undertowEmbeddedServletContainerFactory29.getErrorPages();
        undertowEmbeddedServletContainerFactory27.setErrorPages(errorPageSet34);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet34);
        java.io.File file37 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file37);
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file39);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        org.springframework.boot.context.embedded.Ssl ssl43 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl43);
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet34);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) -1);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression10 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression10);
        java.lang.Boolean boolean12 = undertowEmbeddedServletContainerFactory0.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory13.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        int int18 = undertowEmbeddedServletContainerFactory13.getPort();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        undertowEmbeddedServletContainerFactory13.setPort((int) (short) 1);
        io.undertow.Undertow.Builder builder23 = undertowEmbeddedServletContainerFactory13.createBuilder((-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory13.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8080 + "'", int18 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        boolean boolean9 = undertowEmbeddedServletContainerFactory6.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray10 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList11 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList11, undertowDeploymentInfoCustomizerArray10);
        undertowEmbeddedServletContainerFactory6.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList11;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList11;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory12.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer17 };
        undertowEmbeddedServletContainerFactory12.addBuilderCustomizers(undertowBuilderCustomizerArray18);
        undertowEmbeddedServletContainerFactory2.addBuilderCustomizers(undertowBuilderCustomizerArray18);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList21 = undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers;
        java.lang.String str22 = undertowEmbeddedServletContainerFactory2.getDisplayName();
        boolean boolean23 = undertowEmbeddedServletContainerFactory2.isAccessLogEnabled();
        java.io.File file24 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file16 = null;
        undertowEmbeddedServletContainerFactory13.accessLogDirectory = file16;
        boolean boolean18 = undertowEmbeddedServletContainerFactory13.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory13.addInitializers(servletContextInitializerArray19);
        io.undertow.servlet.api.DeploymentManager deploymentManager21 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray19);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file22);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        undertowEmbeddedServletContainerFactory24.accessLogEnabled = false;
        boolean boolean28 = undertowEmbeddedServletContainerFactory24.isRegisterDefaultServlet();
        java.io.File file29 = undertowEmbeddedServletContainerFactory24.getDocumentRoot();
        io.undertow.server.handlers.resource.ResourceManager resourceManager30 = undertowEmbeddedServletContainerFactory24.getDocumentRootResourceManager();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        java.io.File file35 = undertowEmbeddedServletContainerFactory33.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray36 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory33.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray36);
        org.springframework.boot.context.embedded.Ssl ssl38 = undertowEmbeddedServletContainerFactory33.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        undertowEmbeddedServletContainerFactory39.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean44 = undertowEmbeddedServletContainerFactory43.isPersistSession();
        io.undertow.Undertow.Builder builder46 = undertowEmbeddedServletContainerFactory43.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager47 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer49 = undertowEmbeddedServletContainerFactory39.getUndertowEmbeddedServletContainer(builder46, deploymentManager47, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager50 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer52 = undertowEmbeddedServletContainerFactory33.getUndertowEmbeddedServletContainer(builder46, deploymentManager50, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager53 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer55 = undertowEmbeddedServletContainerFactory31.getUndertowEmbeddedServletContainer(builder46, deploymentManager53, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress59 = undertowEmbeddedServletContainerFactory58.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean61 = undertowEmbeddedServletContainerFactory60.isPersistSession();
        java.io.File file62 = undertowEmbeddedServletContainerFactory60.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings63 = undertowEmbeddedServletContainerFactory60.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader64 = undertowEmbeddedServletContainerFactory60.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet65 = undertowEmbeddedServletContainerFactory60.getErrorPages();
        undertowEmbeddedServletContainerFactory58.setErrorPages(errorPageSet65);
        undertowEmbeddedServletContainerFactory31.setErrorPages(errorPageSet65);
        undertowEmbeddedServletContainerFactory24.setErrorPages(errorPageSet65);
        java.io.File file69 = undertowEmbeddedServletContainerFactory24.getDocumentRoot();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory72 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory72.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file75 = null;
        undertowEmbeddedServletContainerFactory72.accessLogDirectory = file75;
        boolean boolean77 = undertowEmbeddedServletContainerFactory72.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray78 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory72.addInitializers(servletContextInitializerArray78);
        undertowEmbeddedServletContainerFactory72.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory82 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean83 = undertowEmbeddedServletContainerFactory82.isPersistSession();
        java.io.File file84 = undertowEmbeddedServletContainerFactory82.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings85 = undertowEmbeddedServletContainerFactory82.getMimeMappings();
        java.lang.Integer int86 = undertowEmbeddedServletContainerFactory82.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer87 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray88 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer87 };
        undertowEmbeddedServletContainerFactory82.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory72.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory24.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray88);
        undertowEmbeddedServletContainerFactory0.workerThreads = 100;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray88);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection7 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection7);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory15.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory15.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer34 = undertowEmbeddedServletContainerFactory15.getUndertowEmbeddedServletContainer(builder28, deploymentManager32, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean36 = undertowEmbeddedServletContainerFactory35.isPersistSession();
        java.io.File file37 = undertowEmbeddedServletContainerFactory35.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray38 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory35.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray38);
        org.springframework.boot.context.embedded.Ssl ssl40 = undertowEmbeddedServletContainerFactory35.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        undertowEmbeddedServletContainerFactory41.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        io.undertow.Undertow.Builder builder48 = undertowEmbeddedServletContainerFactory45.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager49 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer51 = undertowEmbeddedServletContainerFactory41.getUndertowEmbeddedServletContainer(builder48, deploymentManager49, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer54 = undertowEmbeddedServletContainerFactory35.getUndertowEmbeddedServletContainer(builder48, deploymentManager52, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean56 = undertowEmbeddedServletContainerFactory55.isPersistSession();
        undertowEmbeddedServletContainerFactory55.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean60 = undertowEmbeddedServletContainerFactory59.isPersistSession();
        io.undertow.Undertow.Builder builder62 = undertowEmbeddedServletContainerFactory59.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager63 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer65 = undertowEmbeddedServletContainerFactory55.getUndertowEmbeddedServletContainer(builder62, deploymentManager63, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean67 = undertowEmbeddedServletContainerFactory66.isPersistSession();
        java.io.File file68 = undertowEmbeddedServletContainerFactory66.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList69 = undertowEmbeddedServletContainerFactory66.builderCustomizers;
        undertowEmbeddedServletContainerFactory66.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray72 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory66.addErrorPages(errorPageArray72);
        undertowEmbeddedServletContainerFactory66.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression76 = undertowEmbeddedServletContainerFactory66.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory79 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory79.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file82 = null;
        undertowEmbeddedServletContainerFactory79.accessLogDirectory = file82;
        boolean boolean84 = undertowEmbeddedServletContainerFactory79.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray85 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory79.addInitializers(servletContextInitializerArray85);
        io.undertow.servlet.api.DeploymentManager deploymentManager87 = undertowEmbeddedServletContainerFactory66.createDeploymentManager(servletContextInitializerArray85);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer89 = undertowEmbeddedServletContainerFactory35.getUndertowEmbeddedServletContainer(builder62, deploymentManager87, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer91 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder28, deploymentManager87, (int) '#');
        java.io.File file92 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        java.lang.Integer int93 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.lang.Boolean boolean94 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean94);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        boolean boolean40 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory41.builderCustomizers;
        undertowEmbeddedServletContainerFactory41.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray47 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory41.addErrorPages(errorPageArray47);
        undertowEmbeddedServletContainerFactory41.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory41.setDirectBuffers((java.lang.Boolean) true);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory41.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer54 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean56 = undertowEmbeddedServletContainerFactory55.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet57 = undertowEmbeddedServletContainerFactory55.getJspServlet();
        boolean boolean58 = undertowEmbeddedServletContainerFactory55.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection59 = undertowEmbeddedServletContainerFactory55.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean62 = undertowEmbeddedServletContainerFactory61.isPersistSession();
        java.io.File file63 = undertowEmbeddedServletContainerFactory61.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings64 = undertowEmbeddedServletContainerFactory61.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader65 = undertowEmbeddedServletContainerFactory61.resourceLoader;
        java.io.File file66 = null;
        undertowEmbeddedServletContainerFactory61.setSessionStoreDir(file66);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo68 = null;
        undertowEmbeddedServletContainerFactory61.configureErrorPages(deploymentInfo68);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer70 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray71 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer70 };
        undertowEmbeddedServletContainerFactory61.addInitializers(servletContextInitializerArray71);
        initializer60.initializers = servletContextInitializerArray71;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray74 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer60.initializers = servletContextInitializerArray74;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer76 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean78 = undertowEmbeddedServletContainerFactory77.isPersistSession();
        java.io.File file79 = undertowEmbeddedServletContainerFactory77.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings80 = undertowEmbeddedServletContainerFactory77.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader81 = undertowEmbeddedServletContainerFactory77.resourceLoader;
        java.io.File file82 = null;
        undertowEmbeddedServletContainerFactory77.setSessionStoreDir(file82);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo84 = null;
        undertowEmbeddedServletContainerFactory77.configureErrorPages(deploymentInfo84);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer86 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray87 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer86 };
        undertowEmbeddedServletContainerFactory77.addInitializers(servletContextInitializerArray87);
        initializer76.initializers = servletContextInitializerArray87;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray90 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer76.initializers = servletContextInitializerArray90;
        initializer60.initializers = servletContextInitializerArray90;
        io.undertow.servlet.api.DeploymentManager deploymentManager93 = undertowEmbeddedServletContainerFactory55.createDeploymentManager(servletContextInitializerArray90);
        initializer54.initializers = servletContextInitializerArray90;
        io.undertow.servlet.api.DeploymentManager deploymentManager95 = undertowEmbeddedServletContainerFactory41.createDeploymentManager(servletContextInitializerArray90);
        io.undertow.servlet.api.DeploymentManager deploymentManager96 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray90);
        java.io.File file97 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager96);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.lang.String str3 = undertowEmbeddedServletContainerFactory2.accessLogPattern;
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList8 = undertowEmbeddedServletContainerFactory5.builderCustomizers;
        undertowEmbeddedServletContainerFactory5.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray11 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory5.addErrorPages(errorPageArray11);
        undertowEmbeddedServletContainerFactory5.setIoThreads((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory5.setDirectBuffers((java.lang.Boolean) true);
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory5.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet21 = undertowEmbeddedServletContainerFactory19.getJspServlet();
        boolean boolean22 = undertowEmbeddedServletContainerFactory19.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection23 = undertowEmbeddedServletContainerFactory19.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file30);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory25.configureErrorPages(deploymentInfo32);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer34 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer34 };
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer24.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings44 = undertowEmbeddedServletContainerFactory41.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader45 = undertowEmbeddedServletContainerFactory41.resourceLoader;
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory41.setSessionStoreDir(file46);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo48 = null;
        undertowEmbeddedServletContainerFactory41.configureErrorPages(deploymentInfo48);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer50 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer50 };
        undertowEmbeddedServletContainerFactory41.addInitializers(servletContextInitializerArray51);
        initializer40.initializers = servletContextInitializerArray51;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray54 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer40.initializers = servletContextInitializerArray54;
        initializer24.initializers = servletContextInitializerArray54;
        io.undertow.servlet.api.DeploymentManager deploymentManager57 = undertowEmbeddedServletContainerFactory19.createDeploymentManager(servletContextInitializerArray54);
        initializer18.initializers = servletContextInitializerArray54;
        io.undertow.servlet.api.DeploymentManager deploymentManager59 = undertowEmbeddedServletContainerFactory5.createDeploymentManager(servletContextInitializerArray54);
        io.undertow.servlet.api.DeploymentManager deploymentManager60 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager60);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet4);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        undertowEmbeddedServletContainerFactory9.setSessionTimeout(1);
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.accessLogEnabled;
        undertowEmbeddedServletContainerFactory9.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        undertowEmbeddedServletContainerFactory17.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory17.builderCustomizers;
        undertowEmbeddedServletContainerFactory9.builderCustomizers = undertowBuilderCustomizerList24;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24);
        boolean boolean27 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray4 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList5 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList5, undertowDeploymentInfoCustomizerArray4);
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList5;
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1800);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory11.getJspServlet();
        boolean boolean14 = undertowEmbeddedServletContainerFactory11.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection15 = undertowEmbeddedServletContainerFactory11.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory17.setSessionStoreDir(file22);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo24 = null;
        undertowEmbeddedServletContainerFactory17.configureErrorPages(deploymentInfo24);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer26 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray27 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer26 };
        undertowEmbeddedServletContainerFactory17.addInitializers(servletContextInitializerArray27);
        initializer16.initializers = servletContextInitializerArray27;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer16.initializers = servletContextInitializerArray30;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        java.io.File file35 = undertowEmbeddedServletContainerFactory33.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings36 = undertowEmbeddedServletContainerFactory33.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader37 = undertowEmbeddedServletContainerFactory33.resourceLoader;
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory33.setSessionStoreDir(file38);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo40 = null;
        undertowEmbeddedServletContainerFactory33.configureErrorPages(deploymentInfo40);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer42 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray43 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer42 };
        undertowEmbeddedServletContainerFactory33.addInitializers(servletContextInitializerArray43);
        initializer32.initializers = servletContextInitializerArray43;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray46 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer32.initializers = servletContextInitializerArray46;
        initializer16.initializers = servletContextInitializerArray46;
        io.undertow.servlet.api.DeploymentManager deploymentManager49 = undertowEmbeddedServletContainerFactory11.createDeploymentManager(servletContextInitializerArray46);
        initializer10.initializers = servletContextInitializerArray46;
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray46);
        org.springframework.boot.context.embedded.Ssl ssl52 = undertowEmbeddedServletContainerFactory0.getSsl();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl52);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer15 = undertowEmbeddedServletContainerFactory5.getUndertowEmbeddedServletContainer(builder12, deploymentManager13, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder12, deploymentManager16, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings24 = undertowEmbeddedServletContainerFactory21.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader25 = undertowEmbeddedServletContainerFactory21.resourceLoader;
        undertowEmbeddedServletContainerFactory21.setBufferSize((java.lang.Integer) 1);
        boolean boolean28 = undertowEmbeddedServletContainerFactory21.useForwardHeaders;
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory21.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        java.io.File file32 = undertowEmbeddedServletContainerFactory30.accessLogDirectory;
        undertowEmbeddedServletContainerFactory30.setSessionTimeout(1);
        boolean boolean35 = undertowEmbeddedServletContainerFactory30.accessLogEnabled;
        undertowEmbeddedServletContainerFactory30.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean39 = undertowEmbeddedServletContainerFactory38.isPersistSession();
        java.io.File file40 = undertowEmbeddedServletContainerFactory38.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings41 = undertowEmbeddedServletContainerFactory38.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader42 = undertowEmbeddedServletContainerFactory38.resourceLoader;
        undertowEmbeddedServletContainerFactory38.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList45 = undertowEmbeddedServletContainerFactory38.builderCustomizers;
        undertowEmbeddedServletContainerFactory30.builderCustomizers = undertowBuilderCustomizerList45;
        undertowEmbeddedServletContainerFactory21.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList45);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList45;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList45);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet9 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1800);
        java.io.File file12 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory13.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        int int18 = undertowEmbeddedServletContainerFactory13.getPort();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        undertowEmbeddedServletContainerFactory13.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory13.setDisplayName("");
        java.lang.Boolean boolean24 = undertowEmbeddedServletContainerFactory13.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet25 = undertowEmbeddedServletContainerFactory13.getErrorPages();
        undertowEmbeddedServletContainerFactory13.setPort((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory30.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory30.accessLogDirectory = file33;
        boolean boolean35 = undertowEmbeddedServletContainerFactory30.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory30.addInitializers(servletContextInitializerArray36);
        undertowEmbeddedServletContainerFactory30.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        java.lang.Integer int44 = undertowEmbeddedServletContainerFactory40.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer45 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray46 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer45 };
        undertowEmbeddedServletContainerFactory40.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        undertowEmbeddedServletContainerFactory30.addBuilderCustomizers(undertowBuilderCustomizerArray46);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList49 = undertowEmbeddedServletContainerFactory30.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList49;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList49;
        io.undertow.Undertow.Builder builder53 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8080 + "'", int18 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray1 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray2 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray3 = initializer0.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray4 = initializer0.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean39 = undertowEmbeddedServletContainerFactory38.isPersistSession();
        java.io.File file40 = undertowEmbeddedServletContainerFactory38.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings41 = undertowEmbeddedServletContainerFactory38.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader42 = undertowEmbeddedServletContainerFactory38.resourceLoader;
        java.io.File file43 = null;
        undertowEmbeddedServletContainerFactory38.setSessionStoreDir(file43);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo45 = null;
        undertowEmbeddedServletContainerFactory38.configureErrorPages(deploymentInfo45);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer47 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray48 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer47 };
        undertowEmbeddedServletContainerFactory38.addInitializers(servletContextInitializerArray48);
        initializer5.initializers = servletContextInitializerArray48;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = initializer5.initializers;
        initializer0.initializers = servletContextInitializerArray51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.bufferSize = (-1);
        io.undertow.server.handlers.resource.ResourceManager resourceManager9 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager9);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory0.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory10.resourceLoader;
        undertowEmbeddedServletContainerFactory10.setBufferSize((java.lang.Integer) 1);
        boolean boolean17 = undertowEmbeddedServletContainerFactory10.useForwardHeaders;
        java.lang.Integer int18 = undertowEmbeddedServletContainerFactory10.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        undertowEmbeddedServletContainerFactory19.setSessionTimeout(1);
        boolean boolean24 = undertowEmbeddedServletContainerFactory19.accessLogEnabled;
        undertowEmbeddedServletContainerFactory19.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        java.io.File file29 = undertowEmbeddedServletContainerFactory27.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory27.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader31 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        undertowEmbeddedServletContainerFactory27.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList34 = undertowEmbeddedServletContainerFactory27.builderCustomizers;
        undertowEmbeddedServletContainerFactory19.builderCustomizers = undertowBuilderCustomizerList34;
        undertowEmbeddedServletContainerFactory10.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList34);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList34;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.Ssl ssl40 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl40);
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory0.createBuilder(1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((-1));
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Compression compression5 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory9.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory9.accessLogDirectory = file12;
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        boolean boolean18 = undertowEmbeddedServletContainerFactory15.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList20 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList20, undertowDeploymentInfoCustomizerArray19);
        undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        undertowEmbeddedServletContainerFactory9.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList20;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray24 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList25 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25, undertowBuilderCustomizerArray24);
        undertowEmbeddedServletContainerFactory9.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList25);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings28);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection30 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection30);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("0.0.0.0", 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory13.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory13.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings18);
        java.io.File file20 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file20);
        boolean boolean22 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings23 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory0.createBuilder(10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory2.setAccessLogDirectory(file11);
        org.xnio.XnioWorker xnioWorker13 = undertowEmbeddedServletContainerFactory2.createWorker();
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory2.setSsl(ssl14);
        org.xnio.XnioWorker xnioWorker16 = undertowEmbeddedServletContainerFactory2.createWorker();
        undertowEmbeddedServletContainerFactory2.bufferSize = 0;
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker16);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray11 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory8.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray11);
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader14);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory0.createBuilder(1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        undertowEmbeddedServletContainerFactory0.workerThreads = 1800;
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.workerThreads = 0;
        boolean boolean12 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet13 = undertowEmbeddedServletContainerFactory2.getJspServlet();
        java.lang.String str14 = undertowEmbeddedServletContainerFactory2.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "" + "'", str14.equals(""));
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress8);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory12.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file15;
        boolean boolean17 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory12.addInitializers(servletContextInitializerArray18);
        undertowEmbeddedServletContainerFactory12.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory24.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory24.accessLogDirectory = file27;
        boolean boolean29 = undertowEmbeddedServletContainerFactory24.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory24.addInitializers(servletContextInitializerArray30);
        io.undertow.servlet.api.DeploymentManager deploymentManager32 = undertowEmbeddedServletContainerFactory12.createDeploymentManager(servletContextInitializerArray30);
        io.undertow.servlet.api.DeploymentManager deploymentManager33 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray30);
        undertowEmbeddedServletContainerFactory0.accessLogPattern = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager33);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        io.undertow.Undertow.Builder builder19 = undertowEmbeddedServletContainerFactory16.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        int int21 = undertowEmbeddedServletContainerFactory16.getPort();
        java.lang.ClassLoader classLoader22 = undertowEmbeddedServletContainerFactory16.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (byte) 100);
        java.lang.Boolean boolean27 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8080 + "'", int21 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean27);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings15 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory12.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray18 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer17 };
        undertowEmbeddedServletContainerFactory12.addBuilderCustomizers(undertowBuilderCustomizerArray18);
        undertowEmbeddedServletContainerFactory2.addBuilderCustomizers(undertowBuilderCustomizerArray18);
        undertowEmbeddedServletContainerFactory2.setPort(10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        java.io.File file25 = undertowEmbeddedServletContainerFactory23.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray26 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory23.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        io.undertow.Undertow.Builder builder35 = undertowEmbeddedServletContainerFactory32.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager36 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer38 = undertowEmbeddedServletContainerFactory28.getUndertowEmbeddedServletContainer(builder35, deploymentManager36, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer41 = undertowEmbeddedServletContainerFactory23.getUndertowEmbeddedServletContainer(builder35, deploymentManager39, (int) (byte) -1);
        io.undertow.servlet.api.DeploymentManager deploymentManager42 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer44 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder35, deploymentManager42, 8080);
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer44);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        boolean boolean15 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray16);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray16);
        java.net.InetAddress inetAddress19 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        java.io.File file23 = undertowEmbeddedServletContainerFactory21.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory21.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager29 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer31 = undertowEmbeddedServletContainerFactory21.getUndertowEmbeddedServletContainer(builder28, deploymentManager29, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory21.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder35 = undertowEmbeddedServletContainerFactory21.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        java.io.File file38 = undertowEmbeddedServletContainerFactory36.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList39 = undertowEmbeddedServletContainerFactory36.builderCustomizers;
        undertowEmbeddedServletContainerFactory36.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray42 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory36.addErrorPages(errorPageArray42);
        undertowEmbeddedServletContainerFactory21.addErrorPages(errorPageArray42);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray42);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file46;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo48 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray42);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder13, deploymentManager14, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer19 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder13, deploymentManager17, (int) 'a');
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("hi!");
        java.lang.String str22 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "0.0.0.0" + "'", str22.equals("0.0.0.0"));
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory10.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file13 = null;
        undertowEmbeddedServletContainerFactory10.accessLogDirectory = file13;
        boolean boolean15 = undertowEmbeddedServletContainerFactory10.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory10.addInitializers(servletContextInitializerArray16);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray16);
        boolean boolean19 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        boolean boolean20 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet21 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        undertowEmbeddedServletContainerFactory25.setSessionTimeout(1);
        boolean boolean30 = undertowEmbeddedServletContainerFactory25.accessLogEnabled;
        undertowEmbeddedServletContainerFactory25.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        java.io.File file35 = undertowEmbeddedServletContainerFactory33.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings36 = undertowEmbeddedServletContainerFactory33.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader37 = undertowEmbeddedServletContainerFactory33.resourceLoader;
        undertowEmbeddedServletContainerFactory33.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList40 = undertowEmbeddedServletContainerFactory33.builderCustomizers;
        undertowEmbeddedServletContainerFactory25.builderCustomizers = undertowBuilderCustomizerList40;
        undertowEmbeddedServletContainerFactory24.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList40);
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList40);
        java.net.InetAddress inetAddress44 = undertowEmbeddedServletContainerFactory0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress44);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        java.io.File file9 = undertowEmbeddedServletContainerFactory7.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory7.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader11 = undertowEmbeddedServletContainerFactory7.resourceLoader;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory7.setSessionStoreDir(file12);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory7.configureErrorPages(deploymentInfo14);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer16 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer16 };
        undertowEmbeddedServletContainerFactory7.addInitializers(servletContextInitializerArray17);
        initializer6.initializers = servletContextInitializerArray17;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer6.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        java.io.File file25 = undertowEmbeddedServletContainerFactory23.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory23.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader27 = undertowEmbeddedServletContainerFactory23.resourceLoader;
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory23.setSessionStoreDir(file28);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory23.configureErrorPages(deploymentInfo30);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer32 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer32 };
        undertowEmbeddedServletContainerFactory23.addInitializers(servletContextInitializerArray33);
        initializer22.initializers = servletContextInitializerArray33;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer22.initializers = servletContextInitializerArray36;
        initializer6.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = initializer6.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = initializer6.initializers;
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray40);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory46.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory46.directBuffers = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean53 = undertowEmbeddedServletContainerFactory52.isPersistSession();
        java.io.File file54 = undertowEmbeddedServletContainerFactory52.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings55 = undertowEmbeddedServletContainerFactory52.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader56 = undertowEmbeddedServletContainerFactory52.resourceLoader;
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file57);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo59 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo59);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer61 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray62 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer61 };
        undertowEmbeddedServletContainerFactory52.addInitializers(servletContextInitializerArray62);
        initializer51.initializers = servletContextInitializerArray62;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer51.initializers = servletContextInitializerArray65;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer67 = undertowEmbeddedServletContainerFactory46.getEmbeddedServletContainer(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory2.setJspServletClassName("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer67);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory8.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory8.accessLogDirectory = file11;
        boolean boolean13 = undertowEmbeddedServletContainerFactory8.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray14 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory8.addInitializers(servletContextInitializerArray14);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray16 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory8.addErrorPages(errorPageArray16);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 10);
        boolean boolean22 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.lang.String str23 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "" + "'", str23.equals(""));
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.workerThreads = 0;
        undertowEmbeddedServletContainerFactory2.setContextPath("");
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress14);
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 0;
        org.springframework.core.io.ResourceLoader resourceLoader19 = null;
        undertowEmbeddedServletContainerFactory2.resourceLoader = resourceLoader19;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(false);
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress14);
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean6 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        java.io.File file7 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file7);
        java.lang.ClassLoader classLoader9 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.ioThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory7.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory7.accessLogDirectory = file10;
        boolean boolean12 = undertowEmbeddedServletContainerFactory7.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        boolean boolean16 = undertowEmbeddedServletContainerFactory13.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList18, undertowDeploymentInfoCustomizerArray17);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray22 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList23, undertowBuilderCustomizerArray22);
        undertowEmbeddedServletContainerFactory7.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList23);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory27.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean31 = undertowEmbeddedServletContainerFactory30.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet32 = undertowEmbeddedServletContainerFactory30.getJspServlet();
        undertowEmbeddedServletContainerFactory27.setJspServlet(jspServlet32);
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet32);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet32);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.useForwardHeaders = true;
        java.io.File file14 = undertowEmbeddedServletContainerFactory2.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression15 = undertowEmbeddedServletContainerFactory2.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression15);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.io.File file40 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        int int2 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) ' ');
        java.net.InetAddress inetAddress5 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1800 + "'", int2 == 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress5);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 0;
        org.springframework.boot.context.embedded.Ssl ssl13 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl13);
        org.springframework.core.io.ResourceLoader resourceLoader15 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory13.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray16);
        org.springframework.boot.context.embedded.Ssl ssl18 = undertowEmbeddedServletContainerFactory13.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        undertowEmbeddedServletContainerFactory19.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        io.undertow.Undertow.Builder builder26 = undertowEmbeddedServletContainerFactory23.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager27 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer29 = undertowEmbeddedServletContainerFactory19.getUndertowEmbeddedServletContainer(builder26, deploymentManager27, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer32 = undertowEmbeddedServletContainerFactory13.getUndertowEmbeddedServletContainer(builder26, deploymentManager30, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager33 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer35 = undertowEmbeddedServletContainerFactory11.getUndertowEmbeddedServletContainer(builder26, deploymentManager33, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory38 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress39 = undertowEmbeddedServletContainerFactory38.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader44 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet45 = undertowEmbeddedServletContainerFactory40.getErrorPages();
        undertowEmbeddedServletContainerFactory38.setErrorPages(errorPageSet45);
        undertowEmbeddedServletContainerFactory11.setErrorPages(errorPageSet45);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet45);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker10 = undertowEmbeddedServletContainerFactory0.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader11 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader11);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        io.undertow.Undertow.Builder builder16 = undertowEmbeddedServletContainerFactory13.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings17 = undertowEmbeddedServletContainerFactory13.getMimeMappings();
        int int18 = undertowEmbeddedServletContainerFactory13.getPort();
        java.lang.ClassLoader classLoader19 = undertowEmbeddedServletContainerFactory13.getServletClassLoader();
        undertowEmbeddedServletContainerFactory13.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory13.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        java.io.File file26 = undertowEmbeddedServletContainerFactory24.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings27 = undertowEmbeddedServletContainerFactory24.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader28 = undertowEmbeddedServletContainerFactory24.resourceLoader;
        undertowEmbeddedServletContainerFactory24.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList31 = undertowEmbeddedServletContainerFactory24.builderCustomizers;
        undertowEmbeddedServletContainerFactory13.builderCustomizers = undertowBuilderCustomizerList31;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList31);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        io.undertow.Undertow.Builder builder39 = undertowEmbeddedServletContainerFactory36.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings40 = undertowEmbeddedServletContainerFactory36.getMimeMappings();
        int int41 = undertowEmbeddedServletContainerFactory36.getPort();
        java.lang.ClassLoader classLoader42 = undertowEmbeddedServletContainerFactory36.getServletClassLoader();
        undertowEmbeddedServletContainerFactory36.useForwardHeaders = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        java.io.File file47 = undertowEmbeddedServletContainerFactory45.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings48 = undertowEmbeddedServletContainerFactory45.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader49 = undertowEmbeddedServletContainerFactory45.resourceLoader;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet50 = undertowEmbeddedServletContainerFactory45.getErrorPages();
        undertowEmbeddedServletContainerFactory36.setErrorPages(errorPageSet50);
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet50);
        java.lang.Integer int53 = undertowEmbeddedServletContainerFactory0.bufferSize;
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 8080 + "'", int18 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8080 + "'", int41 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 10 + "'", int53.equals(10));
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory2.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader8 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader8);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection10 = undertowEmbeddedServletContainerFactory2.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory2.setAccessLogEnabled(false);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.lang.Boolean boolean15 = undertowEmbeddedServletContainerFactory2.directBuffers;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15.equals(true));
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.xnio.XnioWorker xnioWorker4 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory2.resourceLoader = resourceLoader9;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.configureMimeMappings(deploymentInfo11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        boolean boolean4 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader5;
        org.springframework.core.io.ResourceLoader resourceLoader7 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader7;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        undertowEmbeddedServletContainerFactory2.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory14.accessLogDirectory = file17;
        boolean boolean19 = undertowEmbeddedServletContainerFactory14.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory14.addInitializers(servletContextInitializerArray20);
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = undertowEmbeddedServletContainerFactory2.createDeploymentManager(servletContextInitializerArray20);
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.core.io.ResourceLoader resourceLoader25 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader25);
        undertowEmbeddedServletContainerFactory2.accessLogEnabled = false;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager22);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 8080);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        int int12 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8080 + "'", int12 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "0.0.0.0" + "'", str13.equals("0.0.0.0"));
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 1800);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray15 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory12.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray15);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        undertowEmbeddedServletContainerFactory12.setMimeMappings(mimeMappings20);
        org.springframework.boot.context.embedded.Compression compression22 = undertowEmbeddedServletContainerFactory12.getCompression();
        undertowEmbeddedServletContainerFactory12.setBufferSize((java.lang.Integer) (-1));
        java.lang.String str25 = undertowEmbeddedServletContainerFactory12.accessLogPattern;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet26 = undertowEmbeddedServletContainerFactory12.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet26);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager14 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer16 = undertowEmbeddedServletContainerFactory6.getUndertowEmbeddedServletContainer(builder13, deploymentManager14, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager17 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer19 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder13, deploymentManager17, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        undertowEmbeddedServletContainerFactory20.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean25 = undertowEmbeddedServletContainerFactory24.isPersistSession();
        io.undertow.Undertow.Builder builder27 = undertowEmbeddedServletContainerFactory24.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager28 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer30 = undertowEmbeddedServletContainerFactory20.getUndertowEmbeddedServletContainer(builder27, deploymentManager28, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        java.io.File file33 = undertowEmbeddedServletContainerFactory31.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList34 = undertowEmbeddedServletContainerFactory31.builderCustomizers;
        undertowEmbeddedServletContainerFactory31.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray37 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory31.addErrorPages(errorPageArray37);
        undertowEmbeddedServletContainerFactory31.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression41 = undertowEmbeddedServletContainerFactory31.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory44.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file47 = null;
        undertowEmbeddedServletContainerFactory44.accessLogDirectory = file47;
        boolean boolean49 = undertowEmbeddedServletContainerFactory44.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray50 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory44.addInitializers(servletContextInitializerArray50);
        io.undertow.servlet.api.DeploymentManager deploymentManager52 = undertowEmbeddedServletContainerFactory31.createDeploymentManager(servletContextInitializerArray50);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer54 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder27, deploymentManager52, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean56 = undertowEmbeddedServletContainerFactory55.isPersistSession();
        java.io.File file57 = undertowEmbeddedServletContainerFactory55.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings58 = undertowEmbeddedServletContainerFactory55.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader59 = undertowEmbeddedServletContainerFactory55.resourceLoader;
        java.io.File file60 = null;
        undertowEmbeddedServletContainerFactory55.setSessionStoreDir(file60);
        undertowEmbeddedServletContainerFactory55.setBufferSize((java.lang.Integer) (-1));
        java.io.File file64 = null;
        undertowEmbeddedServletContainerFactory55.accessLogDirectory = file64;
        java.lang.Integer int66 = undertowEmbeddedServletContainerFactory55.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray67 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory55.addInitializers(servletContextInitializerArray67);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer69 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray67);
        java.lang.ClassLoader classLoader70 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        boolean boolean71 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray6 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray6);
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        java.io.File file13 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        org.springframework.core.io.ResourceLoader resourceLoader14 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) '4');
        java.io.File file17 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file17;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader23 = undertowEmbeddedServletContainerFactory19.resourceLoader;
        undertowEmbeddedServletContainerFactory19.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList26 = undertowEmbeddedServletContainerFactory19.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory29.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory29.accessLogDirectory = file32;
        boolean boolean34 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory29.addInitializers(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray37 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray37);
        undertowEmbeddedServletContainerFactory19.addErrorPages(errorPageArray37);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray37);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.workerThreads = 0;
        boolean boolean12 = undertowEmbeddedServletContainerFactory2.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        undertowEmbeddedServletContainerFactory15.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression22 = null;
        undertowEmbeddedServletContainerFactory15.setCompression(compression22);
        java.lang.Integer int24 = undertowEmbeddedServletContainerFactory15.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        io.undertow.Undertow.Builder builder28 = undertowEmbeddedServletContainerFactory25.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings29 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        boolean boolean30 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        undertowEmbeddedServletContainerFactory25.setIoThreads((java.lang.Integer) 8080);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet33 = undertowEmbeddedServletContainerFactory25.getErrorPages();
        undertowEmbeddedServletContainerFactory15.setErrorPages(errorPageSet33);
        undertowEmbeddedServletContainerFactory2.setErrorPages(errorPageSet33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet33);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer15 = undertowEmbeddedServletContainerFactory5.getUndertowEmbeddedServletContainer(builder12, deploymentManager13, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder12, deploymentManager16, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.ioThreads = 10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.net.InetAddress inetAddress12 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress12);
        org.springframework.boot.context.embedded.Ssl ssl14 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        org.springframework.boot.context.embedded.Ssl ssl21 = undertowEmbeddedServletContainerFactory16.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        io.undertow.Undertow.Builder builder29 = undertowEmbeddedServletContainerFactory26.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder29, deploymentManager30, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager33 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer35 = undertowEmbeddedServletContainerFactory16.getUndertowEmbeddedServletContainer(builder29, deploymentManager33, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory36 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean37 = undertowEmbeddedServletContainerFactory36.isPersistSession();
        undertowEmbeddedServletContainerFactory36.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory40.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager44 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer46 = undertowEmbeddedServletContainerFactory36.getUndertowEmbeddedServletContainer(builder43, deploymentManager44, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean48 = undertowEmbeddedServletContainerFactory47.isPersistSession();
        java.io.File file49 = undertowEmbeddedServletContainerFactory47.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList50 = undertowEmbeddedServletContainerFactory47.builderCustomizers;
        undertowEmbeddedServletContainerFactory47.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray53 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory47.addErrorPages(errorPageArray53);
        undertowEmbeddedServletContainerFactory47.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression57 = undertowEmbeddedServletContainerFactory47.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory60 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory60.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file63 = null;
        undertowEmbeddedServletContainerFactory60.accessLogDirectory = file63;
        boolean boolean65 = undertowEmbeddedServletContainerFactory60.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray66 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory60.addInitializers(servletContextInitializerArray66);
        io.undertow.servlet.api.DeploymentManager deploymentManager68 = undertowEmbeddedServletContainerFactory47.createDeploymentManager(servletContextInitializerArray66);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer70 = undertowEmbeddedServletContainerFactory16.getUndertowEmbeddedServletContainer(builder43, deploymentManager68, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory71 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean72 = undertowEmbeddedServletContainerFactory71.isPersistSession();
        java.io.File file73 = undertowEmbeddedServletContainerFactory71.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings74 = undertowEmbeddedServletContainerFactory71.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader75 = undertowEmbeddedServletContainerFactory71.resourceLoader;
        java.io.File file76 = null;
        undertowEmbeddedServletContainerFactory71.setSessionStoreDir(file76);
        undertowEmbeddedServletContainerFactory71.setBufferSize((java.lang.Integer) (-1));
        java.io.File file80 = null;
        undertowEmbeddedServletContainerFactory71.accessLogDirectory = file80;
        java.lang.Integer int82 = undertowEmbeddedServletContainerFactory71.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray83 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory71.addInitializers(servletContextInitializerArray83);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer85 = undertowEmbeddedServletContainerFactory16.getEmbeddedServletContainer(servletContextInitializerArray83);
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray83);
        boolean boolean87 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        io.undertow.server.handlers.resource.ResourceManager resourceManager88 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager88);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 100);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setWorkerThreads((java.lang.Integer) 1800);
        java.lang.String str10 = undertowEmbeddedServletContainerFactory0.getContextPath();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "" + "'", str10.equals(""));
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        org.springframework.boot.context.embedded.Compression compression15 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setContextPath("");
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray18 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.DeploymentManager deploymentManager19 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression15);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory2.createWorker();
        java.net.InetAddress inetAddress7 = undertowEmbeddedServletContainerFactory2.getAddress();
        java.io.File file8 = undertowEmbeddedServletContainerFactory2.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        boolean boolean6 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 10);
        java.lang.Integer int12 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int12);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        io.undertow.server.HttpHandler httpHandler10 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler11 = undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection6 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) -1);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory10.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory10.directBuffers = false;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        io.undertow.Undertow.Builder builder25 = undertowEmbeddedServletContainerFactory22.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        int int27 = undertowEmbeddedServletContainerFactory22.getPort();
        java.lang.ClassLoader classLoader28 = undertowEmbeddedServletContainerFactory22.getServletClassLoader();
        undertowEmbeddedServletContainerFactory22.useForwardHeaders = false;
        java.io.File file31 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        undertowEmbeddedServletContainerFactory18.setMimeMappings(mimeMappings32);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        java.io.File file36 = undertowEmbeddedServletContainerFactory34.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory34.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader38 = undertowEmbeddedServletContainerFactory34.resourceLoader;
        undertowEmbeddedServletContainerFactory34.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList41 = undertowEmbeddedServletContainerFactory34.builderCustomizers;
        undertowEmbeddedServletContainerFactory18.builderCustomizers = undertowBuilderCustomizerList41;
        java.lang.Integer int43 = undertowEmbeddedServletContainerFactory18.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        java.io.File file46 = undertowEmbeddedServletContainerFactory44.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray47 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory44.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray47);
        org.springframework.boot.context.embedded.Compression compression49 = undertowEmbeddedServletContainerFactory44.getCompression();
        java.lang.Integer int50 = undertowEmbeddedServletContainerFactory44.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory53.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file56 = null;
        undertowEmbeddedServletContainerFactory53.accessLogDirectory = file56;
        boolean boolean58 = undertowEmbeddedServletContainerFactory53.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean60 = undertowEmbeddedServletContainerFactory59.isPersistSession();
        java.io.File file61 = undertowEmbeddedServletContainerFactory59.accessLogDirectory;
        boolean boolean62 = undertowEmbeddedServletContainerFactory59.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray63 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList64 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList64, undertowDeploymentInfoCustomizerArray63);
        undertowEmbeddedServletContainerFactory59.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList64;
        undertowEmbeddedServletContainerFactory53.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList64;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray68 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList69 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList69, undertowBuilderCustomizerArray68);
        undertowEmbeddedServletContainerFactory53.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList69);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings72 = undertowEmbeddedServletContainerFactory53.getMimeMappings();
        undertowEmbeddedServletContainerFactory44.setMimeMappings(mimeMappings72);
        undertowEmbeddedServletContainerFactory18.setMimeMappings(mimeMappings72);
        undertowEmbeddedServletContainerFactory10.setMimeMappings(mimeMappings72);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings72);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8080 + "'", int27 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings72);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet9);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.lang.Integer int13 = undertowEmbeddedServletContainerFactory0.bufferSize;
        undertowEmbeddedServletContainerFactory0.ioThreads = 8080;
        org.springframework.boot.context.embedded.Ssl ssl16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory18.resourceLoader;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file23);
        undertowEmbeddedServletContainerFactory18.setBufferSize((java.lang.Integer) (-1));
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory18.accessLogDirectory = file27;
        java.lang.Integer int29 = undertowEmbeddedServletContainerFactory18.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray30 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray30);
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory18.workerThreads;
        io.undertow.Undertow.Builder builder34 = undertowEmbeddedServletContainerFactory18.createBuilder((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureSsl(ssl16, 1800, builder34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        java.net.InetAddress inetAddress7 = undertowEmbeddedServletContainerFactory0.getAddress();
        org.xnio.XnioWorker xnioWorker8 = undertowEmbeddedServletContainerFactory0.createWorker();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker8);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        org.springframework.boot.context.embedded.Compression compression15 = undertowEmbeddedServletContainerFactory0.getCompression();
        boolean boolean16 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.lang.Integer int17 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet18 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory19.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader23 = undertowEmbeddedServletContainerFactory19.resourceLoader;
        java.io.File file24 = null;
        undertowEmbeddedServletContainerFactory19.setSessionStoreDir(file24);
        boolean boolean26 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        org.springframework.boot.context.embedded.Compression compression27 = undertowEmbeddedServletContainerFactory19.getCompression();
        boolean boolean28 = undertowEmbeddedServletContainerFactory19.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList32 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean34 = undertowEmbeddedServletContainerFactory33.isPersistSession();
        io.undertow.Undertow.Builder builder36 = undertowEmbeddedServletContainerFactory33.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer39 = undertowEmbeddedServletContainerFactory29.getUndertowEmbeddedServletContainer(builder36, deploymentManager37, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory29.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder43 = undertowEmbeddedServletContainerFactory29.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        java.io.File file46 = undertowEmbeddedServletContainerFactory44.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList47 = undertowEmbeddedServletContainerFactory44.builderCustomizers;
        undertowEmbeddedServletContainerFactory44.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray50 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory44.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory29.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory19.addErrorPages(errorPageArray50);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray50);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        org.springframework.boot.context.embedded.Compression compression15 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory0.ioThreads;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet9 = null;
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet9);
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        io.undertow.server.handlers.resource.ResourceManager resourceManager7 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(true);
        java.util.concurrent.TimeUnit timeUnit11 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.setSessionTimeout(10, timeUnit11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: TimeUnit must not be null");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager7);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) (byte) 10);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory2.accessLogPattern = "";
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isAccessLogEnabled();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.ioThreads = 100;
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.lang.Boolean boolean11 = undertowEmbeddedServletContainerFactory0.directBuffers;
        io.undertow.server.HttpHandler httpHandler12 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler13 = undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean11);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        org.xnio.XnioWorker xnioWorker11 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.io.File file12 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.core.io.ResourceLoader resourceLoader13 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader13);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.setAccessLogEnabled(true);
        boolean boolean4 = undertowEmbeddedServletContainerFactory1.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory5.bufferSize;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory5.setDocumentRoot(file10);
        org.springframework.core.io.ResourceLoader resourceLoader12 = null;
        undertowEmbeddedServletContainerFactory5.setResourceLoader(resourceLoader12);
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory5.createBuilder((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList19 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory16.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray22 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory16.addErrorPages(errorPageArray22);
        undertowEmbeddedServletContainerFactory16.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression26 = undertowEmbeddedServletContainerFactory16.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory29.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory29.accessLogDirectory = file32;
        boolean boolean34 = undertowEmbeddedServletContainerFactory29.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory29.addInitializers(servletContextInitializerArray35);
        io.undertow.servlet.api.DeploymentManager deploymentManager37 = undertowEmbeddedServletContainerFactory16.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer39 = undertowEmbeddedServletContainerFactory1.getUndertowEmbeddedServletContainer(builder15, deploymentManager37, 1800);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection40 = undertowEmbeddedServletContainerFactory1.getDeploymentInfoCustomizers();
        undertowEmbeddedServletContainerFactory1.setBuffersPerRegion((java.lang.Integer) 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection40);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        boolean boolean4 = jarResourceManager0.isResourceChangeListenerSupported();
        boolean boolean5 = jarResourceManager0.isResourceChangeListenerSupported();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        undertowEmbeddedServletContainerFactory14.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress21 = undertowEmbeddedServletContainerFactory20.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader22 = null;
        undertowEmbeddedServletContainerFactory20.setResourceLoader(resourceLoader22);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer24 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        java.io.File file30 = null;
        undertowEmbeddedServletContainerFactory25.setSessionStoreDir(file30);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo32 = null;
        undertowEmbeddedServletContainerFactory25.configureErrorPages(deploymentInfo32);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer34 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer34 };
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray35);
        initializer24.initializers = servletContextInitializerArray35;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer24.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings44 = undertowEmbeddedServletContainerFactory41.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader45 = undertowEmbeddedServletContainerFactory41.resourceLoader;
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory41.setSessionStoreDir(file46);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo48 = null;
        undertowEmbeddedServletContainerFactory41.configureErrorPages(deploymentInfo48);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer50 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray51 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer50 };
        undertowEmbeddedServletContainerFactory41.addInitializers(servletContextInitializerArray51);
        initializer40.initializers = servletContextInitializerArray51;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray54 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer40.initializers = servletContextInitializerArray54;
        initializer24.initializers = servletContextInitializerArray54;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = initializer24.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray58 = initializer24.initializers;
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray58);
        undertowEmbeddedServletContainerFactory20.setSessionTimeout((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory64.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory64.directBuffers = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer69 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory70 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean71 = undertowEmbeddedServletContainerFactory70.isPersistSession();
        java.io.File file72 = undertowEmbeddedServletContainerFactory70.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings73 = undertowEmbeddedServletContainerFactory70.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader74 = undertowEmbeddedServletContainerFactory70.resourceLoader;
        java.io.File file75 = null;
        undertowEmbeddedServletContainerFactory70.setSessionStoreDir(file75);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo77 = null;
        undertowEmbeddedServletContainerFactory70.configureErrorPages(deploymentInfo77);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer79 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray80 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer79 };
        undertowEmbeddedServletContainerFactory70.addInitializers(servletContextInitializerArray80);
        initializer69.initializers = servletContextInitializerArray80;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray83 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer69.initializers = servletContextInitializerArray83;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer85 = undertowEmbeddedServletContainerFactory64.getEmbeddedServletContainer(servletContextInitializerArray83);
        undertowEmbeddedServletContainerFactory20.addInitializers(servletContextInitializerArray83);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer87 = undertowEmbeddedServletContainerFactory14.getEmbeddedServletContainer(servletContextInitializerArray83);
        io.undertow.servlet.api.DeploymentManager deploymentManager88 = undertowEmbeddedServletContainerFactory10.createDeploymentManager(servletContextInitializerArray83);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer89 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer89);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection13 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection13);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        java.lang.String str4 = jarResourceManager0.jarPath;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader5 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader5;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.core.io.ResourceLoader resourceLoader3 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.lang.Integer int4 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.io.File file6 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        org.springframework.boot.context.embedded.Compression compression7 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression7);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(false);
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList14 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList14);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        boolean boolean1 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        java.lang.String str3 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "";
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer9 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray10 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer9 };
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray10);
        int int12 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean13 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        undertowEmbeddedServletContainerFactory17.setSessionTimeout(1);
        boolean boolean22 = undertowEmbeddedServletContainerFactory17.accessLogEnabled;
        undertowEmbeddedServletContainerFactory17.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean26 = undertowEmbeddedServletContainerFactory25.isPersistSession();
        java.io.File file27 = undertowEmbeddedServletContainerFactory25.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings28 = undertowEmbeddedServletContainerFactory25.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader29 = undertowEmbeddedServletContainerFactory25.resourceLoader;
        undertowEmbeddedServletContainerFactory25.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList32 = undertowEmbeddedServletContainerFactory25.builderCustomizers;
        undertowEmbeddedServletContainerFactory17.builderCustomizers = undertowBuilderCustomizerList32;
        undertowEmbeddedServletContainerFactory16.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList32);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList32;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8080 + "'", int12 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList32);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        int int4 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray7 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray7);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        java.io.File file13 = undertowEmbeddedServletContainerFactory11.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray14 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory11.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray14);
        org.springframework.boot.context.embedded.Ssl ssl16 = undertowEmbeddedServletContainerFactory11.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        undertowEmbeddedServletContainerFactory17.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        io.undertow.Undertow.Builder builder24 = undertowEmbeddedServletContainerFactory21.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager25 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer27 = undertowEmbeddedServletContainerFactory17.getUndertowEmbeddedServletContainer(builder24, deploymentManager25, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager28 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer30 = undertowEmbeddedServletContainerFactory11.getUndertowEmbeddedServletContainer(builder24, deploymentManager28, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager31 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer33 = undertowEmbeddedServletContainerFactory9.getUndertowEmbeddedServletContainer(builder24, deploymentManager31, (int) '#');
        org.springframework.boot.context.embedded.JspServlet jspServlet34 = undertowEmbeddedServletContainerFactory9.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet34);
        boolean boolean36 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.directBuffers = true;
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.JspServlet jspServlet42 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.boot.context.embedded.JspServlet jspServlet43 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8080 + "'", int4 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet43);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", (int) '#');
        undertowEmbeddedServletContainerFactory2.setJspServletClassName("");
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection9 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory14.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory14.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo19 = null;
        undertowEmbeddedServletContainerFactory14.configureErrorPages(deploymentInfo19);
        java.io.File file21 = undertowEmbeddedServletContainerFactory14.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray25 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory22.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray25);
        org.springframework.boot.context.embedded.Ssl ssl27 = undertowEmbeddedServletContainerFactory22.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        undertowEmbeddedServletContainerFactory28.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        io.undertow.Undertow.Builder builder35 = undertowEmbeddedServletContainerFactory32.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager36 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer38 = undertowEmbeddedServletContainerFactory28.getUndertowEmbeddedServletContainer(builder35, deploymentManager36, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager39 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer41 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder35, deploymentManager39, (int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        undertowEmbeddedServletContainerFactory42.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean47 = undertowEmbeddedServletContainerFactory46.isPersistSession();
        io.undertow.Undertow.Builder builder49 = undertowEmbeddedServletContainerFactory46.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager50 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer52 = undertowEmbeddedServletContainerFactory42.getUndertowEmbeddedServletContainer(builder49, deploymentManager50, (int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean54 = undertowEmbeddedServletContainerFactory53.isPersistSession();
        java.io.File file55 = undertowEmbeddedServletContainerFactory53.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList56 = undertowEmbeddedServletContainerFactory53.builderCustomizers;
        undertowEmbeddedServletContainerFactory53.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray59 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory53.addErrorPages(errorPageArray59);
        undertowEmbeddedServletContainerFactory53.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression63 = undertowEmbeddedServletContainerFactory53.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory66.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file69 = null;
        undertowEmbeddedServletContainerFactory66.accessLogDirectory = file69;
        boolean boolean71 = undertowEmbeddedServletContainerFactory66.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray72 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory66.addInitializers(servletContextInitializerArray72);
        io.undertow.servlet.api.DeploymentManager deploymentManager74 = undertowEmbeddedServletContainerFactory53.createDeploymentManager(servletContextInitializerArray72);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer76 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder49, deploymentManager74, (int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory77 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean78 = undertowEmbeddedServletContainerFactory77.isPersistSession();
        java.io.File file79 = undertowEmbeddedServletContainerFactory77.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings80 = undertowEmbeddedServletContainerFactory77.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader81 = undertowEmbeddedServletContainerFactory77.resourceLoader;
        java.io.File file82 = null;
        undertowEmbeddedServletContainerFactory77.setSessionStoreDir(file82);
        undertowEmbeddedServletContainerFactory77.setBufferSize((java.lang.Integer) (-1));
        java.io.File file86 = null;
        undertowEmbeddedServletContainerFactory77.accessLogDirectory = file86;
        java.lang.Integer int88 = undertowEmbeddedServletContainerFactory77.buffersPerRegion;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray89 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory77.addInitializers(servletContextInitializerArray89);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer91 = undertowEmbeddedServletContainerFactory22.getEmbeddedServletContainer(servletContextInitializerArray89);
        io.undertow.servlet.api.DeploymentManager deploymentManager92 = undertowEmbeddedServletContainerFactory14.createDeploymentManager(servletContextInitializerArray89);
        io.undertow.servlet.api.DeploymentManager deploymentManager93 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "0.0.0.0" + "'", str11.equals("0.0.0.0"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager93);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18, undertowBuilderCustomizerArray17);
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18);
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression21);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout(0);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        undertowEmbeddedServletContainerFactory27.accessLogEnabled = false;
        boolean boolean33 = undertowEmbeddedServletContainerFactory27.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList34 = undertowEmbeddedServletContainerFactory27.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList34;
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory2.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean38 = undertowEmbeddedServletContainerFactory37.isPersistSession();
        undertowEmbeddedServletContainerFactory37.setPersistSession(false);
        java.io.File file41 = null;
        undertowEmbeddedServletContainerFactory37.setSessionStoreDir(file41);
        undertowEmbeddedServletContainerFactory37.setPersistSession(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory45 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean46 = undertowEmbeddedServletContainerFactory45.isPersistSession();
        java.io.File file47 = undertowEmbeddedServletContainerFactory45.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList48 = undertowEmbeddedServletContainerFactory45.builderCustomizers;
        undertowEmbeddedServletContainerFactory45.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray51 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory45.addErrorPages(errorPageArray51);
        undertowEmbeddedServletContainerFactory45.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.Compression compression55 = undertowEmbeddedServletContainerFactory45.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory58 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory58.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file61 = null;
        undertowEmbeddedServletContainerFactory58.accessLogDirectory = file61;
        boolean boolean63 = undertowEmbeddedServletContainerFactory58.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray64 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory58.addInitializers(servletContextInitializerArray64);
        io.undertow.servlet.api.DeploymentManager deploymentManager66 = undertowEmbeddedServletContainerFactory45.createDeploymentManager(servletContextInitializerArray64);
        io.undertow.servlet.api.DeploymentManager deploymentManager67 = undertowEmbeddedServletContainerFactory37.createDeploymentManager(servletContextInitializerArray64);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer68 = undertowEmbeddedServletContainerFactory2.getEmbeddedServletContainer(servletContextInitializerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer68);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        java.io.File file41 = undertowEmbeddedServletContainerFactory39.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings42 = undertowEmbeddedServletContainerFactory39.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader43 = undertowEmbeddedServletContainerFactory39.resourceLoader;
        boolean boolean44 = undertowEmbeddedServletContainerFactory39.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader45 = undertowEmbeddedServletContainerFactory39.getServletClassLoader();
        undertowEmbeddedServletContainerFactory39.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList48 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory49 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean50 = undertowEmbeddedServletContainerFactory49.isPersistSession();
        java.io.File file51 = undertowEmbeddedServletContainerFactory49.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList52 = undertowEmbeddedServletContainerFactory49.builderCustomizers;
        int int53 = undertowEmbeddedServletContainerFactory49.getPort();
        undertowEmbeddedServletContainerFactory49.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray56 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory49.addErrorPages(errorPageArray56);
        undertowEmbeddedServletContainerFactory39.addErrorPages(errorPageArray56);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray56);
        io.undertow.Undertow.Builder builder61 = undertowEmbeddedServletContainerFactory0.createBuilder(1);
        org.springframework.boot.context.embedded.JspServlet jspServlet62 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 8080 + "'", int53 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet62);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer15 = undertowEmbeddedServletContainerFactory5.getUndertowEmbeddedServletContainer(builder12, deploymentManager13, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder12, deploymentManager16, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        java.lang.Boolean boolean21 = undertowEmbeddedServletContainerFactory0.directBuffers;
        boolean boolean22 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory4.getPort();
        java.lang.ClassLoader classLoader10 = undertowEmbeddedServletContainerFactory4.getServletClassLoader();
        undertowEmbeddedServletContainerFactory4.useForwardHeaders = false;
        java.io.File file13 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory16.resourceLoader;
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8080 + "'", int9 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.io.File file9 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.core.io.ResourceLoader resourceLoader10 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader10);
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file12);
        boolean boolean14 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.String str15 = undertowEmbeddedServletContainerFactory0.getContextPath();
        java.lang.Integer int16 = undertowEmbeddedServletContainerFactory0.bufferSize;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo17 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "" + "'", str15.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int16);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray8 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray8);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray10 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory2.addErrorPages(errorPageArray10);
        undertowEmbeddedServletContainerFactory2.setUseForwardHeaders(false);
        boolean boolean14 = undertowEmbeddedServletContainerFactory2.isAccessLogEnabled();
        org.springframework.core.io.ResourceLoader resourceLoader15 = undertowEmbeddedServletContainerFactory2.resourceLoader;
        undertowEmbeddedServletContainerFactory2.setDirectBuffers((java.lang.Boolean) true);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo18 = null;
        undertowEmbeddedServletContainerFactory2.configureErrorPages(deploymentInfo18);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory20 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean21 = undertowEmbeddedServletContainerFactory20.isPersistSession();
        java.io.File file22 = undertowEmbeddedServletContainerFactory20.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings23 = undertowEmbeddedServletContainerFactory20.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader24 = undertowEmbeddedServletContainerFactory20.resourceLoader;
        undertowEmbeddedServletContainerFactory20.setBufferSize((java.lang.Integer) 1);
        boolean boolean27 = undertowEmbeddedServletContainerFactory20.useForwardHeaders;
        java.lang.Integer int28 = undertowEmbeddedServletContainerFactory20.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        java.io.File file31 = undertowEmbeddedServletContainerFactory29.accessLogDirectory;
        undertowEmbeddedServletContainerFactory29.setSessionTimeout(1);
        boolean boolean34 = undertowEmbeddedServletContainerFactory29.accessLogEnabled;
        undertowEmbeddedServletContainerFactory29.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean38 = undertowEmbeddedServletContainerFactory37.isPersistSession();
        java.io.File file39 = undertowEmbeddedServletContainerFactory37.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings40 = undertowEmbeddedServletContainerFactory37.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader41 = undertowEmbeddedServletContainerFactory37.resourceLoader;
        undertowEmbeddedServletContainerFactory37.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList44 = undertowEmbeddedServletContainerFactory37.builderCustomizers;
        undertowEmbeddedServletContainerFactory29.builderCustomizers = undertowBuilderCustomizerList44;
        undertowEmbeddedServletContainerFactory20.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList44);
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList44);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(1);
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) -1);
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode9 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray9 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList10 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10, undertowBuilderCustomizerArray9);
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory13.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray16);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        undertowEmbeddedServletContainerFactory13.setMimeMappings(mimeMappings21);
        org.springframework.boot.context.embedded.Compression compression23 = undertowEmbeddedServletContainerFactory13.getCompression();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory26.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory26.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings31 = undertowEmbeddedServletContainerFactory26.getMimeMappings();
        undertowEmbeddedServletContainerFactory13.setMimeMappings(mimeMappings31);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings31);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings31);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        java.io.File file11 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings16 = undertowEmbeddedServletContainerFactory12.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings16);
        boolean boolean18 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.Ssl ssl5 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) -1);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.bufferSize;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        java.lang.String str12 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "" + "'", str12.equals(""));
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        undertowEmbeddedServletContainerFactory0.setDisplayName("");
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("0.0.0.0");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection14 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        java.net.InetAddress inetAddress15 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress15);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.setContextPath("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection14);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 100);
        org.springframework.core.io.ResourceLoader resourceLoader6 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        java.io.File file9 = undertowEmbeddedServletContainerFactory7.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory7.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings10);
        boolean boolean12 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.lang.String str2 = undertowEmbeddedServletContainerFactory0.getContextPath();
        undertowEmbeddedServletContainerFactory0.ioThreads = 1800;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "" + "'", str2.equals(""));
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory2.directBuffers = true;
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory2.ioThreads;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory2.buffersPerRegion;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8.equals(0));
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory7.setSessionTimeout((int) (short) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory15.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory15.accessLogDirectory = file18;
        boolean boolean20 = undertowEmbeddedServletContainerFactory15.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray21 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory15.addInitializers(servletContextInitializerArray21);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray23 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray23);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList25 = undertowEmbeddedServletContainerFactory15.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList25;
        undertowEmbeddedServletContainerFactory0.setPort((int) 'a');
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList25);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(true);
        java.lang.Boolean boolean9 = undertowEmbeddedServletContainerFactory0.directBuffers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory12.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file15 = null;
        undertowEmbeddedServletContainerFactory12.accessLogDirectory = file15;
        undertowEmbeddedServletContainerFactory12.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression19 = null;
        undertowEmbeddedServletContainerFactory12.setCompression(compression19);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean22 = undertowEmbeddedServletContainerFactory21.isPersistSession();
        undertowEmbeddedServletContainerFactory21.accessLogEnabled = false;
        boolean boolean25 = undertowEmbeddedServletContainerFactory21.isRegisterDefaultServlet();
        java.io.File file26 = undertowEmbeddedServletContainerFactory21.getDocumentRoot();
        undertowEmbeddedServletContainerFactory21.setAccessLogPattern("");
        org.springframework.boot.context.embedded.JspServlet jspServlet29 = undertowEmbeddedServletContainerFactory21.getJspServlet();
        undertowEmbeddedServletContainerFactory12.setJspServlet(jspServlet29);
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet29);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        int int9 = undertowEmbeddedServletContainerFactory4.getPort();
        java.lang.ClassLoader classLoader10 = undertowEmbeddedServletContainerFactory4.getServletClassLoader();
        undertowEmbeddedServletContainerFactory4.useForwardHeaders = false;
        java.io.File file13 = undertowEmbeddedServletContainerFactory4.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory4.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings19 = undertowEmbeddedServletContainerFactory16.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader20 = undertowEmbeddedServletContainerFactory16.resourceLoader;
        undertowEmbeddedServletContainerFactory16.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = undertowEmbeddedServletContainerFactory16.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        java.lang.Integer int25 = undertowEmbeddedServletContainerFactory0.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        java.io.File file28 = undertowEmbeddedServletContainerFactory26.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray29 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory26.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray29);
        org.springframework.boot.context.embedded.Compression compression31 = undertowEmbeddedServletContainerFactory26.getCompression();
        java.lang.Integer int32 = undertowEmbeddedServletContainerFactory26.buffersPerRegion;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory35 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory35.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory35.accessLogDirectory = file38;
        boolean boolean40 = undertowEmbeddedServletContainerFactory35.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean42 = undertowEmbeddedServletContainerFactory41.isPersistSession();
        java.io.File file43 = undertowEmbeddedServletContainerFactory41.accessLogDirectory;
        boolean boolean44 = undertowEmbeddedServletContainerFactory41.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray45 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList46 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList46, undertowDeploymentInfoCustomizerArray45);
        undertowEmbeddedServletContainerFactory41.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList46;
        undertowEmbeddedServletContainerFactory35.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList46;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray50 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList51 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList51, undertowBuilderCustomizerArray50);
        undertowEmbeddedServletContainerFactory35.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList51);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings54 = undertowEmbeddedServletContainerFactory35.getMimeMappings();
        undertowEmbeddedServletContainerFactory26.setMimeMappings(mimeMappings54);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings54);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory59 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        org.springframework.boot.context.embedded.Ssl ssl60 = null;
        undertowEmbeddedServletContainerFactory59.setSsl(ssl60);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet62 = undertowEmbeddedServletContainerFactory59.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet62);
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8080 + "'", int9 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25.equals(0));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet62);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.net.InetAddress inetAddress8 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress8);
        java.lang.Integer int10 = undertowEmbeddedServletContainerFactory0.ioThreads;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int10);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file5);
        undertowEmbeddedServletContainerFactory0.bufferSize = 0;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList9 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList9);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader9);
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) (-1));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo7 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
        undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(false);
        boolean boolean11 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo12);
        java.lang.Integer int14 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int14);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.ioThreads = (-1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file5);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        java.lang.String str5 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "0.0.0.0";
        jarResourceManager0.close();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet5 = undertowEmbeddedServletContainerFactory3.getJspServlet();
        undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet5);
        java.lang.Class<?> wildcardClass7 = undertowEmbeddedServletContainerFactory0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder5 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 100);
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        undertowEmbeddedServletContainerFactory7.setRegisterJspServlet(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory11.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        io.undertow.Undertow.Builder builder17 = undertowEmbeddedServletContainerFactory14.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory14.getMimeMappings();
        undertowEmbeddedServletContainerFactory11.setMimeMappings(mimeMappings18);
        undertowEmbeddedServletContainerFactory7.setMimeMappings(mimeMappings18);
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        undertowEmbeddedServletContainerFactory0.workerThreads = 100;
        io.undertow.server.HttpHandler httpHandler5 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.server.handlers.accesslog.AccessLogHandler accessLogHandler6 = undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Access log directory is not set");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        java.lang.ClassLoader classLoader8 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 0);
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        java.io.File file14 = undertowEmbeddedServletContainerFactory12.accessLogDirectory;
        boolean boolean15 = undertowEmbeddedServletContainerFactory12.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray16 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList17, undertowDeploymentInfoCustomizerArray16);
        undertowEmbeddedServletContainerFactory12.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList17;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection21 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet24 = undertowEmbeddedServletContainerFactory22.getJspServlet();
        boolean boolean25 = undertowEmbeddedServletContainerFactory22.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection26 = undertowEmbeddedServletContainerFactory22.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        java.io.File file30 = undertowEmbeddedServletContainerFactory28.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings31 = undertowEmbeddedServletContainerFactory28.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader32 = undertowEmbeddedServletContainerFactory28.resourceLoader;
        java.io.File file33 = null;
        undertowEmbeddedServletContainerFactory28.setSessionStoreDir(file33);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo35 = null;
        undertowEmbeddedServletContainerFactory28.configureErrorPages(deploymentInfo35);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer37 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray38 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer37 };
        undertowEmbeddedServletContainerFactory28.addInitializers(servletContextInitializerArray38);
        initializer27.initializers = servletContextInitializerArray38;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer27.initializers = servletContextInitializerArray41;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory44 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean45 = undertowEmbeddedServletContainerFactory44.isPersistSession();
        java.io.File file46 = undertowEmbeddedServletContainerFactory44.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings47 = undertowEmbeddedServletContainerFactory44.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader48 = undertowEmbeddedServletContainerFactory44.resourceLoader;
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory44.setSessionStoreDir(file49);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo51 = null;
        undertowEmbeddedServletContainerFactory44.configureErrorPages(deploymentInfo51);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer53 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray54 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer53 };
        undertowEmbeddedServletContainerFactory44.addInitializers(servletContextInitializerArray54);
        initializer43.initializers = servletContextInitializerArray54;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer43.initializers = servletContextInitializerArray57;
        initializer27.initializers = servletContextInitializerArray57;
        io.undertow.servlet.api.DeploymentManager deploymentManager60 = undertowEmbeddedServletContainerFactory22.createDeploymentManager(servletContextInitializerArray57);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory61 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean62 = undertowEmbeddedServletContainerFactory61.isPersistSession();
        java.io.File file63 = undertowEmbeddedServletContainerFactory61.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings64 = undertowEmbeddedServletContainerFactory61.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader65 = undertowEmbeddedServletContainerFactory61.resourceLoader;
        boolean boolean66 = undertowEmbeddedServletContainerFactory61.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader67 = undertowEmbeddedServletContainerFactory61.getServletClassLoader();
        undertowEmbeddedServletContainerFactory61.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList70 = undertowEmbeddedServletContainerFactory61.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory71 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean72 = undertowEmbeddedServletContainerFactory71.isPersistSession();
        java.io.File file73 = undertowEmbeddedServletContainerFactory71.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList74 = undertowEmbeddedServletContainerFactory71.builderCustomizers;
        int int75 = undertowEmbeddedServletContainerFactory71.getPort();
        undertowEmbeddedServletContainerFactory71.useForwardHeaders = false;
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray78 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory71.addErrorPages(errorPageArray78);
        undertowEmbeddedServletContainerFactory61.addErrorPages(errorPageArray78);
        undertowEmbeddedServletContainerFactory22.addErrorPages(errorPageArray78);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8080 + "'", int75 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray78);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 1;
        java.net.InetAddress inetAddress13 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress13);
        org.springframework.boot.context.embedded.Ssl ssl15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode16 = undertowEmbeddedServletContainerFactory2.getSslClientAuthMode(ssl15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 100;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 1;
        java.net.InetAddress inetAddress13 = null;
        undertowEmbeddedServletContainerFactory2.setAddress(inetAddress13);
        org.springframework.boot.context.embedded.Ssl ssl15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory19.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file22 = null;
        undertowEmbeddedServletContainerFactory19.accessLogDirectory = file22;
        undertowEmbeddedServletContainerFactory19.setPersistSession(true);
        java.lang.Integer int26 = undertowEmbeddedServletContainerFactory19.bufferSize;
        undertowEmbeddedServletContainerFactory19.workerThreads = 0;
        org.springframework.core.io.ResourceLoader resourceLoader29 = null;
        undertowEmbeddedServletContainerFactory19.setResourceLoader(resourceLoader29);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory32.buffersPerRegion = 1;
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory32.setBuffersPerRegion((java.lang.Integer) 1800);
        io.undertow.Undertow.Builder builder40 = undertowEmbeddedServletContainerFactory32.createBuilder((int) 'a');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory43 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory43.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file46 = null;
        undertowEmbeddedServletContainerFactory43.accessLogDirectory = file46;
        boolean boolean48 = undertowEmbeddedServletContainerFactory43.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray49 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory43.addInitializers(servletContextInitializerArray49);
        undertowEmbeddedServletContainerFactory43.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory55.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file58 = null;
        undertowEmbeddedServletContainerFactory55.accessLogDirectory = file58;
        boolean boolean60 = undertowEmbeddedServletContainerFactory55.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray61 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory55.addInitializers(servletContextInitializerArray61);
        io.undertow.servlet.api.DeploymentManager deploymentManager63 = undertowEmbeddedServletContainerFactory43.createDeploymentManager(servletContextInitializerArray61);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer65 = undertowEmbeddedServletContainerFactory19.getUndertowEmbeddedServletContainer(builder40, deploymentManager63, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory2.configureSsl(ssl15, (int) '4', builder40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer65);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.bufferSize = 0;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean3 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        java.io.File file4 = undertowEmbeddedServletContainerFactory2.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray5 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory2.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray5);
        org.springframework.boot.context.embedded.Ssl ssl7 = undertowEmbeddedServletContainerFactory2.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        undertowEmbeddedServletContainerFactory8.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        io.undertow.Undertow.Builder builder15 = undertowEmbeddedServletContainerFactory12.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory8.getUndertowEmbeddedServletContainer(builder15, deploymentManager16, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager19 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer21 = undertowEmbeddedServletContainerFactory2.getUndertowEmbeddedServletContainer(builder15, deploymentManager19, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager22 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer24 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder15, deploymentManager22, (int) '#');
        org.springframework.boot.context.embedded.JspServlet jspServlet25 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        java.io.File file29 = undertowEmbeddedServletContainerFactory27.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings30 = undertowEmbeddedServletContainerFactory27.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader31 = undertowEmbeddedServletContainerFactory27.resourceLoader;
        java.io.File file32 = null;
        undertowEmbeddedServletContainerFactory27.setSessionStoreDir(file32);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo34 = null;
        undertowEmbeddedServletContainerFactory27.configureErrorPages(deploymentInfo34);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer36 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray37 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer36 };
        undertowEmbeddedServletContainerFactory27.addInitializers(servletContextInitializerArray37);
        initializer26.initializers = servletContextInitializerArray37;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory40 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean41 = undertowEmbeddedServletContainerFactory40.isPersistSession();
        java.io.File file42 = undertowEmbeddedServletContainerFactory40.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings43 = undertowEmbeddedServletContainerFactory40.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader44 = undertowEmbeddedServletContainerFactory40.resourceLoader;
        java.io.File file45 = null;
        undertowEmbeddedServletContainerFactory40.setSessionStoreDir(file45);
        undertowEmbeddedServletContainerFactory40.setBufferSize((java.lang.Integer) (-1));
        java.io.File file49 = null;
        undertowEmbeddedServletContainerFactory40.accessLogDirectory = file49;
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory40.buffersPerRegion;
        undertowEmbeddedServletContainerFactory40.setRegisterDefaultServlet(false);
        undertowEmbeddedServletContainerFactory40.setBuffersPerRegion((java.lang.Integer) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean57 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        java.io.File file58 = undertowEmbeddedServletContainerFactory56.accessLogDirectory;
        undertowEmbeddedServletContainerFactory56.setSessionTimeout(1);
        boolean boolean61 = undertowEmbeddedServletContainerFactory56.accessLogEnabled;
        undertowEmbeddedServletContainerFactory56.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory66.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file69 = null;
        undertowEmbeddedServletContainerFactory66.accessLogDirectory = file69;
        boolean boolean71 = undertowEmbeddedServletContainerFactory66.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray72 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory66.addInitializers(servletContextInitializerArray72);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer74 = undertowEmbeddedServletContainerFactory56.getEmbeddedServletContainer(servletContextInitializerArray72);
        undertowEmbeddedServletContainerFactory40.addInitializers(servletContextInitializerArray72);
        initializer26.initializers = servletContextInitializerArray72;
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer74);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(8080);
        undertowEmbeddedServletContainerFactory1.buffersPerRegion = 1;
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory1.resourceLoader = resourceLoader4;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        undertowEmbeddedServletContainerFactory6.setBufferSize((java.lang.Integer) 0);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        io.undertow.Undertow.Builder builder13 = undertowEmbeddedServletContainerFactory10.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings14 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        int int15 = undertowEmbeddedServletContainerFactory10.getPort();
        java.lang.ClassLoader classLoader16 = undertowEmbeddedServletContainerFactory10.getServletClassLoader();
        undertowEmbeddedServletContainerFactory10.useForwardHeaders = false;
        java.io.File file19 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory10.getMimeMappings();
        undertowEmbeddedServletContainerFactory6.setMimeMappings(mimeMappings20);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings22 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        undertowEmbeddedServletContainerFactory1.setMimeMappings(mimeMappings22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8080 + "'", int15 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings22);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        java.lang.Integer int8 = undertowEmbeddedServletContainerFactory0.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        java.io.File file11 = undertowEmbeddedServletContainerFactory9.accessLogDirectory;
        undertowEmbeddedServletContainerFactory9.setSessionTimeout(1);
        boolean boolean14 = undertowEmbeddedServletContainerFactory9.accessLogEnabled;
        undertowEmbeddedServletContainerFactory9.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean18 = undertowEmbeddedServletContainerFactory17.isPersistSession();
        java.io.File file19 = undertowEmbeddedServletContainerFactory17.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings20 = undertowEmbeddedServletContainerFactory17.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader21 = undertowEmbeddedServletContainerFactory17.resourceLoader;
        undertowEmbeddedServletContainerFactory17.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList24 = undertowEmbeddedServletContainerFactory17.builderCustomizers;
        undertowEmbeddedServletContainerFactory9.builderCustomizers = undertowBuilderCustomizerList24;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList24);
        org.springframework.boot.context.embedded.JspServlet jspServlet27 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet27);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("hi!");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean4 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.io.File file5 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory10 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean11 = undertowEmbeddedServletContainerFactory10.isPersistSession();
        java.io.File file12 = undertowEmbeddedServletContainerFactory10.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray13 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory10.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray13);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        java.io.File file17 = undertowEmbeddedServletContainerFactory15.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings18 = undertowEmbeddedServletContainerFactory15.getMimeMappings();
        undertowEmbeddedServletContainerFactory10.setMimeMappings(mimeMappings18);
        undertowEmbeddedServletContainerFactory10.setDisplayName("");
        undertowEmbeddedServletContainerFactory10.setAccessLogPattern("0.0.0.0");
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory10.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(undertowBuilderCustomizerCollection24);
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.setContextPath("0.0.0.0");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.xnio.XnioWorker xnioWorker6 = undertowEmbeddedServletContainerFactory2.createWorker();
        java.net.InetAddress inetAddress7 = undertowEmbeddedServletContainerFactory2.getAddress();
        undertowEmbeddedServletContainerFactory2.bufferSize = 1800;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory2.setAccessLogDirectory(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress7);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 10);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (short) 100);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.setSessionTimeout((int) (short) 0);
        java.lang.String str6 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 0);
        undertowEmbeddedServletContainerFactory0.ioThreads = 0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
        java.net.InetAddress inetAddress4 = undertowEmbeddedServletContainerFactory0.getAddress();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress4);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection8 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 8080);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean12 = undertowEmbeddedServletContainerFactory11.isPersistSession();
        undertowEmbeddedServletContainerFactory11.setPersistSession(false);
        undertowEmbeddedServletContainerFactory11.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory11.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory19 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean20 = undertowEmbeddedServletContainerFactory19.isPersistSession();
        java.io.File file21 = undertowEmbeddedServletContainerFactory19.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray22 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory19.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray22);
        undertowEmbeddedServletContainerFactory11.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray22);
        java.io.File file25 = null;
        undertowEmbeddedServletContainerFactory11.setDocumentRoot(file25);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList27 = undertowEmbeddedServletContainerFactory11.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList27;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory29 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean30 = undertowEmbeddedServletContainerFactory29.isPersistSession();
        io.undertow.Undertow.Builder builder32 = undertowEmbeddedServletContainerFactory29.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory29.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory29.directBuffers = false;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList37 = undertowEmbeddedServletContainerFactory29.builderCustomizers;
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList37);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList7 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        java.net.InetAddress inetAddress8 = undertowEmbeddedServletContainerFactory0.getAddress();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings13 = undertowEmbeddedServletContainerFactory9.getMimeMappings();
        int int14 = undertowEmbeddedServletContainerFactory9.getPort();
        java.lang.ClassLoader classLoader15 = undertowEmbeddedServletContainerFactory9.getServletClassLoader();
        undertowEmbeddedServletContainerFactory9.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory9.setDisplayName("");
        java.lang.Boolean boolean20 = undertowEmbeddedServletContainerFactory9.directBuffers;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet21 = undertowEmbeddedServletContainerFactory9.getErrorPages();
        undertowEmbeddedServletContainerFactory0.setErrorPages(errorPageSet21);
        java.io.File file23 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection24 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8080 + "'", int14 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection24);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        int int7 = undertowEmbeddedServletContainerFactory0.getPort();
        boolean boolean8 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        io.undertow.Undertow.Builder builder10 = undertowEmbeddedServletContainerFactory0.createBuilder(1800);
        org.springframework.boot.context.embedded.Compression compression11 = null;
        undertowEmbeddedServletContainerFactory0.setCompression(compression11);
        java.io.File file13 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8080 + "'", int7 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (byte) 100);
        undertowEmbeddedServletContainerFactory0.workerThreads = 1;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        org.springframework.core.io.ResourceLoader resourceLoader8 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.core.io.ResourceLoader resourceLoader9 = null;
        undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader9);
        undertowEmbeddedServletContainerFactory0.workerThreads = (-1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        undertowEmbeddedServletContainerFactory13.setSessionTimeout(1);
        boolean boolean18 = undertowEmbeddedServletContainerFactory13.accessLogEnabled;
        undertowEmbeddedServletContainerFactory13.setAccessLogPattern("0.0.0.0");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory23.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file26 = null;
        undertowEmbeddedServletContainerFactory23.accessLogDirectory = file26;
        boolean boolean28 = undertowEmbeddedServletContainerFactory23.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory23.addInitializers(servletContextInitializerArray29);
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer31 = undertowEmbeddedServletContainerFactory13.getEmbeddedServletContainer(servletContextInitializerArray29);
        undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer31);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet6 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.lang.Integer int7 = undertowEmbeddedServletContainerFactory0.workerThreads;
        int int8 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 100);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8080 + "'", int8 == 8080);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory(100);
        int int2 = undertowEmbeddedServletContainerFactory1.getSessionTimeout();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1800 + "'", int2 == 1800);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        undertowEmbeddedServletContainerFactory5.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        io.undertow.Undertow.Builder builder12 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager13 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer15 = undertowEmbeddedServletContainerFactory5.getUndertowEmbeddedServletContainer(builder12, deploymentManager13, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager16 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer18 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder12, deploymentManager16, (int) (byte) -1);
        org.springframework.boot.context.embedded.Ssl ssl19 = undertowEmbeddedServletContainerFactory0.getSsl();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl19);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.String str41 = undertowEmbeddedServletContainerFactory0.getContextPath();
        org.springframework.boot.context.embedded.Ssl ssl42 = undertowEmbeddedServletContainerFactory0.getSsl();
        org.springframework.boot.context.embedded.ErrorPage errorPage43 = null;
        // The following exception was thrown during execution in test generation
        try {
            io.undertow.servlet.api.ErrorPage errorPage44 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "" + "'", str41.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl42);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        undertowEmbeddedServletContainerFactory0.workerThreads = 10;
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file10);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo12 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        java.net.InetAddress inetAddress3 = undertowEmbeddedServletContainerFactory2.getAddress();
        org.springframework.core.io.ResourceLoader resourceLoader4 = null;
        undertowEmbeddedServletContainerFactory2.setResourceLoader(resourceLoader4);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean8 = undertowEmbeddedServletContainerFactory7.isPersistSession();
        java.io.File file9 = undertowEmbeddedServletContainerFactory7.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory7.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader11 = undertowEmbeddedServletContainerFactory7.resourceLoader;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory7.setSessionStoreDir(file12);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo14 = null;
        undertowEmbeddedServletContainerFactory7.configureErrorPages(deploymentInfo14);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer16 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray17 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer16 };
        undertowEmbeddedServletContainerFactory7.addInitializers(servletContextInitializerArray17);
        initializer6.initializers = servletContextInitializerArray17;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray20 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer6.initializers = servletContextInitializerArray20;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory23 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean24 = undertowEmbeddedServletContainerFactory23.isPersistSession();
        java.io.File file25 = undertowEmbeddedServletContainerFactory23.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings26 = undertowEmbeddedServletContainerFactory23.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader27 = undertowEmbeddedServletContainerFactory23.resourceLoader;
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory23.setSessionStoreDir(file28);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo30 = null;
        undertowEmbeddedServletContainerFactory23.configureErrorPages(deploymentInfo30);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer32 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray33 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer32 };
        undertowEmbeddedServletContainerFactory23.addInitializers(servletContextInitializerArray33);
        initializer22.initializers = servletContextInitializerArray33;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray36 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer22.initializers = servletContextInitializerArray36;
        initializer6.initializers = servletContextInitializerArray36;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray39 = initializer6.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray40 = initializer6.initializers;
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray40);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout((int) (byte) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory46.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory46.directBuffers = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory52 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean53 = undertowEmbeddedServletContainerFactory52.isPersistSession();
        java.io.File file54 = undertowEmbeddedServletContainerFactory52.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings55 = undertowEmbeddedServletContainerFactory52.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader56 = undertowEmbeddedServletContainerFactory52.resourceLoader;
        java.io.File file57 = null;
        undertowEmbeddedServletContainerFactory52.setSessionStoreDir(file57);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo59 = null;
        undertowEmbeddedServletContainerFactory52.configureErrorPages(deploymentInfo59);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer61 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray62 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer61 };
        undertowEmbeddedServletContainerFactory52.addInitializers(servletContextInitializerArray62);
        initializer51.initializers = servletContextInitializerArray62;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray65 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer51.initializers = servletContextInitializerArray65;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer67 = undertowEmbeddedServletContainerFactory46.getEmbeddedServletContainer(servletContextInitializerArray65);
        undertowEmbeddedServletContainerFactory2.addInitializers(servletContextInitializerArray65);
        int int69 = undertowEmbeddedServletContainerFactory2.getPort();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        undertowEmbeddedServletContainerFactory0.ioThreads = 1800;
        undertowEmbeddedServletContainerFactory0.setDisplayName("hi!");
        boolean boolean16 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        int int17 = undertowEmbeddedServletContainerFactory0.getPort();
        org.springframework.boot.context.embedded.Ssl ssl18 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8080 + "'", int17 == 8080);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        undertowEmbeddedServletContainerFactory0.setPort((-1));
        undertowEmbeddedServletContainerFactory0.setPort((int) (byte) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList17 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        java.io.File file18 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean6 = undertowEmbeddedServletContainerFactory5.isPersistSession();
        java.io.File file7 = undertowEmbeddedServletContainerFactory5.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings8 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings8);
        org.springframework.boot.context.embedded.Compression compression10 = undertowEmbeddedServletContainerFactory0.getCompression();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory0.getContextPath();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList12 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        org.springframework.boot.context.embedded.Compression compression13 = undertowEmbeddedServletContainerFactory0.getCompression();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "" + "'", str11.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(compression13);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray3 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray3);
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = (-1);
        undertowEmbeddedServletContainerFactory0.setAccessLogPattern("");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray3);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet2 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection4 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory6 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean7 = undertowEmbeddedServletContainerFactory6.isPersistSession();
        java.io.File file8 = undertowEmbeddedServletContainerFactory6.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings9 = undertowEmbeddedServletContainerFactory6.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader10 = undertowEmbeddedServletContainerFactory6.resourceLoader;
        java.io.File file11 = null;
        undertowEmbeddedServletContainerFactory6.setSessionStoreDir(file11);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo13 = null;
        undertowEmbeddedServletContainerFactory6.configureErrorPages(deploymentInfo13);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer15 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray16 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer15 };
        undertowEmbeddedServletContainerFactory6.addInitializers(servletContextInitializerArray16);
        initializer5.initializers = servletContextInitializerArray16;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray19 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer5.initializers = servletContextInitializerArray19;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer21 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        java.io.File file24 = undertowEmbeddedServletContainerFactory22.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings25 = undertowEmbeddedServletContainerFactory22.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader26 = undertowEmbeddedServletContainerFactory22.resourceLoader;
        java.io.File file27 = null;
        undertowEmbeddedServletContainerFactory22.setSessionStoreDir(file27);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo29 = null;
        undertowEmbeddedServletContainerFactory22.configureErrorPages(deploymentInfo29);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer31 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray32 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer31 };
        undertowEmbeddedServletContainerFactory22.addInitializers(servletContextInitializerArray32);
        initializer21.initializers = servletContextInitializerArray32;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray35 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer21.initializers = servletContextInitializerArray35;
        initializer5.initializers = servletContextInitializerArray35;
        io.undertow.servlet.api.DeploymentManager deploymentManager38 = undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray35);
        java.lang.Integer int39 = undertowEmbeddedServletContainerFactory0.workerThreads;
        java.lang.String str40 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.String str41 = undertowEmbeddedServletContainerFactory0.getDisplayName();
        java.lang.Integer int42 = undertowEmbeddedServletContainerFactory0.bufferSize;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int42);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader23;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("hi!");
        java.net.InetAddress inetAddress27 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet4 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        java.lang.String str5 = undertowEmbeddedServletContainerFactory0.getListenAddress();
        undertowEmbeddedServletContainerFactory0.bufferSize = 1800;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "0.0.0.0" + "'", str5.equals("0.0.0.0"));
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        java.net.InetAddress inetAddress9 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.setBuffersPerRegion((java.lang.Integer) 1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress9);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.lang.Integer int5 = undertowEmbeddedServletContainerFactory2.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int5);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory3 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean4 = undertowEmbeddedServletContainerFactory3.isPersistSession();
        io.undertow.Undertow.Builder builder6 = undertowEmbeddedServletContainerFactory3.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings7 = undertowEmbeddedServletContainerFactory3.getMimeMappings();
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings7);
        undertowEmbeddedServletContainerFactory0.bufferSize = 10;
        org.springframework.boot.context.embedded.JspServlet jspServlet11 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        java.lang.Boolean boolean16 = undertowEmbeddedServletContainerFactory0.directBuffers;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16.equals(false));
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        int int4 = undertowEmbeddedServletContainerFactory0.getSessionTimeout();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory7.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory7.directBuffers = true;
        java.io.File file12 = null;
        undertowEmbeddedServletContainerFactory7.setSessionStoreDir(file12);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory14 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean15 = undertowEmbeddedServletContainerFactory14.isPersistSession();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        java.io.File file18 = undertowEmbeddedServletContainerFactory16.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray19 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory16.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray19);
        org.springframework.boot.context.embedded.Ssl ssl21 = undertowEmbeddedServletContainerFactory16.getSsl();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory22 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean23 = undertowEmbeddedServletContainerFactory22.isPersistSession();
        undertowEmbeddedServletContainerFactory22.setPersistSession(false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory26 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean27 = undertowEmbeddedServletContainerFactory26.isPersistSession();
        io.undertow.Undertow.Builder builder29 = undertowEmbeddedServletContainerFactory26.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager30 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer32 = undertowEmbeddedServletContainerFactory22.getUndertowEmbeddedServletContainer(builder29, deploymentManager30, (int) (byte) 1);
        io.undertow.servlet.api.DeploymentManager deploymentManager33 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer35 = undertowEmbeddedServletContainerFactory16.getUndertowEmbeddedServletContainer(builder29, deploymentManager33, (int) 'a');
        io.undertow.servlet.api.DeploymentManager deploymentManager36 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer38 = undertowEmbeddedServletContainerFactory14.getUndertowEmbeddedServletContainer(builder29, deploymentManager36, (int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory41 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory41.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file44 = null;
        undertowEmbeddedServletContainerFactory41.accessLogDirectory = file44;
        boolean boolean46 = undertowEmbeddedServletContainerFactory41.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory41.addInitializers(servletContextInitializerArray47);
        undertowEmbeddedServletContainerFactory41.setIoThreads((java.lang.Integer) 10);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean52 = undertowEmbeddedServletContainerFactory51.isPersistSession();
        java.io.File file53 = undertowEmbeddedServletContainerFactory51.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings54 = undertowEmbeddedServletContainerFactory51.getMimeMappings();
        java.lang.Integer int55 = undertowEmbeddedServletContainerFactory51.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer56 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray57 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer56 };
        undertowEmbeddedServletContainerFactory51.addBuilderCustomizers(undertowBuilderCustomizerArray57);
        undertowEmbeddedServletContainerFactory41.addBuilderCustomizers(undertowBuilderCustomizerArray57);
        undertowEmbeddedServletContainerFactory14.addBuilderCustomizers(undertowBuilderCustomizerArray57);
        undertowEmbeddedServletContainerFactory7.addBuilderCustomizers(undertowBuilderCustomizerArray57);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1800 + "'", int4 == 1800);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray57);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(false);
        java.net.InetAddress inetAddress14 = null;
        undertowEmbeddedServletContainerFactory0.setAddress(inetAddress14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory16 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean17 = undertowEmbeddedServletContainerFactory16.isPersistSession();
        undertowEmbeddedServletContainerFactory16.accessLogEnabled = false;
        boolean boolean20 = undertowEmbeddedServletContainerFactory16.isRegisterDefaultServlet();
        java.io.File file21 = undertowEmbeddedServletContainerFactory16.getDocumentRoot();
        org.xnio.XnioWorker xnioWorker22 = undertowEmbeddedServletContainerFactory16.createWorker();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory25 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory25.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file28 = null;
        undertowEmbeddedServletContainerFactory25.accessLogDirectory = file28;
        boolean boolean30 = undertowEmbeddedServletContainerFactory25.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        undertowEmbeddedServletContainerFactory25.addInitializers(servletContextInitializerArray31);
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray33 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory25.addErrorPages(errorPageArray33);
        undertowEmbeddedServletContainerFactory25.useForwardHeaders = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory37 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean38 = undertowEmbeddedServletContainerFactory37.isPersistSession();
        java.io.File file39 = undertowEmbeddedServletContainerFactory37.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings40 = undertowEmbeddedServletContainerFactory37.getMimeMappings();
        java.lang.Integer int41 = undertowEmbeddedServletContainerFactory37.bufferSize;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer undertowBuilderCustomizer42 = null;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray43 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] { undertowBuilderCustomizer42 };
        undertowEmbeddedServletContainerFactory37.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        undertowEmbeddedServletContainerFactory25.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        undertowEmbeddedServletContainerFactory16.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray43);
        java.util.Set<org.springframework.boot.context.embedded.ErrorPage> errorPageSet48 = undertowEmbeddedServletContainerFactory0.getErrorPages();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageSet48);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("hi!", 1800);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ContextPath must start with '/' and not end with '/'");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory0.workerThreads;
        int int10 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        java.io.File file13 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8080 + "'", int10 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory0.createBuilder((int) '4');
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) 1);
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (byte) 100);
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setPersistSession(true);
        org.springframework.boot.context.embedded.Compression compression9 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression9);
        java.lang.Integer int11 = undertowEmbeddedServletContainerFactory2.buffersPerRegion;
        undertowEmbeddedServletContainerFactory2.ioThreads = 1800;
        java.io.File file14 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file14;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11.equals(0));
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        undertowEmbeddedServletContainerFactory0.setPersistSession(false);
        java.io.File file4 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file4);
        org.springframework.boot.context.embedded.Ssl ssl6 = null;
        undertowEmbeddedServletContainerFactory0.setSsl(ssl6);
        undertowEmbeddedServletContainerFactory0.setDirectBuffers((java.lang.Boolean) false);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory11 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory((int) '#');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory12 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean13 = undertowEmbeddedServletContainerFactory12.isPersistSession();
        org.springframework.boot.context.embedded.JspServlet jspServlet14 = undertowEmbeddedServletContainerFactory12.getJspServlet();
        boolean boolean15 = undertowEmbeddedServletContainerFactory12.isRegisterDefaultServlet();
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerCollection16 = undertowEmbeddedServletContainerFactory12.getDeploymentInfoCustomizers();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer17 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean19 = undertowEmbeddedServletContainerFactory18.isPersistSession();
        java.io.File file20 = undertowEmbeddedServletContainerFactory18.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings21 = undertowEmbeddedServletContainerFactory18.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader22 = undertowEmbeddedServletContainerFactory18.resourceLoader;
        java.io.File file23 = null;
        undertowEmbeddedServletContainerFactory18.setSessionStoreDir(file23);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo25 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo25);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer27 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer27 };
        undertowEmbeddedServletContainerFactory18.addInitializers(servletContextInitializerArray28);
        initializer17.initializers = servletContextInitializerArray28;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray31 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer17.initializers = servletContextInitializerArray31;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer33 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory34 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean35 = undertowEmbeddedServletContainerFactory34.isPersistSession();
        java.io.File file36 = undertowEmbeddedServletContainerFactory34.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings37 = undertowEmbeddedServletContainerFactory34.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader38 = undertowEmbeddedServletContainerFactory34.resourceLoader;
        java.io.File file39 = null;
        undertowEmbeddedServletContainerFactory34.setSessionStoreDir(file39);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo41 = null;
        undertowEmbeddedServletContainerFactory34.configureErrorPages(deploymentInfo41);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer43 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer43 };
        undertowEmbeddedServletContainerFactory34.addInitializers(servletContextInitializerArray44);
        initializer33.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray47 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer33.initializers = servletContextInitializerArray47;
        initializer17.initializers = servletContextInitializerArray47;
        io.undertow.servlet.api.DeploymentManager deploymentManager50 = undertowEmbeddedServletContainerFactory12.createDeploymentManager(servletContextInitializerArray47);
        java.lang.Integer int51 = undertowEmbeddedServletContainerFactory12.workerThreads;
        java.lang.String str52 = undertowEmbeddedServletContainerFactory12.getDisplayName();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory53 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean54 = undertowEmbeddedServletContainerFactory53.isPersistSession();
        java.io.File file55 = undertowEmbeddedServletContainerFactory53.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList56 = undertowEmbeddedServletContainerFactory53.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory57 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean58 = undertowEmbeddedServletContainerFactory57.isPersistSession();
        io.undertow.Undertow.Builder builder60 = undertowEmbeddedServletContainerFactory57.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager61 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer63 = undertowEmbeddedServletContainerFactory53.getUndertowEmbeddedServletContainer(builder60, deploymentManager61, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory53.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder67 = undertowEmbeddedServletContainerFactory53.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory68 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean69 = undertowEmbeddedServletContainerFactory68.isPersistSession();
        java.io.File file70 = undertowEmbeddedServletContainerFactory68.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList71 = undertowEmbeddedServletContainerFactory68.builderCustomizers;
        undertowEmbeddedServletContainerFactory68.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray74 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory68.addErrorPages(errorPageArray74);
        undertowEmbeddedServletContainerFactory53.addErrorPages(errorPageArray74);
        undertowEmbeddedServletContainerFactory12.addErrorPages(errorPageArray74);
        undertowEmbeddedServletContainerFactory11.addErrorPages(errorPageArray74);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerCollection16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(deploymentManager50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray74);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory7 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory7.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file10 = null;
        undertowEmbeddedServletContainerFactory7.accessLogDirectory = file10;
        boolean boolean12 = undertowEmbeddedServletContainerFactory7.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory13 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean14 = undertowEmbeddedServletContainerFactory13.isPersistSession();
        java.io.File file15 = undertowEmbeddedServletContainerFactory13.accessLogDirectory;
        boolean boolean16 = undertowEmbeddedServletContainerFactory13.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList18, undertowDeploymentInfoCustomizerArray17);
        undertowEmbeddedServletContainerFactory13.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        undertowEmbeddedServletContainerFactory7.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList18;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray22 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList23 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList23, undertowBuilderCustomizerArray22);
        undertowEmbeddedServletContainerFactory7.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList23);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList23;
        undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(true);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = false;
        boolean boolean31 = undertowEmbeddedServletContainerFactory0.accessLogEnabled;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory32 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean33 = undertowEmbeddedServletContainerFactory32.isPersistSession();
        java.io.File file34 = undertowEmbeddedServletContainerFactory32.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings35 = undertowEmbeddedServletContainerFactory32.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader36 = undertowEmbeddedServletContainerFactory32.resourceLoader;
        undertowEmbeddedServletContainerFactory32.setBufferSize((java.lang.Integer) 1);
        boolean boolean39 = undertowEmbeddedServletContainerFactory32.useForwardHeaders;
        java.lang.Integer int40 = undertowEmbeddedServletContainerFactory32.ioThreads;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray41 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList42 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList42, undertowBuilderCustomizerArray41);
        undertowEmbeddedServletContainerFactory32.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList42);
        undertowEmbeddedServletContainerFactory0.builderCustomizers = undertowBuilderCustomizerList42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        boolean boolean5 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
        boolean boolean9 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        java.net.InetAddress inetAddress10 = undertowEmbeddedServletContainerFactory0.getAddress();
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(inetAddress10);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        boolean boolean7 = undertowEmbeddedServletContainerFactory2.isRegisterDefaultServlet();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory8 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean9 = undertowEmbeddedServletContainerFactory8.isPersistSession();
        java.io.File file10 = undertowEmbeddedServletContainerFactory8.accessLogDirectory;
        boolean boolean11 = undertowEmbeddedServletContainerFactory8.useForwardHeaders;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray12 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList13 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer>) undertowDeploymentInfoCustomizerList13, undertowDeploymentInfoCustomizerArray12);
        undertowEmbeddedServletContainerFactory8.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList13;
        org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] undertowBuilderCustomizerArray17 = new org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer[] {};
        java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList18 = new java.util.ArrayList<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18, undertowBuilderCustomizerArray17);
        undertowEmbeddedServletContainerFactory2.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList18);
        org.springframework.boot.context.embedded.Compression compression21 = null;
        undertowEmbeddedServletContainerFactory2.setCompression(compression21);
        undertowEmbeddedServletContainerFactory2.setSessionTimeout(0);
        undertowEmbeddedServletContainerFactory2.setIoThreads((java.lang.Integer) 100);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean28 = undertowEmbeddedServletContainerFactory27.isPersistSession();
        undertowEmbeddedServletContainerFactory27.setPersistSession(false);
        undertowEmbeddedServletContainerFactory27.accessLogEnabled = false;
        boolean boolean33 = undertowEmbeddedServletContainerFactory27.accessLogEnabled;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList34 = undertowEmbeddedServletContainerFactory27.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory2.deploymentInfoCustomizers = undertowDeploymentInfoCustomizerList34;
        java.lang.Integer int36 = undertowEmbeddedServletContainerFactory2.bufferSize;
        undertowEmbeddedServletContainerFactory2.accessLogPattern = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        org.springframework.core.io.ResourceLoader resourceLoader2 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory5 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory5.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory5.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings10 = undertowEmbeddedServletContainerFactory5.getMimeMappings();
        java.lang.String str11 = undertowEmbeddedServletContainerFactory5.accessLogPattern;
        undertowEmbeddedServletContainerFactory5.workerThreads = 10;
        org.springframework.core.io.ResourceLoader resourceLoader14 = null;
        undertowEmbeddedServletContainerFactory5.setResourceLoader(resourceLoader14);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory18 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory18.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory18.directBuffers = true;
        io.undertow.servlet.api.DeploymentInfo deploymentInfo23 = null;
        undertowEmbeddedServletContainerFactory18.configureErrorPages(deploymentInfo23);
        java.io.File file25 = undertowEmbeddedServletContainerFactory18.getSessionStoreDir();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory28.setBuffersPerRegion((java.lang.Integer) 0);
        undertowEmbeddedServletContainerFactory28.directBuffers = true;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings33 = undertowEmbeddedServletContainerFactory28.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader34 = null;
        undertowEmbeddedServletContainerFactory28.setResourceLoader(resourceLoader34);
        java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerCollection36 = undertowEmbeddedServletContainerFactory28.getBuilderCustomizers();
        undertowEmbeddedServletContainerFactory18.setBuilderCustomizers(undertowBuilderCustomizerCollection36);
        java.io.File file38 = null;
        undertowEmbeddedServletContainerFactory18.setDocumentRoot(file38);
        undertowEmbeddedServletContainerFactory18.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory42 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean43 = undertowEmbeddedServletContainerFactory42.isPersistSession();
        java.io.File file44 = undertowEmbeddedServletContainerFactory42.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings45 = undertowEmbeddedServletContainerFactory42.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader46 = undertowEmbeddedServletContainerFactory42.resourceLoader;
        undertowEmbeddedServletContainerFactory42.setBufferSize((java.lang.Integer) 1);
        boolean boolean49 = undertowEmbeddedServletContainerFactory42.useForwardHeaders;
        java.lang.ClassLoader classLoader50 = undertowEmbeddedServletContainerFactory42.getServletClassLoader();
        java.lang.Boolean boolean51 = undertowEmbeddedServletContainerFactory42.directBuffers;
        undertowEmbeddedServletContainerFactory42.setRegisterJspServlet(false);
        java.io.File file54 = null;
        undertowEmbeddedServletContainerFactory42.setSessionStoreDir(file54);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory56 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean57 = undertowEmbeddedServletContainerFactory56.isPersistSession();
        undertowEmbeddedServletContainerFactory56.setPersistSession(false);
        undertowEmbeddedServletContainerFactory56.accessLogEnabled = false;
        undertowEmbeddedServletContainerFactory56.accessLogEnabled = true;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory64 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean65 = undertowEmbeddedServletContainerFactory64.isPersistSession();
        java.io.File file66 = undertowEmbeddedServletContainerFactory64.accessLogDirectory;
        org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray67 = new org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer[] {};
        undertowEmbeddedServletContainerFactory64.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        undertowEmbeddedServletContainerFactory56.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        undertowEmbeddedServletContainerFactory42.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        undertowEmbeddedServletContainerFactory18.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        undertowEmbeddedServletContainerFactory5.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray67);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo74 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerCollection36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(boolean51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerArray67);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 1);
        undertowEmbeddedServletContainerFactory0.accessLogEnabled = true;
        undertowEmbeddedServletContainerFactory0.directBuffers = false;
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 10);
        boolean boolean3 = undertowEmbeddedServletContainerFactory0.isRegisterDefaultServlet();
        undertowEmbeddedServletContainerFactory0.ioThreads = 1;
        java.lang.Integer int6 = undertowEmbeddedServletContainerFactory0.workerThreads;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int6);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        boolean boolean3 = jarResourceManager0.isResourceChangeListenerSupported();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        java.lang.ClassLoader classLoader6 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
        undertowEmbeddedServletContainerFactory0.setPort((int) (short) 1);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory9 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean10 = undertowEmbeddedServletContainerFactory9.isPersistSession();
        undertowEmbeddedServletContainerFactory9.accessLogEnabled = false;
        io.undertow.Undertow.Builder builder14 = undertowEmbeddedServletContainerFactory9.createBuilder((int) (short) 100);
        io.undertow.servlet.api.DeploymentManager deploymentManager15 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer17 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder14, deploymentManager15, (int) (byte) 100);
        java.io.File file18 = null;
        undertowEmbeddedServletContainerFactory0.setDocumentRoot(file18);
        org.springframework.boot.context.embedded.Ssl ssl20 = undertowEmbeddedServletContainerFactory0.getSsl();
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("");
        org.springframework.core.io.ResourceLoader resourceLoader23 = null;
        undertowEmbeddedServletContainerFactory0.resourceLoader = resourceLoader23;
        undertowEmbeddedServletContainerFactory0.setJspServletClassName("hi!");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer27 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray28 = initializer27.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray29 = initializer27.initializers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer30 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory31 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean32 = undertowEmbeddedServletContainerFactory31.isPersistSession();
        java.io.File file33 = undertowEmbeddedServletContainerFactory31.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings34 = undertowEmbeddedServletContainerFactory31.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader35 = undertowEmbeddedServletContainerFactory31.resourceLoader;
        java.io.File file36 = null;
        undertowEmbeddedServletContainerFactory31.setSessionStoreDir(file36);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo38 = null;
        undertowEmbeddedServletContainerFactory31.configureErrorPages(deploymentInfo38);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer40 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray41 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer40 };
        undertowEmbeddedServletContainerFactory31.addInitializers(servletContextInitializerArray41);
        initializer30.initializers = servletContextInitializerArray41;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray44 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer30.initializers = servletContextInitializerArray44;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer initializer46 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.Initializer();
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory47 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean48 = undertowEmbeddedServletContainerFactory47.isPersistSession();
        java.io.File file49 = undertowEmbeddedServletContainerFactory47.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings50 = undertowEmbeddedServletContainerFactory47.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader51 = undertowEmbeddedServletContainerFactory47.resourceLoader;
        java.io.File file52 = null;
        undertowEmbeddedServletContainerFactory47.setSessionStoreDir(file52);
        io.undertow.servlet.api.DeploymentInfo deploymentInfo54 = null;
        undertowEmbeddedServletContainerFactory47.configureErrorPages(deploymentInfo54);
        org.springframework.boot.context.embedded.ServletContextInitializer servletContextInitializer56 = null;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray57 = new org.springframework.boot.context.embedded.ServletContextInitializer[] { servletContextInitializer56 };
        undertowEmbeddedServletContainerFactory47.addInitializers(servletContextInitializerArray57);
        initializer46.initializers = servletContextInitializerArray57;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray60 = new org.springframework.boot.context.embedded.ServletContextInitializer[] {};
        initializer46.initializers = servletContextInitializerArray60;
        initializer30.initializers = servletContextInitializerArray60;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray63 = initializer30.initializers;
        org.springframework.boot.context.embedded.ServletContextInitializer[] servletContextInitializerArray64 = initializer30.initializers;
        initializer27.initializers = servletContextInitializerArray64;
        org.springframework.boot.context.embedded.EmbeddedServletContainer embeddedServletContainer66 = undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray64);
        org.springframework.boot.context.embedded.JspServlet jspServlet67 = undertowEmbeddedServletContainerFactory0.getJspServlet();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo68 = null;
        // The following exception was thrown during execution in test generation
        try {
            undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(ssl20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(servletContextInitializerArray29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(servletContextInitializerArray64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(embeddedServletContainer66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(jspServlet67);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        undertowEmbeddedServletContainerFactory0.setBufferSize((java.lang.Integer) (-1));
        java.io.File file9 = null;
        undertowEmbeddedServletContainerFactory0.accessLogDirectory = file9;
        undertowEmbeddedServletContainerFactory0.buffersPerRegion = 0;
        org.xnio.XnioWorker xnioWorker13 = undertowEmbeddedServletContainerFactory0.createWorker();
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer> undertowDeploymentInfoCustomizerList14 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
        undertowEmbeddedServletContainerFactory0.useForwardHeaders = true;
        io.undertow.server.handlers.resource.ResourceManager resourceManager17 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        io.undertow.server.handlers.resource.ResourceManager resourceManager18 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowDeploymentInfoCustomizerList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(resourceManager18);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        io.undertow.Undertow.Builder builder3 = undertowEmbeddedServletContainerFactory0.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings4 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        int int5 = undertowEmbeddedServletContainerFactory0.getPort();
        undertowEmbeddedServletContainerFactory0.setIoThreads((java.lang.Integer) 100);
        undertowEmbeddedServletContainerFactory0.setPersistSession(true);
        java.io.File file10 = undertowEmbeddedServletContainerFactory0.getSessionStoreDir();
        io.undertow.servlet.api.DeploymentInfo deploymentInfo11 = null;
        undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo11);
        java.lang.String str13 = undertowEmbeddedServletContainerFactory0.getContextPath();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8080 + "'", int5 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "" + "'", str13.equals(""));
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory2 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory("", 1);
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 0);
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory2.accessLogDirectory = file5;
        undertowEmbeddedServletContainerFactory2.setBuffersPerRegion((java.lang.Integer) 10);
        java.lang.Integer int9 = undertowEmbeddedServletContainerFactory2.ioThreads;
        undertowEmbeddedServletContainerFactory2.buffersPerRegion = 8080;
        boolean boolean12 = undertowEmbeddedServletContainerFactory2.isPersistSession();
        undertowEmbeddedServletContainerFactory2.setRegisterDefaultServlet(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(int9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        java.lang.String str1 = jarResourceManager0.jarPath;
        boolean boolean2 = jarResourceManager0.isResourceChangeListenerSupported();
        jarResourceManager0.close();
        jarResourceManager0.close();
        jarResourceManager0.close();
        boolean boolean6 = jarResourceManager0.isResourceChangeListenerSupported();
        java.lang.String str7 = jarResourceManager0.jarPath;
        jarResourceManager0.close();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList3 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory4 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean5 = undertowEmbeddedServletContainerFactory4.isPersistSession();
        io.undertow.Undertow.Builder builder7 = undertowEmbeddedServletContainerFactory4.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager8 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer10 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(builder7, deploymentManager8, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory0.setSessionTimeout(100);
        undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(true);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory15 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean16 = undertowEmbeddedServletContainerFactory15.isPersistSession();
        io.undertow.Undertow.Builder builder18 = undertowEmbeddedServletContainerFactory15.createBuilder((int) (short) 0);
        undertowEmbeddedServletContainerFactory15.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory15.directBuffers = false;
        undertowEmbeddedServletContainerFactory15.setRegisterDefaultServlet(false);
        org.xnio.XnioWorker xnioWorker25 = undertowEmbeddedServletContainerFactory15.createWorker();
        org.springframework.core.io.ResourceLoader resourceLoader26 = null;
        undertowEmbeddedServletContainerFactory15.setResourceLoader(resourceLoader26);
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory28 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean29 = undertowEmbeddedServletContainerFactory28.isPersistSession();
        io.undertow.Undertow.Builder builder31 = undertowEmbeddedServletContainerFactory28.createBuilder((int) (short) 0);
        org.springframework.boot.context.embedded.MimeMappings mimeMappings32 = undertowEmbeddedServletContainerFactory28.getMimeMappings();
        int int33 = undertowEmbeddedServletContainerFactory28.getPort();
        java.lang.ClassLoader classLoader34 = undertowEmbeddedServletContainerFactory28.getServletClassLoader();
        undertowEmbeddedServletContainerFactory28.useForwardHeaders = false;
        undertowEmbeddedServletContainerFactory28.setDisplayName("");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory39 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean40 = undertowEmbeddedServletContainerFactory39.isPersistSession();
        java.io.File file41 = undertowEmbeddedServletContainerFactory39.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings42 = undertowEmbeddedServletContainerFactory39.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader43 = undertowEmbeddedServletContainerFactory39.resourceLoader;
        undertowEmbeddedServletContainerFactory39.setBufferSize((java.lang.Integer) 1);
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList46 = undertowEmbeddedServletContainerFactory39.builderCustomizers;
        undertowEmbeddedServletContainerFactory28.builderCustomizers = undertowBuilderCustomizerList46;
        undertowEmbeddedServletContainerFactory15.setBuilderCustomizers((java.util.Collection<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer>) undertowBuilderCustomizerList46);
        undertowEmbeddedServletContainerFactory15.bufferSize = 10;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory51 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean52 = undertowEmbeddedServletContainerFactory51.isPersistSession();
        java.io.File file53 = undertowEmbeddedServletContainerFactory51.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList54 = undertowEmbeddedServletContainerFactory51.builderCustomizers;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory55 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean56 = undertowEmbeddedServletContainerFactory55.isPersistSession();
        io.undertow.Undertow.Builder builder58 = undertowEmbeddedServletContainerFactory55.createBuilder((int) (short) 0);
        io.undertow.servlet.api.DeploymentManager deploymentManager59 = null;
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer undertowEmbeddedServletContainer61 = undertowEmbeddedServletContainerFactory51.getUndertowEmbeddedServletContainer(builder58, deploymentManager59, (int) (byte) -1);
        undertowEmbeddedServletContainerFactory51.setSessionTimeout(100);
        io.undertow.Undertow.Builder builder65 = undertowEmbeddedServletContainerFactory51.createBuilder((int) '4');
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory66 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean67 = undertowEmbeddedServletContainerFactory66.isPersistSession();
        java.io.File file68 = undertowEmbeddedServletContainerFactory66.accessLogDirectory;
        java.util.List<org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer> undertowBuilderCustomizerList69 = undertowEmbeddedServletContainerFactory66.builderCustomizers;
        undertowEmbeddedServletContainerFactory66.setDisplayName("hi!");
        org.springframework.boot.context.embedded.ErrorPage[] errorPageArray72 = new org.springframework.boot.context.embedded.ErrorPage[] {};
        undertowEmbeddedServletContainerFactory66.addErrorPages(errorPageArray72);
        undertowEmbeddedServletContainerFactory51.addErrorPages(errorPageArray72);
        undertowEmbeddedServletContainerFactory15.addErrorPages(errorPageArray72);
        undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(xnioWorker25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8080 + "'", int33 == 8080);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(classLoader34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowEmbeddedServletContainer61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(builder65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(undertowBuilderCustomizerList69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(errorPageArray72);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory();
        boolean boolean1 = undertowEmbeddedServletContainerFactory0.isPersistSession();
        java.io.File file2 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
        org.springframework.boot.context.embedded.MimeMappings mimeMappings3 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
        org.springframework.core.io.ResourceLoader resourceLoader4 = undertowEmbeddedServletContainerFactory0.resourceLoader;
        java.io.File file5 = null;
        undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file5);
        boolean boolean7 = undertowEmbeddedServletContainerFactory0.useForwardHeaders;
        org.springframework.boot.context.embedded.Ssl ssl8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.xnio.SslClientAuthMode sslClientAuthMode9 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(mimeMappings3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(resourceLoader4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager jarResourceManager0 = new org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.JarResourceManager();
        jarResourceManager0.close();
        jarResourceManager0.jarPath = "0.0.0.0";
        java.lang.String str4 = jarResourceManager0.jarPath;
        jarResourceManager0.jarPath = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "0.0.0.0" + "'", str4.equals("0.0.0.0"));
    }
}

