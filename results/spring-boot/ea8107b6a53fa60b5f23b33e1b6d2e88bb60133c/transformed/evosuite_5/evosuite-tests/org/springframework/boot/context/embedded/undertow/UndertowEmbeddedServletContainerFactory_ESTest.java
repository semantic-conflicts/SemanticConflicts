/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 03:32:53 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.NotificationReceiver;
import io.undertow.security.idm.IdentityManager;
import io.undertow.security.impl.BasicAuthenticationMechanism;
import io.undertow.security.impl.ClientCertAuthenticationMechanism;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.accesslog.AccessLogHandler;
import io.undertow.server.handlers.resource.Resource;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.ListenerInfo;
import io.undertow.servlet.api.LoginConfig;
import io.undertow.servlet.api.MetricsCollector;
import io.undertow.servlet.api.MimeMapping;
import io.undertow.servlet.api.ServletContainerInitializerInfo;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.api.ThreadSetupAction;
import io.undertow.servlet.core.ApplicationListeners;
import io.undertow.servlet.core.CompositeThreadSetupAction;
import io.undertow.servlet.core.DefaultAuthorizationManager;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.InMemorySessionManagerFactory;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.core.SessionListenerBridge;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.handlers.ServletRequestContext;
import io.undertow.servlet.spec.ServletContextImpl;
import java.io.File;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.nio.charset.Charset;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.UnaryOperator;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.MultipartConfigElement;
import javax.servlet.Servlet;
import javax.servlet.descriptor.JspConfigDescriptor;
import javax.swing.JLayeredPane;
import javax.swing.text.StyledEditorKit;
import org.apache.catalina.core.StandardContext;
import org.apache.struts.mock.MockServletContext;
import org.apache.tomcat.util.buf.ByteChunk;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.apache.tomcat.util.net.AprEndpoint;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.dom4j.Namespace;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.eclipse.jetty.server.session.HashSessionManager;
import org.eclipse.jetty.servlets.GzipFilter;
import org.eclipse.jetty.util.thread.ExecutorThreadPool;
import org.eclipse.jetty.util.thread.QueuedThreadPool;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.boot.test.SpringBootMockServletContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.StaticApplicationContext;
import org.springframework.core.io.PathResource;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.context.support.StaticWebApplicationContext;
import org.springframework.web.filter.CompositeFilter;
import org.springframework.web.filter.DelegatingFilterProxy;
import org.springframework.web.filter.RequestContextFilter;
import org.xnio.Option;
import org.xnio.SslClientAuthMode;
import org.xnio.XnioIoThread;
import org.xnio.XnioWorker;
import org.xnio.channels.NullStreamSinkChannel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.305");
      String string2 = "UT010052: Header name was null";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean0.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ErrorPage[] errorPageArray0 = new ErrorPage[6];
      ErrorPage errorPage0 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[0] = errorPage0;
      Class<ExecutionException> class0 = ExecutionException.class;
      ErrorPage errorPage1 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[1] = errorPage1;
      Class<Throwable> class1 = Throwable.class;
      ErrorPage errorPage2 = new ErrorPage(class1, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[2] = errorPage2;
      ErrorPage errorPage3 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[3] = errorPage3;
      String string0 = errorPage0.getExceptionName();
      ErrorPage errorPage4 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[2] = errorPage4;
      String string1 = errorPage4.getExceptionName();
      String string2 = "%f<0";
      ErrorPage errorPage5 = new ErrorPage(string2);
      errorPageArray0[5] = errorPage5;
      Integer integer0 = undertowEmbeddedServletContainerFactory0.buffersPerRegion;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string3 = "";
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setContextPath(string3);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setInvalidateSessionOnLogout(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.clone();
      NotificationReceiver notificationReceiver0 = mock(NotificationReceiver.class, new ViolatedAssumptionAnswer());
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo1);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      int int0 = 290;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      MetricsCollector metricsCollector0 = mock(MetricsCollector.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMetricsCollector(metricsCollector0);
      int int1 = 2468;
      ExecutorThreadPool executorThreadPool0 = new ExecutorThreadPool(int1);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setAsyncExecutor(executorThreadPool0);
      WebXml webXml0 = new WebXml();
      JspConfigDescriptor jspConfigDescriptor0 = webXml0.getJspConfigDescriptor();
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setJspConfigDescriptor(jspConfigDescriptor0);
      String string1 = ">dE$V;WFeeHVV";
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setHostName(string1);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo4);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 2246;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "lifecycleBase.destroyFail";
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setServerName(string0);
      String string1 = "'";
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addSecurityRole(string1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      int int1 = 1769;
      QueuedThreadPool queuedThreadPool0 = new QueuedThreadPool(int0, int1);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setExecutor(queuedThreadPool0);
      int int2 = 2647;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManagerImpl0, int2);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = (-403);
      boolean boolean0 = true;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      String string0 = "kNm";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      stringArray0[2] = string0;
      String string1 = "org.eclipse.jetty.http.PathMap$MappedEntry";
      String string2 = "-";
      stringArray0[4] = string2;
      String string3 = "";
      stringArray0[5] = string3;
      int int1 = (-2927);
      Undertow.Builder undertow_Builder0 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      ResourceChangeListener resourceChangeListener1 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener1);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = (-403);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Integer integer0 = Opcodes.LONG;
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "L,P cr{-";
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
          int int0 = 0;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
          ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
          Integer integer0 = Opcodes.DOUBLE;
          undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
          int int1 = 2780;
          Undertow.Builder undertow_Builder0 = Undertow.builder();
          Integer integer1 = groovyjarjarasm.asm.Opcodes.LONG;
          undertowEmbeddedServletContainerFactory0.setIoThreads(integer1);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      EvoSuiteFile evoSuiteFile0 = null;
      ssl0.setTrustStore(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ssl0.setKeyStoreType(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, undertowEmbeddedServletContainerFactory0.accessLogEnabled, boolean1, boolean1);
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      SslClientAuthMode sslClientAuthMode1 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[4];
      DefaultServlet defaultServlet0 = new DefaultServlet();
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(defaultServlet0, stringArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      DefaultListableBeanFactory defaultListableBeanFactory0 = null;
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = null;
      try {
        annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext(defaultListableBeanFactory0);
      } catch(IllegalArgumentException e) {
         //
         // BeanFactory must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      filterRegistrationBean0.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      AprEndpoint aprEndpoint0 = new AprEndpoint();
      String string0 = "PC8Efl\\{RT/J";
      aprEndpoint0.setSSLProtocol(string0);
      String string1 = "!L{zbe";
      aprEndpoint0.setTruststoreProvider(string1);
      InetAddress inetAddress0 = aprEndpoint0.getAddress();
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      int int0 = 0;
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string0, int0);
      Integer integer0 = errorPage0.getErrorCode();
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string1);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer1 = new UndertowEmbeddedServletContainerFactory.Initializer(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      boolean boolean0 = false;
      boolean boolean1 = Boolean.logicalAnd(undertowEmbeddedServletContainerFactory0.useForwardHeaders, boolean0);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers((Boolean) undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[8];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "default";
      int int0 = (-1915);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HashSessionManager hashSessionManager0 = new HashSessionManager();
      File file0 = MockFile.createTempFile(string0, hashSessionManager0.FAILED, undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      Compression compression0 = new Compression();
      HttpHandler httpHandler0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Failed to create access log directory '/tmp/default0FAILED'
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = 0;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          undertowEmbeddedServletContainerFactory0.setPort(int0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = (-1545);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 194;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "ApplicationParameter[";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      String string1 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      DeploymentInfo deploymentInfo0 = null;
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = (-550);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      LinkedHashSet<UndertowDeploymentInfoCustomizer> linkedHashSet0 = new LinkedHashSet<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedHashSet0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      String string0 = "";
      int int1 = 0;
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction(string0, int1);
      ServletListenerRegistrationBean<StyledEditorKit.FontSizeAction> servletListenerRegistrationBean0 = null;
      try {
        servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<StyledEditorKit.FontSizeAction>(styledEditorKit_FontSizeAction0);
      } catch(IllegalArgumentException e) {
         //
         // Listener is not of a supported type
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = (-1489);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = (-22);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      StaticApplicationContext staticApplicationContext0 = new StaticApplicationContext();
      String string0 = "l975<0n";
      String string1 = "@YJ:\"b<i%";
      File file0 = MockFile.createTempFile(string0, string1);
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      FileSystemXmlApplicationContext fileSystemXmlApplicationContext0 = new FileSystemXmlApplicationContext(staticApplicationContext0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(fileSystemXmlApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 444;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      String string0 = "zxGk:~cQXDTQ2>";
      ssl0.setKeyAlias(string0);
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getTrimWhitespace();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      ResourceChangeListener resourceChangeListener0 = null;
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = "{:elUa.V";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string0;
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = undertowEmbeddedServletContainerFactory0.workerThreads;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer1 = new UndertowEmbeddedServletContainerFactory.Initializer(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getIsXml();
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = Boolean.logicalAnd(boolean1, boolean2);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 4903;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = undertowEmbeddedServletContainerFactory0.ioThreads;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      int int1 = 2132;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = (-1069);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      Sequence sequence0 = new Sequence();
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) sequence0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Stack<UndertowBuilderCustomizer> stack0 = new Stack<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(stack0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      PathResource pathResource0 = new PathResource(string0);
      File file0 = pathResource0.getFile();
      String string1 = "@*~;4X/p;iXh,";
      MockFile mockFile0 = new MockFile(file0, string1);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(mockFile0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      int int0 = (-1125);
      ResourceChangeListener resourceChangeListener0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[8];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 2246;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "lifecycleBase.destroyFail";
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPage(errorPage0);
      String string1 = "'";
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addSecurityRole(string1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      int int1 = 1769;
      QueuedThreadPool queuedThreadPool0 = new QueuedThreadPool(int0, int1);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setExecutor(queuedThreadPool0);
      int int2 = 2647;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManagerImpl0, int2);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      boolean boolean1 = false;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean1);
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath, undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath);
      HttpHandler httpHandler0 = byteRangeHandler_Wrapper0.wrap(jvmRouteHandler0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = 232;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      RoutingHandler routingHandler0 = new RoutingHandler();
      String string0 = "WE!%DVq`34inaK!";
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, undertowEmbeddedServletContainerFactory0.accessLogPattern, string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(jvmRouteHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 695;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int1 = 333;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addAjpListener(int1, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      boolean boolean0 = true;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setDirectBuffers(boolean0);
      int int2 = (-23);
      String string0 = "|";
      HttpHandler httpHandler0 = null;
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addAjpListener(int2, string0, httpHandler0);
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setHandler(httpHandler0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string1 = "JKS";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string1);
      int int3 = (-4128);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int3);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[9];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowBuilderCustomizerArray0[8] = undertowBuilderCustomizerArray0[7];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      String string0 = "t7,\"My<,";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      int int0 = 1702;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      int int0 = 1586;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = (-1209);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      File file0 = undertowEmbeddedServletContainerFactory0.getDocumentRoot();
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file0);
      String string0 = "spring-boot";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      PriorityBlockingQueue<io.undertow.servlet.api.ErrorPage> priorityBlockingQueue0 = new PriorityBlockingQueue<io.undertow.servlet.api.ErrorPage>();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPages((Collection<io.undertow.servlet.api.ErrorPage>) priorityBlockingQueue0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "Lgor>l6U@m,)o@O\\";
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      ClientCertAuthenticationMechanism.Factory clientCertAuthenticationMechanism_Factory0 = new ClientCertAuthenticationMechanism.Factory(identityManager0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addAuthenticationMechanism(string0, clientCertAuthenticationMechanism_Factory0);
      io.undertow.servlet.api.ErrorPage[] errorPageArray0 = new io.undertow.servlet.api.ErrorPage[5];
      String string1 = "?|(t7P/(hU^ZjTB";
      int int0 = 2000;
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string1, int0);
      errorPageArray0[0] = errorPage0;
      io.undertow.servlet.api.ErrorPage errorPage1 = new io.undertow.servlet.api.ErrorPage(string0);
      errorPageArray0[1] = errorPage1;
      Class<ExecutionException> class0 = ExecutionException.class;
      io.undertow.servlet.api.ErrorPage errorPage2 = new io.undertow.servlet.api.ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern, class0);
      errorPageArray0[2] = errorPage2;
      int int1 = (-3355);
      io.undertow.servlet.api.ErrorPage errorPage3 = new io.undertow.servlet.api.ErrorPage(string0, int1);
      errorPageArray0[3] = errorPage3;
      Class<Throwable> class1 = Throwable.class;
      io.undertow.servlet.api.ErrorPage errorPage4 = new io.undertow.servlet.api.ErrorPage(string1, class1);
      errorPageArray0[4] = errorPage4;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addErrorPages(errorPageArray0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.clearLoginMethods();
      InMemorySessionManagerFactory inMemorySessionManagerFactory0 = new InMemorySessionManagerFactory();
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setSessionManagerFactory(inMemorySessionManagerFactory0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      MimeMappings mimeMappings0 = new MimeMappings();
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = (-1380);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      JspServlet jspServlet0 = new JspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      String string1 = "g";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string2 = "undertow-docbase";
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addLocaleCharsetMapping(string2, string1);
      String string3 = "Yi28IGP";
      DispatcherType dispatcherType0 = DispatcherType.INCLUDE;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, string3, dispatcherType0);
      ServletExtension servletExtension0 = mock(ServletExtension.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addServletExtension(servletExtension0);
      boolean boolean0 = true;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addOuterHandlerChainWrapper(byteRangeHandler_Wrapper0);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo4);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[4];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string4 = "jwXP:+j1\"tB/QI";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string4);
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManager0, deploymentInfo3, servletContainerImpl0);
      HttpHandler httpHandler0 = deploymentImpl0.getHandler();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ErrorPage errorPage0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Sequence sequence0 = new Sequence();
      UnaryOperator<UndertowDeploymentInfoCustomizer> unaryOperator0 = UnaryOperator.identity();
      sequence0.replaceAll(unaryOperator0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(sequence0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int0 = (-2752);
      int int1 = 327680;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "/filter-mapping/filter-name";
      int int0 = 1154;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) nonEmptySequence0;
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      boolean boolean0 = true;
      boolean boolean1 = nonEmptySequence0.add((Object) string0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      Ssl ssl0 = new Ssl();
      int int1 = (-7);
      Undertow.Builder undertow_Builder0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder0);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "L,P cr{-";
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
          int int0 = 0;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
          ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
          Integer integer0 = Opcodes.DOUBLE;
          undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
          int int1 = 2780;
          Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
          Integer integer1 = groovyjarjarasm.asm.Opcodes.LONG;
          undertowEmbeddedServletContainerFactory0.setIoThreads(integer1);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Ssl ssl0 = new Ssl();
      ssl0.setTrustStorePassword(string0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      int int0 = 1472;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = null;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int1 = 0;
      String string0 = null;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpListener(int1, string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      int int0 = (-2988);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      Sequence sequence0 = new Sequence(class0);
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) sequence0;
      boolean boolean0 = sequence0.removeAll(undertowEmbeddedServletContainerFactory0.NO_CLASSES);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[2];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(undertowDeploymentInfoCustomizer0).toString();
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid type of argument for sequence of type: javax.management.remote.JMXPrincipal cannot add object: Mock for UndertowDeploymentInfoCustomizer, hashCode: 229990972
         //
         verifyException("groovy.lang.Sequence", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "4^";
      ErrorPage errorPage0 = new ErrorPage(string0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean1.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      io.undertow.servlet.api.ErrorPage[] errorPageArray0 = new io.undertow.servlet.api.ErrorPage[2];
      String string0 = "s";
      int int0 = 0;
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string0, int0);
      errorPageArray0[0] = errorPage0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new UndertowEmbeddedServletContainerFactory();
      HttpStatus httpStatus0 = HttpStatus.ACCEPTED;
      ErrorPage errorPage1 = new ErrorPage(httpStatus0, string0);
      io.undertow.servlet.api.ErrorPage errorPage2 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage1);
      errorPageArray0[1] = errorPage2;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPages(errorPageArray0);
      Charset charset0 = ByteChunk.DEFAULT_CHARSET;
      Set<String> set0 = charset0.aliases();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addSecurityRoles((Collection<String>) set0);
      ArrayList<ThreadSetupAction> arrayList0 = new ArrayList<ThreadSetupAction>();
      CompositeThreadSetupAction compositeThreadSetupAction0 = new CompositeThreadSetupAction(arrayList0);
      ApplicationListeners applicationListeners0 = null;
      boolean boolean0 = arrayList0.add((ThreadSetupAction) compositeThreadSetupAction0);
      org.springframework.mock.web.MockServletContext mockServletContext0 = new org.springframework.mock.web.MockServletContext(string0);
      SessionListenerBridge sessionListenerBridge0 = new SessionListenerBridge(compositeThreadSetupAction0, applicationListeners0, mockServletContext0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addSessionListener(sessionListenerBridge0);
      int int1 = 4263;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setMajorVersion(int1);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo4);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer1 = new UndertowEmbeddedServletContainerFactory.Initializer(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      boolean boolean0 = false;
      boolean boolean1 = Boolean.logicalAnd(undertowEmbeddedServletContainerFactory0.useForwardHeaders, boolean0);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers((Boolean) undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      org.springframework.mock.web.MockServletContext mockServletContext0 = new org.springframework.mock.web.MockServletContext();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, mockServletContext0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$Initializer", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean1.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("public");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean0.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.305");
      String string2 = "UT010052: Header name was null";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean1.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.305");
      String string2 = "UT010052: Header name was null";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      filterRegistrationBean1.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "";
      int int0 = 305;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      CompositeFilter compositeFilter0 = new CompositeFilter();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      filterRegistrationBean0.setFilter(compositeFilter0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowBuilderCustomizer> collection0 = null;
      String string0 = "jar:file:";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      int int0 = (-403);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = Opcodes.LONG;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "L,P cr{-";
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
          int int0 = 0;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
          ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
          Integer integer0 = Opcodes.DOUBLE;
          undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
          int int1 = 2780;
          Undertow.Builder undertow_Builder0 = Undertow.builder();
          Integer integer1 = groovyjarjarasm.asm.Opcodes.LONG;
          undertowEmbeddedServletContainerFactory0.setIoThreads(integer1);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
          DeploymentInfo deploymentInfo0 = new DeploymentInfo();
          int int2 = (-2818);
          DeploymentInfo deploymentInfo1 = deploymentInfo0.setMajorVersion(int2);
          DeploymentInfo deploymentInfo2 = deploymentInfo1.setResourceManager(undertowEmbeddedServletContainerFactory_JarResourceManager0);
          String string1 = "Error cancelling key %s of %s (other thread)";
          io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string1);
          DeploymentInfo deploymentInfo3 = deploymentInfo2.addErrorPage(errorPage0);
          DeploymentInfo deploymentInfo4 = deploymentInfo3.setAllowNonStandardWrappers(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
          ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
          undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
          undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor80.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }
}
