/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 04:11:32 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.predicate.Predicate;
import io.undertow.predicate.SecurePredicate;
import io.undertow.protocols.http2.Http2Channel;
import io.undertow.protocols.http2.Http2HeadersStreamSinkChannel;
import io.undertow.security.api.AuthenticationMechanism;
import io.undertow.security.api.AuthenticationMechanismFactory;
import io.undertow.security.api.NotificationReceiver;
import io.undertow.security.idm.IdentityManager;
import io.undertow.security.impl.BasicAuthenticationMechanism;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.XnioByteBufferPool;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.accesslog.AccessLogHandler;
import io.undertow.server.handlers.resource.Resource;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.server.protocol.http2.Http2ServerConnection;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.FilterInfo;
import io.undertow.servlet.api.InstanceFactory;
import io.undertow.servlet.api.LifecycleInterceptor;
import io.undertow.servlet.api.ListenerInfo;
import io.undertow.servlet.api.MetricsCollector;
import io.undertow.servlet.api.SecurityConstraint;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.api.ServletContainerInitializerInfo;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.api.ServletSessionConfig;
import io.undertow.servlet.api.ServletStackTraces;
import io.undertow.servlet.api.SessionPersistenceManager;
import io.undertow.servlet.core.ContextClassLoaderSetupAction;
import io.undertow.servlet.core.DefaultAuthorizationManager;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ErrorPages;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.util.ImmediateInstanceFactory;
import io.undertow.servlet.util.InMemorySessionPersistence;
import io.undertow.util.AttachmentKey;
import io.undertow.util.HeaderMap;
import io.undertow.util.ImmediatePooledByteBuffer;
import java.awt.Window;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.stream.Stream;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.security.auth.Subject;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthDesktopIconUI;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.loader.ParallelWebappClassLoader;
import org.apache.catalina.loader.WebappClassLoader;
import org.apache.catalina.startup.FailedContext;
import org.apache.catalina.valves.CrawlerSessionManagerValve;
import org.apache.jasper.servlet.JspCServletContext;
import org.apache.tomcat.util.descriptor.web.ServletDef;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.codehaus.groovy.control.io.InputStreamReaderSource;
import org.codehaus.groovy.control.io.URLReaderSource;
import org.dom4j.bean.BeanAttributeList;
import org.eclipse.jetty.security.ConstraintSecurityHandler;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.ErrorHandler;
import org.eclipse.jetty.server.session.SessionHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.util.resource.FileResource;
import org.eclipse.jetty.util.resource.ResourceCollection;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.eclipse.jetty.util.ssl.SslContextFactory;
import org.eclipse.jetty.webapp.MetaData;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.MutablePropertyValues;
import org.springframework.beans.factory.config.ConstructorArgumentValues;
import org.springframework.beans.factory.support.ChildBeanDefinition;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.beans.factory.support.GenericBeanDefinition;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.boot.test.SpringBootMockServletContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.io.PathResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.UrlResource;
import org.springframework.core.io.VfsResource;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.context.support.GroovyWebApplicationContext;
import org.springframework.web.filter.CommonsRequestLoggingFilter;
import org.springframework.web.filter.ServletContextRequestLoggingFilter;
import org.xnio.Option;
import org.xnio.OptionMap;
import org.xnio.Pool;
import org.xnio.SslClientAuthMode;
import org.xnio.StreamConnection;
import org.xnio.XnioIoThread;
import org.xnio.XnioWorker;
import org.xnio.channels.EmptyStreamSourceChannel;
import org.xnio.channels.PushBackStreamChannel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      NotificationReceiver[] notificationReceiverArray0 = new NotificationReceiver[4];
      NotificationReceiver notificationReceiver0 = mock(NotificationReceiver.class, new ViolatedAssumptionAnswer());
      notificationReceiverArray0[0] = notificationReceiver0;
      notificationReceiverArray0[1] = notificationReceiverArray0[0];
      notificationReceiverArray0[2] = notificationReceiverArray0[1];
      int int0 = (-3135);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      notificationReceiverArray0[3] = notificationReceiverArray0[2];
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addNotificactionReceivers(notificationReceiverArray0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo0, servletContainerImpl0);
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManagerImpl0, deploymentInfo0, servletContainerImpl0);
      ErrorPages errorPages0 = deploymentImpl0.getErrorPages();
      deploymentImpl0.setErrorPages(errorPages0);
      HttpHandler httpHandler0 = deploymentImpl0.getHandler();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.LONG;
      int int1 = (-1444);
      int int2 = (-2341);
      int int3 = Integer.min(int1, int2);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      Boolean boolean0 = undertowEmbeddedServletContainerFactory0.directBuffers;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "Customizers must not be null";
      int int0 = 224;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "org.apache.logging.log4j.core.util.KeyValuePair";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = (-7);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      String[] stringArray0 = new String[7];
      stringArray0[0] = undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      Stack<DelegatingFilterProxyRegistrationBean> stack0 = new Stack<DelegatingFilterProxyRegistrationBean>();
      undertowEmbeddedServletContainerFactory0.setInitializers(stack0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 2569;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setWorkerThreads(int1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "x nE2,l";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      int int2 = (-2776);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int2);
      Ssl ssl0 = new Ssl();
      Ssl.ClientAuth ssl_ClientAuth0 = Ssl.ClientAuth.NEED;
      ssl0.setClientAuth(ssl_ClientAuth0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      String string0 = "Failed to create AccessLogHandler";
      MockFile mockFile0 = new MockFile(undertowEmbeddedServletContainerFactory0.accessLogPattern, string0);
      Path path0 = mockFile0.toPath();
      PathResource pathResource0 = new PathResource(path0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      HttpStatus httpStatus0 = HttpStatus.PRECONDITION_REQUIRED;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)34;
      byteArray0[0] = byte0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Ssl ssl0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = (-2491);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ErrorPage errorPage0 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      Integer integer0 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      String string0 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 76;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = null;
      ResourceLoader resourceLoader0 = null;
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
          boolean boolean0 = true;
          String string0 = "";
          undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
          UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
          UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
          undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
          undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
          undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
          EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
          byte[] byteArray0 = new byte[3];
          byte byte0 = (byte)40;
          byteArray0[0] = byte0;
          byte byte1 = (byte)0;
          byteArray0[1] = byte1;
          byte byte2 = (byte)0;
          byteArray0[2] = byte2;
          boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
          undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
          Integer integer0 = JLayeredPane.POPUP_LAYER;
          undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
          undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
          undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
          undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
          undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
          int int0 = (-1922);
          Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
          ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
          boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
          ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor61.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 13;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ArrayList<UndertowBuilderCustomizer> arrayList0 = new ArrayList<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) arrayList0;
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers);
      Boolean boolean0 = Boolean.TRUE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      boolean boolean1 = nonEmptySequence0.retainAll(undertowEmbeddedServletContainerFactory0.builderCustomizers);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence0);
      HttpStatus httpStatus0 = HttpStatus.IM_USED;
      Stream<UndertowBuilderCustomizer> stream0 = arrayList0.parallelStream();
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 275;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setTempDir(undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addLifecycleInterceptor(lifecycleInterceptor0);
      String string0 = "";
      WebAppContext webAppContext0 = new WebAppContext(string0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      List<String> list0 = webAppContext0.getOverrideDescriptors();
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addWelcomePages((Collection<String>) list0);
      ServletStackTraces servletStackTraces0 = ServletStackTraces.ALL;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setServletStackTraces(servletStackTraces0);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo4);
      Ssl ssl0 = new Ssl();
      String[] stringArray0 = new String[9];
      String string1 = "m[HH^QWI=E+X&uBp]";
      stringArray0[0] = string1;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[8] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      ssl0.setCiphers(stringArray0);
      boolean boolean0 = false;
      ssl0.setEnabled(boolean0);
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Resource location must not be null
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      Ssl ssl0 = new Ssl();
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean0 = servletDef0.getEnabled();
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaBase();
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setReadable(boolean1);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(mockFile0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int1 = (-1828);
      int int2 = (-687);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int2);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "c,#Xu$,9kdKl`#}'1Fp";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      LinkedBlockingDeque<UndertowDeploymentInfoCustomizer> linkedBlockingDeque0 = new LinkedBlockingDeque<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedBlockingDeque0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = (-403);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      undertowEmbeddedServletContainerFactory0.setPort(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "Precondition Failed";
      int int0 = (-2174);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 2821;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Ssl ssl0 = new Ssl();
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean0 = servletDef0.getEnabled();
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaBase();
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(mockFile0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
          ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
          ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
          undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = undertowEmbeddedServletContainerFactory0.accessLogPattern;
          int int0 = 1683;
          TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
          undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
          String string0 = "";
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor61.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      int int0 = 555;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      MimeMappings mimeMappings0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      } catch(IllegalArgumentException e) {
         //
         // Mappings must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean0 = servletDef0.getEnabled();
      boolean boolean1 = true;
      boolean boolean2 = false;
      int int0 = Boolean.compare(boolean1, boolean2);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      FailedContext failedContext0 = new FailedContext();
      File file0 = failedContext0.getCatalinaHome();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[3];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      RoutingHandler routingHandler0 = new RoutingHandler();
      String string0 = "2Wc&s~G'DvPYS[]$ee";
      String string1 = "";
      SecurePredicate securePredicate0 = new SecurePredicate();
      RoutingHandler routingHandler1 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      RoutingHandler routingHandler2 = routingHandler0.add(string0, string1, (Predicate) securePredicate0, (HttpHandler) routingHandler1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setContextPath(string0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
          boolean boolean0 = true;
          Class<UndertowEmbeddedServletContainerFactory.Initializer> class0 = UndertowEmbeddedServletContainerFactory.Initializer.class;
          Sequence sequence0 = new Sequence(class0);
          undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) sequence0;
          int int0 = (-1);
          Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
          undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
          GroovyWebApplicationContext groovyWebApplicationContext0 = new GroovyWebApplicationContext();
          undertowEmbeddedServletContainerFactory0.setResourceLoader(groovyWebApplicationContext0);
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
          undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor61.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = (-2310);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<Window> class0 = Window.class;
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      String string0 = "F";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers);
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        nonEmptySequence0.toArray(objectArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Class<DefaultServlet>[] classArray0 = (Class<DefaultServlet>[]) Array.newInstance(Class.class, 1);
      Class<DefaultServlet> class0 = DefaultServlet.class;
      classArray0[0] = class0;
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext(classArray0);
      String string0 = "o`V_|Q[";
      String string1 = "0.0.0.0";
      ConstructorArgumentValues constructorArgumentValues0 = new ConstructorArgumentValues();
      ConstructorArgumentValues constructorArgumentValues1 = new ConstructorArgumentValues(constructorArgumentValues0);
      MutablePropertyValues mutablePropertyValues0 = new MutablePropertyValues();
      ChildBeanDefinition childBeanDefinition0 = new ChildBeanDefinition(string1, annotationConfigApplicationContext0.MESSAGE_SOURCE_BEAN_NAME, constructorArgumentValues1, mutablePropertyValues0);
      GenericBeanDefinition genericBeanDefinition0 = new GenericBeanDefinition(childBeanDefinition0);
      annotationConfigApplicationContext0.registerBeanDefinition(string0, genericBeanDefinition0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(annotationConfigApplicationContext0);
      HttpStatus httpStatus0 = HttpStatus.METHOD_FAILURE;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string2 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(genericBeanDefinition0.AUTOWIRE_BY_TYPE);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      String string3 = "org.xnio.LocalSocketAddress";
      SpringBootMockServletContext springBootMockServletContext0 = new SpringBootMockServletContext(string3);
      ServletContext servletContext0 = springBootMockServletContext0.getContext(annotationConfigApplicationContext0.LIFECYCLE_PROCESSOR_BEAN_NAME);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, servletContext0);
      } catch(IllegalArgumentException e) {
         //
         // Servlet must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = (-1009);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "x\\X-7zl^AZMS$t=XQ";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = (-196);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletDef servletDef0 = new ServletDef();
      Map<String, String> map0 = servletDef0.getParameterMap();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = (-1640);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "\" data: ";
      DispatcherType dispatcherType0 = DispatcherType.ERROR;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, string0, dispatcherType0);
      ParallelWebappClassLoader parallelWebappClassLoader0 = new ParallelWebappClassLoader();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setClassLoader(parallelWebappClassLoader0);
      ContextClassLoaderSetupAction contextClassLoaderSetupAction0 = new ContextClassLoaderSetupAction(parallelWebappClassLoader0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addThreadSetupAction(contextClassLoaderSetupAction0);
      String string1 = "org.apache.logging.log4j.core.appender.RandomAccessFileAppender";
      UndertowEmbeddedServletContainerFactory.NO_CLASSES = undertowEmbeddedServletContainerFactory0.NO_CLASSES;
      String string2 = "86>ua?knG@?~5Wq&v";
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addLocaleCharsetMapping(string1, string2);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo4);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo3);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 1145;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ArrayList<UndertowBuilderCustomizer> arrayList0 = new ArrayList<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) arrayList0;
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers);
      Boolean boolean0 = Boolean.TRUE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      boolean boolean1 = nonEmptySequence0.retainAll(undertowEmbeddedServletContainerFactory0.builderCustomizers);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence0);
      HttpStatus httpStatus0 = HttpStatus.MULTIPLE_CHOICES;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      String string0 = "`[l86w2FZj=ucn>/";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Integer integer0 = undertowEmbeddedServletContainerFactory0.bufferSize;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean0 = servletDef0.getEnabled();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "M>";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = (-823);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      String string1 = "]Yv]";
      MockFile mockFile0 = new MockFile(string1);
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = mockFile0.setExecutable(boolean1, boolean2);
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(mockFile0);
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(mockFile0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      int int0 = 1419;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      InetAddress inetAddress0 = null;
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = 275;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      String[] stringArray0 = new String[9];
      String string0 = "m[HH^QWI=E+X&uBp]";
      stringArray0[0] = string0;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[8] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      ssl0.setCiphers(stringArray0);
      boolean boolean0 = false;
      ssl0.setEnabled(boolean0);
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Resource location must not be null
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = 67;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ErrorPage errorPage0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      CompilerConfiguration compilerConfiguration0 = CompilerConfiguration.DEFAULT;
      File file0 = compilerConfiguration0.getTargetDirectory();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      List<UndertowDeploymentInfoCustomizer> list0 = undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers;
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(list0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      GenericXmlApplicationContext genericXmlApplicationContext0 = null;
      try {
        genericXmlApplicationContext0 = new GenericXmlApplicationContext(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Location pattern must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      CrawlerSessionManagerValve crawlerSessionManagerValve0 = new CrawlerSessionManagerValve();
      Map<String, String> map0 = crawlerSessionManagerValve0.getClientIpSessionId();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean();
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletRegistrationBean1;
      undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspServlet jspServlet0 = new JspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Integer integer0 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      String string0 = ".";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      String string1 = "+kgC{~o+]b6\"!FYQ~^";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string1);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      int int0 = 3287;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = null;
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      int int0 = 1299;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = null;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      int int0 = 881;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      int int1 = 0;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int2 = (-2079);
      String string0 = ")!;U#G\"M4CT,o";
      RoutingHandler routingHandler0 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addAjpListener(int2, string0, (HttpHandler) routingHandler0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = string0;
      stringArray0[7] = string0;
      stringArray0[8] = string0;
      ssl0.setCiphers(stringArray0);
      int int3 = 1867;
      KeyManager[] keyManagerArray0 = new KeyManager[0];
      TrustManager[] trustManagerArray0 = new TrustManager[2];
      TrustManager trustManager0 = mock(TrustManager.class, new ViolatedAssumptionAnswer());
      trustManagerArray0[0] = trustManager0;
      trustManagerArray0[1] = trustManagerArray0[0];
      RoutingHandler routingHandler1 = new RoutingHandler();
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addHttpsListener(int3, undertowEmbeddedServletContainerFactory0.accessLogPattern, keyManagerArray0, trustManagerArray0, (HttpHandler) routingHandler1);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setDirectBuffers(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      int int4 = 0;
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setBuffersPerRegion(int4);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder4);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[3];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean0 = false;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addInnerHandlerChainWrapper(byteRangeHandler_Wrapper0);
      DefaultAuthorizationManager defaultAuthorizationManager0 = DefaultAuthorizationManager.INSTANCE;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setAuthorizationManager(defaultAuthorizationManager0);
      String string1 = null;
      DispatcherType dispatcherType0 = DispatcherType.ERROR;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addFilterUrlMapping(string1, string1, dispatcherType0);
      String string2 = "";
      AuthenticationMechanism authenticationMechanism0 = null;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addLastAuthenticationMechanism(string2, authenticationMechanism0);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo4);
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      LinkedHashSet<ErrorPage> linkedHashSet0 = new LinkedHashSet<ErrorPage>();
      undertowEmbeddedServletContainerFactory0.setErrorPages(linkedHashSet0);
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      int int1 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      int int0 = 1460;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ssl0.setKeyStore(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      UndertowEmbeddedServletContainerFactory.NO_CLASSES = undertowEmbeddedServletContainerFactory0.NO_CLASSES;
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      DeploymentInfo deploymentInfo0 = null;
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo0);
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      TrustManager[] trustManagerArray0 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      int int0 = (-2491);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ErrorPage errorPage0 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "";
      int int0 = 6051;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      int int0 = 0;
      String string0 = "/";
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      MetricsCollector metricsCollector0 = mock(MetricsCollector.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMetricsCollector(metricsCollector0);
      boolean boolean0 = true;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setInvalidateSessionOnLogout(boolean0);
      Class<ServletInfo> class0 = ServletInfo.class;
      Sequence sequence0 = new Sequence(class0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addSecurityConstraints((Collection<SecurityConstraint>) sequence0);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addSecurityRoles((Collection<String>) sequence0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo2, servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      String string0 = "Failed to create AccessLogHandler";
      MockFile mockFile0 = new MockFile(undertowEmbeddedServletContainerFactory0.accessLogDirectory, string0);
      Path path0 = mockFile0.toPath();
      PathResource pathResource0 = new PathResource(path0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      HttpStatus httpStatus0 = HttpStatus.UPGRADE_REQUIRED;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 2569;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setWorkerThreads(int1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "x nE2,l";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int1);
      Ssl ssl0 = new Ssl();
      Ssl.ClientAuth ssl_ClientAuth0 = Ssl.ClientAuth.NEED;
      ssl0.setClientAuth(ssl_ClientAuth0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      int int0 = (-1922);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string1 = "Connection";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string1);
      int int1 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[4];
      ServletListenerRegistrationBean<SynthDesktopIconUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthDesktopIconUI>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ServletListenerRegistrationBean<SynthDesktopIconUI> servletListenerRegistrationBean1 = new ServletListenerRegistrationBean<SynthDesktopIconUI>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean1;
      ServletListenerRegistrationBean<SynthDesktopIconUI> servletListenerRegistrationBean2 = new ServletListenerRegistrationBean<SynthDesktopIconUI>();
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletListenerRegistrationBean2;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[3] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "";
      int int0 = (-1265);
      String string1 = "";
      boolean boolean0 = false;
      HttpHandler httpHandler0 = null;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<ExecutionException> class0 = ExecutionException.class;
      String string2 = "UndertowDeploymentInfoCustomizers must not be null";
      ErrorPage errorPage0 = new ErrorPage(class0, string2);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      String string3 = "";
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      int int1 = 25165824;
      String string4 = Integer.toUnsignedString(int1);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setContextPath(string1);
      MockFile mockFile0 = new MockFile(string0);
      Path path0 = mockFile0.toPath();
      ConcurrentMap<String, Object> concurrentMap0 = deploymentInfo0.getServletContextAttributeBackingMap();
      String string5 = "Content-Type";
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("static");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      Ssl ssl0 = new Ssl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Stack<DelegatingFilterProxyRegistrationBean> stack0 = new Stack<DelegatingFilterProxyRegistrationBean>();
      undertowEmbeddedServletContainerFactory0.setInitializers(stack0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      long long0 = (-923L);
      System.setCurrentTimeMillis(long0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean0 = true;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addOuterHandlerChainWrapper(byteRangeHandler_Wrapper0);
      ServletExtension servletExtension0 = mock(ServletExtension.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addServletExtension(servletExtension0);
      Class<UndertowEmbeddedServletContainerFactory.Initializer> class0 = UndertowEmbeddedServletContainerFactory.Initializer.class;
      InstanceFactory<UndertowEmbeddedServletContainerFactory.Initializer> instanceFactory0 = null;
      ServletContainerInitializerInfo servletContainerInitializerInfo0 = new ServletContainerInitializerInfo(class0, instanceFactory0, undertowEmbeddedServletContainerFactory0.NO_CLASSES);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addServletContainerInitalizer(servletContainerInitializerInfo0);
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setServletContextAttributeBackingMap(concurrentHashMap0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      Stack<DelegatingFilterProxyRegistrationBean> stack0 = new Stack<DelegatingFilterProxyRegistrationBean>();
      Integer integer0 = Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      undertowEmbeddedServletContainerFactory0.setInitializers(stack0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      String string0 = "Failed to create AccessLogHandler";
      MockFile mockFile0 = new MockFile(undertowEmbeddedServletContainerFactory0.accessLogDirectory, string0);
      Path path0 = mockFile0.toPath();
      PathResource pathResource0 = new PathResource(path0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      HttpStatus httpStatus0 = HttpStatus.UPGRADE_REQUIRED;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = new io.undertow.servlet.api.ErrorPage(string0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      TrustManager[] trustManagerArray0 = SslContextFactory.TRUST_ALL_CERTS;
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      String string0 = "org.apache.logging.log4j.core.util.KeyValuePair";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("src/main/webapp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/undertow-docbase.0.-7");
      String string1 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile1, string1);
      int int0 = (-7);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      String[] stringArray0 = new String[7];
      stringArray0[0] = undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 2569;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setWorkerThreads(int1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      int int2 = (-2776);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int2);
      Ssl ssl0 = new Ssl();
      Ssl.ClientAuth ssl_ClientAuth0 = Ssl.ClientAuth.WANT;
      ssl0.setClientAuth(ssl_ClientAuth0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)40;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      int int0 = (-1922);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = "/P^Y{f^";
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.server.handlers.resource.URLResource", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      int int0 = 13;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ArrayList<UndertowBuilderCustomizer> arrayList0 = new ArrayList<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) arrayList0;
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers);
      Boolean boolean0 = Boolean.TRUE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      boolean boolean1 = nonEmptySequence0.retainAll(undertowEmbeddedServletContainerFactory0.builderCustomizers);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence0);
      HttpStatus httpStatus0 = HttpStatus.IM_USED;
      Stream<UndertowBuilderCustomizer> stream0 = arrayList0.parallelStream();
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
  }
}
