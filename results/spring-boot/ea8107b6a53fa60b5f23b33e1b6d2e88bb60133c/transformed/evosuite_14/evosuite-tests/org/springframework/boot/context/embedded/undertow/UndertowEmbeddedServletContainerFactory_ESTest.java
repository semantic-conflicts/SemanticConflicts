/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 04:13:10 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.security.api.NotificationReceiver;
import io.undertow.security.impl.CachedAuthenticatedSessionMechanism;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.accesslog.AccessLogHandler;
import io.undertow.server.handlers.resource.Resource;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.MimeMapping;
import io.undertow.servlet.api.SecurityConstraint;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.InMemorySessionManagerFactory;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.handlers.ServletRequestContext;
import io.undertow.servlet.spec.ServletContextImpl;
import io.undertow.servlet.util.DefaultClassIntrospector;
import java.awt.HeadlessException;
import java.awt.ScrollPane;
import java.io.File;
import java.io.OutputStreamWriter;
import java.net.MalformedURLException;
import java.net.StandardProtocolFamily;
import java.net.URL;
import java.security.NoSuchAlgorithmException;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.management.ObjectName;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalRootPaneUI;
import liquibase.integration.servlet.LiquibaseStatusServlet;
import org.apache.catalina.ContainerListener;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.ApplicationServletRegistration;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.core.StandardHost;
import org.apache.catalina.core.StandardWrapper;
import org.apache.catalina.startup.FailedContext;
import org.apache.jasper.servlet.JspCServletContext;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.eclipse.jetty.server.HandlerContainer;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlets.CloseableDoSFilter;
import org.eclipse.jetty.servlets.MultiPartFilter;
import org.eclipse.jetty.util.resource.ResourceCollection;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpStatus;
import org.springframework.util.AntPathMatcher;
import org.springframework.web.filter.HiddenHttpMethodFilter;
import org.xnio.Option;
import org.xnio.SslClientAuthMode;
import org.xnio.XnioWorker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      String string1 = "c.(Zb}";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string1;
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      int int0 = (-18);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      String string0 = "";
      int int0 = 329;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[2];
      ObjectName[] objectNameArray0 = standardHost0.getChildren();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      String string0 = "?";
      ErrorPage errorPage0 = new ErrorPage(string0);
      String string1 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      io.undertow.servlet.api.ErrorPage errorPage2 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setServerName(string0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo2);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      String string2 = "FV0";
      String string3 = "UndertowDeploymentInfoCustomizers must not be null";
      String string4 = "F+?g";
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn(string2, string3, undertowEmbeddedServletContainerFactory0.accessLogPattern, string4, string3).when(undertowBuilderCustomizer0).toString();
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      Servlet servlet0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setClassIntrospecter(defaultClassIntrospector0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setSendCustomReasonPhraseOnError(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      boolean boolean0 = true;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[8] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo3 = deploymentInfo0.addSecurityRoles(stringArray0);
      DeploymentInfo deploymentInfo4 = deploymentInfo2.addSecurityWrapper(byteRangeHandler_Wrapper0);
      int int0 = 2423;
      DeploymentInfo deploymentInfo5 = deploymentInfo4.setDefaultSessionTimeout(int0);
      Stack<ServletInfo> stack0 = new Stack<ServletInfo>();
      DeploymentInfo deploymentInfo6 = deploymentInfo4.addServlets((Collection<ServletInfo>) stack0);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo6);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo1);
      RoutingHandler routingHandler0 = new RoutingHandler();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 2538;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 79;
      boolean boolean0 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      String string0 = "FJa)";
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, undertowEmbeddedServletContainerFactory0.accessLogPattern, string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(jvmRouteHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "Z-f-r";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 911;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      AuthenticationMode authenticationMode0 = AuthenticationMode.PRO_ACTIVE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setAuthenticationMode(authenticationMode0);
      String string0 = null;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePage(string0);
      Sequence sequence0 = new Sequence();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get(string0, namespace0, string0);
      int int1 = 1764;
      InMemorySessionManagerFactory inMemorySessionManagerFactory0 = new InMemorySessionManagerFactory(int1);
      DeploymentInfo deploymentInfo3 = deploymentInfo0.setSessionManagerFactory(inMemorySessionManagerFactory0);
      BeanElement beanElement0 = new BeanElement(qName0);
      int int2 = 0;
      BeanMetaData beanMetaData0 = mock(BeanMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(int2).when(beanMetaData0).attributeCount();
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      boolean boolean0 = sequence0.removeAll(beanAttributeList0);
      DeploymentInfo deploymentInfo4 = deploymentInfo2.addNotificationReceivers(sequence0);
      ServletExtension servletExtension0 = mock(ServletExtension.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo5 = deploymentInfo4.addServletExtension(servletExtension0);
      DeploymentInfo deploymentInfo6 = deploymentInfo5.addErrorPages((Collection<io.undertow.servlet.api.ErrorPage>) sequence0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo5, servletContextInitializerArray0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(sequence0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      Integer integer0 = undertowEmbeddedServletContainerFactory0.workerThreads;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      int int0 = 2830;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      Integer integer0 = Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      String string0 = " points to a file";
      stringArray0[2] = string0;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[8] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addSecurityRoles(stringArray0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePages(stringArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      LiquibaseStatusServlet liquibaseStatusServlet0 = new LiquibaseStatusServlet();
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(hashMap0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer1 = new InitParameterConfiguringServletContextInitializer(hashMap0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer1;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) servletRegistrationBean1;
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean(liquibaseStatusServlet0, undertowEmbeddedServletContainerFactory0.useForwardHeaders, stringArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) servletRegistrationBean2;
      ServletRegistrationBean servletRegistrationBean3 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[6] = (ServletContextInitializer) servletRegistrationBean3;
      ServletRegistrationBean servletRegistrationBean4 = new ServletRegistrationBean();
      servletContextInitializerArray0[7] = (ServletContextInitializer) servletRegistrationBean4;
      CloseableDoSFilter closeableDoSFilter0 = new CloseableDoSFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[3];
      servletRegistrationBeanArray0[0] = servletRegistrationBean3;
      servletRegistrationBeanArray0[1] = servletRegistrationBean4;
      servletRegistrationBeanArray0[2] = servletRegistrationBean4;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean(closeableDoSFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[8] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "7s ~Z";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      Compression compression0 = undertowEmbeddedServletContainerFactory0.getCompression();
      undertowEmbeddedServletContainerFactory0.setCompression(compression0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = (-2009);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[7];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[2];
      ObjectName[] objectNameArray0 = standardHost0.getChildren();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      String string0 = "?";
      ErrorPage errorPage0 = new ErrorPage(string0);
      String string1 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      io.undertow.servlet.api.ErrorPage errorPage2 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setClassIntrospecter(defaultClassIntrospector0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo2);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(undertowBuilderCustomizer0).toString();
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      Servlet servlet0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
      ServletRegistrationBean servletRegistrationBean0 = null;
      try {
        servletRegistrationBean0 = new ServletRegistrationBean(servlet0, boolean0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Servlet must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "Z-f-r";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      String string0 = "f:#Ler+:{GhOT~\"aoc";
      int int0 = 1681;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      WebXml webXml0 = new WebXml();
      Map<String, String> map0 = webXml0.getTaglibs();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = (-4614);
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Integer integer0 = null;
          undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
          Ssl ssl0 = new Ssl();
          SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = null;
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      boolean boolean0 = errorPage0.equals(undertowEmbeddedServletContainerFactory0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setContextPath(string0);
      String string1 = "Gi\\&d>)PlP8j?LPV";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      StandardContext standardContext0 = new StandardContext();
      Boolean boolean0 = standardContext0.getFailCtxIfServletStartFails();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      String string2 = undertowEmbeddedServletContainerFactory0.getListenAddress();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
      Class<StandardProtocolFamily> class0 = StandardProtocolFamily.class;
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "Request must not be null";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      File file0 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager1 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager1 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = "";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string0;
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string0;
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath, int0);
      JspServlet jspServlet0 = new JspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.valueOf(boolean0);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer1 = Opcodes.NULL;
      String string0 = "d8D VB9^w.\"}mj=\\i";
      try { 
        Integer.decode(string0);
      } catch(NumberFormatException e) {
         //
         // For input string: \"d8D VB9^w.\"}mj=\\i\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      String string1 = "9sY0-l(2nHs>y";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string1);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Boolean boolean0 = Boolean.valueOf(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      boolean boolean1 = Boolean.logicalOr(undertowEmbeddedServletContainerFactory0.useForwardHeaders, undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 1081;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Stack<UndertowDeploymentInfoCustomizer> stack0 = new Stack<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(stack0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      int int0 = 1702;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      MimeMappings mimeMappings0 = MimeMappings.DEFAULT;
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      int int1 = 421;
      Integer integer0 = new Integer(int1);
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      int int0 = (-449);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = undertowEmbeddedServletContainerFactory0.ioThreads;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = 4444;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      TrustManager[] trustManagerArray0 = undertowEmbeddedServletContainerFactory0.getTrustManagers();
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Class<Integer> class0 = Integer.class;
      String string0 = "";
      Class<ScrollPane> class1 = ScrollPane.class;
      Option<ScrollPane> option0 = Option.simple((Class<?>) class0, string0, class1);
      int int1 = 2602;
      ScrollPane scrollPane0 = null;
      try {
        scrollPane0 = new ScrollPane(int1);
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int0 = 3;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      RoutingHandler routingHandler0 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      String string0 = "";
      String string1 = null;
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, string0, string1);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setHandler(jvmRouteHandler0);
      int int1 = 0;
      String string2 = "[type=";
      try { 
        SSLContext.getInstance(string2);
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = new Ssl();
      String string0 = "";
      ssl0.setKeyStoreType(string0);
      int int0 = 716;
      Undertow.Builder undertow_Builder0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = 1613;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = null;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      RoutingHandler routingHandler0 = new RoutingHandler();
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setHandler(routingHandler0);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setDirectBuffers(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      int int1 = 0;
      String string0 = "P\\ju!";
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addHttpListener(int1, string0);
      int int2 = 0;
      String string1 = "Access log directory is not set";
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addAjpListener(int2, string1, (HttpHandler) routingHandler0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      int int0 = 4223;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      int int1 = 88;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      int int0 = (-638);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      AntPathMatcher antPathMatcher0 = new AntPathMatcher(string0);
      String string1 = "";
      String string2 = "";
      Map<String, String> map0 = antPathMatcher0.extractUriTemplateVariables(string1, string2);
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      DefaultServlet defaultServlet0 = new DefaultServlet();
      String[] stringArray0 = new String[8];
      stringArray0[0] = defaultServlet0.RESOLVE_AGAINST_CONTEXT_ROOT;
      stringArray0[1] = defaultServlet0.ALLOWED_EXTENSIONS;
      stringArray0[2] = defaultServlet0.RESOLVE_AGAINST_CONTEXT_ROOT;
      stringArray0[3] = defaultServlet0.DIRECTORY_LISTING;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = antPathMatcher0.DEFAULT_PATH_SEPARATOR;
      stringArray0[6] = defaultServlet0.ALLOWED_EXTENSIONS;
      stringArray0[7] = defaultServlet0.DISALLOWED_EXTENSIONS;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(defaultServlet0, undertowEmbeddedServletContainerFactory0.useForwardHeaders, stringArray0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) servletRegistrationBean0;
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean1 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletListenerRegistrationBean1;
      undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = undertowEmbeddedServletContainerFactory1.getSsl();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = "        serverName";
      MockFile mockFile0 = new MockFile(string0);
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = (File) mockFile0;
      boolean boolean1 = mockFile0.delete();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      int int0 = 263;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = (-481);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "";
      int int1 = 2646;
      undertowEmbeddedServletContainerFactory0.setPort(int1);
      undertowEmbeddedServletContainerFactory0.setContextPath(string0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      int int0 = 2364;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String[] stringArray0 = null;
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext(stringArray0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(classPathXmlApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      int int0 = 911;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      AuthenticationMode authenticationMode0 = AuthenticationMode.PRO_ACTIVE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setAuthenticationMode(authenticationMode0);
      String string0 = null;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePage(string0);
      Sequence sequence0 = new Sequence();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get(string0, namespace0, string0);
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanMetaData beanMetaData0 = mock(BeanMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(beanMetaData0).attributeCount();
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      boolean boolean0 = sequence0.removeAll(beanAttributeList0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addNotificationReceivers(sequence0);
      ServletExtension servletExtension0 = mock(ServletExtension.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addServletExtension(servletExtension0);
      DeploymentInfo deploymentInfo5 = deploymentInfo4.addErrorPages((Collection<io.undertow.servlet.api.ErrorPage>) sequence0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(sequence0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          StandardHost standardHost0 = new StandardHost();
          ContainerListener[] containerListenerArray0 = standardHost0.findContainerListeners();
          File file0 = standardHost0.getConfigBaseFile();
          UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
          int int0 = 2521;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          String string0 = null;
          Compression compression0 = null;
          undertowEmbeddedServletContainerFactory0.setCompression(compression0);
          undertowEmbeddedServletContainerFactory0.accessLogPattern = string0;
          boolean boolean0 = true;
          undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
          boolean boolean1 = false;
          undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor64.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      Integer integer0 = Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      String string0 = " points to a file";
      stringArray0[2] = string0;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[8] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addSecurityRoles(stringArray0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePages(stringArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      LiquibaseStatusServlet liquibaseStatusServlet0 = new LiquibaseStatusServlet();
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(hashMap0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer1 = new InitParameterConfiguringServletContextInitializer(hashMap0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer1;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) servletRegistrationBean1;
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean(liquibaseStatusServlet0, undertowEmbeddedServletContainerFactory0.useForwardHeaders, stringArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) servletRegistrationBean2;
      ServletRegistrationBean servletRegistrationBean3 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[6] = (ServletContextInitializer) servletRegistrationBean3;
      ServletRegistrationBean servletRegistrationBean4 = new ServletRegistrationBean();
      servletContextInitializerArray0[7] = (ServletContextInitializer) servletRegistrationBean4;
      CloseableDoSFilter closeableDoSFilter0 = new CloseableDoSFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[3];
      servletRegistrationBeanArray0[0] = servletRegistrationBean3;
      servletRegistrationBeanArray0[1] = servletRegistrationBean4;
      servletRegistrationBeanArray0[2] = servletRegistrationBean4;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean(closeableDoSFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[8] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "";
      int int0 = 99;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      SslClientAuthMode sslClientAuthMode1 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      HttpStatus httpStatus0 = HttpStatus.INSUFFICIENT_SPACE_ON_RESOURCE;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, string0);
      boolean boolean0 = errorPage0.equals(httpStatus0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[2];
      ObjectName[] objectNameArray0 = standardHost0.getChildren();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      String string0 = "?";
      ErrorPage errorPage0 = new ErrorPage(string0);
      String string1 = errorPage0.getExceptionName();
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      io.undertow.servlet.api.ErrorPage errorPage2 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setClassIntrospecter(defaultClassIntrospector0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo2);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      String string2 = "Popping params";
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string2, undertowEmbeddedServletContainerFactory0.accessLogPattern, string2, string1).when(undertowBuilderCustomizer0).toString();
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      Servlet servlet0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string1;
      stringArray0[4] = string1;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[6] = string0;
      stringArray0[7] = string1;
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "Unable to create context {}";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) nonEmptySequence0;
      int int1 = (-994);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      StandardWrapper standardWrapper0 = new StandardWrapper();
      FailedContext failedContext0 = new FailedContext();
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      HandlerContainer handlerContainer0 = null;
      String string0 = "G.$:/WL/'|#";
      boolean boolean0 = false;
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(handlerContainer0, string0, boolean0, undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      ContextHandler.Context contextHandler_Context0 = servletContextHandler0.getServletContext();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, contextHandler_Context0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$Initializer", e);
      }
  }
}
