/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 21:54:00 GMT 2020
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;
import com.amazonaws.auth.BasicSessionCredentials;
import com.amazonaws.auth.ClasspathPropertiesFileCredentialsProvider;
import com.amazonaws.auth.STSAssumeRoleSessionCredentialsProvider;
import com.amazonaws.auth.SystemPropertiesCredentialsProvider;
import com.amazonaws.auth.WebIdentityFederationSessionCredentialsProvider;
import com.amazonaws.regions.RegionMetadata;
import com.amazonaws.regions.RegionUtils;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.Resource;
import com.netflix.simianarmy.aws.AWSResource;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.VolumeTaggingMonkey;
import com.netflix.simianarmy.aws.janitor.crawler.ASGJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSSnapshotJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSVolumeJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.LaunchConfigJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.rule.ami.UnusedImageRule;
import com.netflix.simianarmy.aws.janitor.rule.instance.OrphanedInstanceRule;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.BasicConfiguration;
import com.netflix.simianarmy.basic.BasicRecorderEvent;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.conformity.BasicConformityMonkey;
import com.netflix.simianarmy.basic.conformity.BasicConformityMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.conformity.ConformityMonkey;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorMonkey;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import com.netflix.simianarmy.janitor.Rule;
import java.util.Calendar;
import java.util.List;
import java.util.Properties;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      int int0 = (-4212);
      int int1 = (-2048);
      int int2 = (-1546);
      int int3 = (-1);
      int int4 = 300;
      int int5 = 3;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(int1, basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, int2, int2, int1, int3, int1, int2, int4, int4, int5);
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1546
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      VolumeTaggingMonkey volumeTaggingMonkey0 = null;
      try {
        volumeTaggingMonkey0 = new VolumeTaggingMonkey(basicVolumeTaggingMonkeyContext0);
      } catch(RuntimeException e) {
         //
         // Unable to load AWS credentials from any provider in the chain
         //
         verifyException("com.amazonaws.auth.AWSCredentialsProviderChain", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "e 9BW(.y,<A:c";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      Rule rule0 = null;
      BasicJanitorRuleEngine basicJanitorRuleEngine1 = basicJanitorRuleEngine0.addRule(rule0);
      String string1 = "";
      String string2 = "i05!Z(^c";
      String string3 = "=`PaNDhz";
      String string4 = null;
      BasicSessionCredentials basicSessionCredentials0 = new BasicSessionCredentials(string2, string3, string4);
      String string5 = "lMh;O;>[r@)Jg}n ";
      STSAssumeRoleSessionCredentialsProvider sTSAssumeRoleSessionCredentialsProvider0 = new STSAssumeRoleSessionCredentialsProvider(basicSessionCredentials0, string0, string5);
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      ClientConfiguration clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
      AWSClient aWSClient0 = new AWSClient(string1, sTSAssumeRoleSessionCredentialsProvider0, clientConfiguration1);
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = null;
      try {
        simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amazonaws.util.AwsHostNameUtils", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      String string0 = "";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      AWSClient aWSClient0 = new AWSClient(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, clientConfiguration0);
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      MonkeyCalendar monkeyCalendar0 = null;
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicVolumeTaggingMonkeyContext0.configuration();
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(monkeyConfiguration0);
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, launchConfigJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, localDbRecorder0);
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "+YStp!(B'a";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      AWSClient aWSClient0 = null;
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = null;
      try {
        launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      BasicConformityMonkey basicConformityMonkey0 = new BasicConformityMonkey(basicConformityMonkeyContext0);
      ConformityMonkey.Type conformityMonkey_Type0 = basicConformityMonkey0.type();
      JanitorMonkey.EventTypes janitorMonkey_EventTypes0 = JanitorMonkey.EventTypes.MARK_RESOURCE;
      String string0 = "com.amazonaws.services.identitymanagement.model.UpdateSSHPublicKeyRequest";
      String string1 = "&\\[4N7iganF,-i<";
      long long0 = 2080L;
      BasicRecorderEvent basicRecorderEvent0 = new BasicRecorderEvent(conformityMonkey_Type0, janitorMonkey_EventTypes0, string0, string1, long0);
      String string2 = null;
      MonkeyRecorder.Event monkeyRecorder_Event0 = basicRecorderEvent0.addField(basicConformityMonkeyContext0.GLOBAL_OWNER_TAGKEY, string2);
      basicJanitorMonkeyContext0.reportEvent(basicRecorderEvent0);
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "simianarmy.janitor.rule.deleteOnTerminationRule.enabled";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      ClientConfiguration clientConfiguration0 = null;
      ClientConfiguration clientConfiguration1 = null;
      try {
        clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.amazonaws.ClientConfiguration", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "simianarmy.janitor.rule.suspendedASGRule.retentionDays";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      AWSClient aWSClient0 = new AWSClient(string0);
      ASGJanitorCrawler aSGJanitorCrawler0 = new ASGJanitorCrawler(aWSClient0);
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, aSGJanitorCrawler0.ASG_FIELD_ELBS);
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      Calendar calendar0 = basicCalendar0.now();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      String string1 = "VAppConfigSpec";
      basicJanitorMonkeyContext0.exportCredentials(basicConformityMonkeyContext0.GLOBAL_OWNER_TAGKEY, string1);
      AWSResource aWSResource0 = new AWSResource();
      Resource resource0 = aWSResource0.withDescription(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY);
      boolean boolean0 = basicJanitorRuleEngine0.isValid(resource0);
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, aSGJanitorCrawler0, simpleDBJanitorResourceTracker0, basicCalendar0, monkeyConfiguration0, monkeyRecorder0);
      String string2 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context1 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      String string0 = "";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      String string1 = "nI>X%/,dIX2/b\\";
      ClasspathPropertiesFileCredentialsProvider classpathPropertiesFileCredentialsProvider0 = new ClasspathPropertiesFileCredentialsProvider();
      AWSClient aWSClient0 = new AWSClient(string1, classpathPropertiesFileCredentialsProvider0);
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = null;
      try {
        simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string1);
      } catch(IllegalArgumentException e) {
         //
         // java.net.URISyntaxException: Illegal character in authority at index 8: https://sdb.nI>X%/,dIX2/b\\.amazonaws.com
         //
         verifyException("com.amazonaws.AmazonWebServiceClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      RegionMetadata regionMetadata1 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata1);
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      String string0 = "";
      JanitorRuleEngine janitorRuleEngine0 = null;
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      ClientConfiguration clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
      AWSClient aWSClient0 = new AWSClient(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, clientConfiguration1);
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      MonkeyConfiguration monkeyConfiguration1 = basicVolumeTaggingMonkeyContext0.configuration();
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string0);
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, instanceJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration1, simpleDBRecorder0);
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "E%Sdo$1:}G|$HwI2v";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      AWSClient aWSClient0 = new AWSClient(string0);
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSSnapshotJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, monkeyRecorder0);
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "eieW[&Q";
      JanitorRuleEngine janitorRuleEngine0 = null;
      JanitorCrawler janitorCrawler0 = null;
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      MonkeyRecorder monkeyRecorder0 = null;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, janitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, monkeyRecorder0);
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      String string0 = "|3X516&/G1GOwD";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      SystemPropertiesCredentialsProvider systemPropertiesCredentialsProvider0 = new SystemPropertiesCredentialsProvider();
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      ClientConfiguration clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
      AWSClient aWSClient0 = new AWSClient(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, systemPropertiesCredentialsProvider0, clientConfiguration1);
      EBSVolumeJanitorCrawler eBSVolumeJanitorCrawler0 = new EBSVolumeJanitorCrawler(aWSClient0);
      MonkeyCalendar monkeyCalendar0 = null;
      int int0 = 141;
      ClientConfiguration clientConfiguration2 = clientConfiguration0.withConnectionTimeout(int0);
      Protocol protocol0 = Protocol.HTTPS;
      clientConfiguration1.setProtocol(protocol0);
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      BasicConfiguration basicConfiguration0 = new BasicConfiguration(xMLDSigRI0);
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, clientConfiguration0.DEFAULT_USER_AGENT);
      ClientConfiguration clientConfiguration3 = clientConfiguration2.withPreemptiveBasicProxyAuth(clientConfiguration0.DEFAULT_USE_GZIP);
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSVolumeJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, basicConfiguration0, simpleDBRecorder0);
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      clientConfiguration1.setUserAgent(clientConfiguration2.DEFAULT_USER_AGENT);
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      MonkeyCalendar monkeyCalendar2 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      JanitorRuleEngine janitorRuleEngine1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      JanitorRuleEngine janitorRuleEngine2 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext0.resourceTracker();
      MonkeyCalendar monkeyCalendar3 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      String string1 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      MonkeyCalendar monkeyCalendar4 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "simianarmy.properties";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      JanitorCrawler janitorCrawler0 = null;
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string0);
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      String string1 = "H}QV@zDvExzvf}<";
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string1);
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, janitorCrawler0, simpleDBJanitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, simpleDBRecorder0);
      JanitorCrawler janitorCrawler1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
  }
}
