/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:57:47 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.Charset;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string0 = null;
      httpConnection_KeyVal0.key = httpConnection_KeyVal0.value;
      String string1 = "";
      String string2 = "7@5/68";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "Unexpected token [%s] when in state [%s]";
      AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>(httpConnection_Response1.charset, httpConnection_Response1.charset);
      String string1 = "";
      httpConnection_Response0.statusMessage = string1;
      boolean boolean0 = httpConnection_Response1.hasCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.header(httpConnection_Response0.charset);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection2 = httpConnection0.method(connection_Method0);
      String string0 = "blockquote";
      String string1 = null;
      String string2 = "K0sx-zi}Kx9@$V";
      boolean boolean1 = true;
      Connection connection3 = httpConnection0.followRedirects(boolean1);
      String string3 = HttpConnection.encodeUrl(string2);
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      String string4 = "<J7,";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string1, string4);
      boolean boolean2 = linkedHashSet0.add(httpConnection_KeyVal0);
      Connection connection4 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean3 = httpConnection_Request0.followRedirects();
      Collection<Connection.KeyVal> collection0 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      String string0 = "optgroup";
      String string1 = "http";
      Connection connection2 = connection1.data(string0, string1);
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = httpConnection0.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = hashMap0.put(string0, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "(h1|H;k</8AS=L";
      Connection connection0 = httpConnection0.maxBodySize(httpConnection0.HTTP_TEMP_REDIR);
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: (h1|H;k</8AS=L
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      httpConnection_Request0.data = (Collection<Connection.KeyVal>) linkedList0;
      boolean boolean0 = true;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.contentType();
      int int0 = 97;
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(int0);
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection_Response1.MAX_REDIRECTS);
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap1);
      Connection.KeyVal connection_KeyVal0 = linkedList0.pollLast();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key(string2);
      String string4 = httpConnection_KeyVal3.value();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string5 = ";";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string5);
      httpConnection_KeyVal3.key = httpConnection_KeyVal1.value;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string6 = HttpConnection.Response.getRequestCookieString(httpConnection0.req);
      String string7 = httpConnection_Response0.cookie(string4);
      String string8 = httpConnection_Response0.contentType();
      try { 
        httpConnection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      Parser parser0 = Parser.xmlParser();
      httpConnection_Request1.parser = parser0;
      String string0 = "seamless";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      String string1 = "#KX=gpT`eg";
      String string2 = httpConnection_Request1.header(string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string3 = "/G^b>`iq]s_]wM>5";
      httpConnection_KeyVal0.value = string3;
      String string4 = httpConnection_KeyVal0.toString();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      String string5 = ": ";
      String string6 = "+";
      Connection.Request connection_Request1 = httpConnection_Request1.cookie(string5, string6);
      Connection.Request connection_Request2 = httpConnection_Request1.ignoreHttpErrors(httpConnection_Request1.ignoreHttpErrors);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "application/xhtml+xml";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "datalist";
      stringArray0[4] = string4;
      String string5 = "Cf0X18%3c";
      stringArray0[5] = string5;
      String string6 = "XZs'*n1!dv";
      stringArray0[6] = string6;
      String string7 = "{N$zWA36?";
      String string8 = "hF$P5T'l7WWZ&9l}";
      Connection connection0 = httpConnection0.userAgent(string8);
      stringArray0[7] = string7;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      EvoSuiteFile evoSuiteFile0 = null;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string1 = "S=Sur\"96m4EdHNUb9";
      String string2 = ":matchesOwn(%s";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string2);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      httpConnection_Response0.req = connection_Request0;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      Connection connection1 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection2 = httpConnection0.data(map0);
      String string3 = null;
      httpConnection_KeyVal0.key = string3;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string4 = HttpConnection.Response.getRequestCookieString(httpConnection0.req);
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      Connection connection1 = connection0.ignoreHttpErrors(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection2 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = httpConnection0.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
          int int0 = 1955;
          HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
          HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
          Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Accept-Encoding";
      Connection.Request connection_Request0 = httpConnection_Request0.removeHeader(string0);
      int int0 = httpConnection_Request0.timeout();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean1 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "9mMSDnc_E";
      String string1 = "Children collection to be inserted must not be null.";
      Connection connection0 = httpConnection0.data(string0, string1);
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 2549;
      Connection connection0 = httpConnection0.timeout(int0);
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      String string0 = "marquee";
      boolean boolean0 = true;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0, boolean0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      HttpConnection.Response.writePost(linkedHashSet0, filterOutputStream0);
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "fLdE3A`o";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      String string1 = "IUn{%ZBQt ISgFsa";
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection_KeyVal2.key(string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "i";
      String string1 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string2 = "+Dnppi";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      String string3 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal1.value(string3);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Up";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Up
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-1689);
      Parser parser0 = Parser.htmlParser();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      String[] stringArray0 = new String[4];
      String string0 = "<s5ZrJ5S6v@N0S?)%}";
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      String string0 = "z]";
      httpConnection_KeyVal0.key = string0;
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "wtMM";
      String string1 = "selected";
      httpConnection_KeyVal0.key = string1;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      String string3 = "dDd}=/";
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = new HttpConnection.KeyVal(string3, string4);
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-597);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "application/xhtml+xml";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "datalist";
      stringArray0[4] = string4;
      String string5 = "Cf0X18%3c";
      stringArray0[5] = string5;
      String string6 = "XZs'*n1!dv";
      stringArray0[6] = string6;
      String string7 = "{N$zWA36?";
      stringArray0[7] = string7;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      String string0 = "}RGhL}`;6DG.|";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.POST;
      String string2 = "vJ]m";
      String string3 = HttpConnection.encodeUrl(string2);
      Connection connection0 = httpConnection0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection connection0 = httpConnection0.request(connection_Request0);
      String[] stringArray0 = new String[8];
      String string0 = " \\tfp|pQj";
      stringArray0[0] = string0;
      String string1 = "QPwzx7.< \"s7";
      stringArray0[1] = string1;
      String string2 = "http:/";
      stringArray0[2] = string2;
      String string3 = "AH\"W>yBtv=.-MG^%t";
      stringArray0[3] = string3;
      String string4 = "Cookie map must not be null";
      stringArray0[4] = string4;
      String string5 = "!";
      stringArray0[5] = string5;
      String string6 = "nLV{R~mkNR^p>\"]c";
      stringArray0[6] = string6;
      String string7 = "KW]iO`-~v8+:0tQc";
      stringArray0[7] = string7;
      Connection connection1 = httpConnection0.data(stringArray0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection2 = httpConnection0.method(connection_Method0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "org.jsoup.select.Evaluator$IndexGreaterThan";
      Connection connection0 = httpConnection0.header(string0, string0);
      String string1 = "Header name must not be empty";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Header name must not be empty
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = 303;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "E^g6;s4";
      String string1 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection0 = httpConnection0.data(map0);
      // Undeclared exception!
      try { 
        MockURL.URL(string0, string1, httpConnection_KeyVal0.key);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "; ";
      String string1 = "";
      Connection connection0 = httpConnection0.data(string0, string1);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.cookies(hashMap0);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      String string0 = "Header name must not be empty";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Header name must not be empty
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "n}@,|>u ^7_(]nF";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Map<String, String> map0 = attributes1.dataset();
      Connection connection0 = httpConnection0.data(map0);
      String string1 = "[%s^=%s]";
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection0.header(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Header value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      String string0 = "input";
      Connection connection0 = httpConnection0.data(string0, string0);
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "application/xml";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: application/xml
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      String string0 = HttpConnection.Response.getRequestCookieString(httpConnection_Request0);
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection0.HTTP_TEMP_REDIR);
      // Undeclared exception!
      try { 
        httpConnection_Request2.hasHeader(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "c[";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "";
      String string1 = "ins";
      String string2 = hashMap0.put(string1, string0);
      String string3 = hashMap0.put(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.cookies(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      String string0 = "~/";
      String string1 = "a;p<DJ9\"Y5&yuF0o";
      String string2 = httpConnection_Request0.header(string1);
      Connection.Request connection_Request0 = httpConnection_Request0.header(string0, string0);
      String string3 = "Yy";
      Document document0 = Parser.parseBodyFragmentRelaxed(string3, string3);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Connection.Request connection_Request1 = httpConnection_Request1.maxBodySize(httpConnection_Request0.maxBodySizeBytes);
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "|^?";
      int int0 = (-1619);
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      String string0 = "";
      String string1 = "source";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = "12rT";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request3.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = httpConnection_Response1.headers;
      Connection connection0 = httpConnection0.cookies(map0);
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      int int0 = 896;
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(string0, string0);
      Parser parser1 = parser0.setTrackErrors(int0);
      Connection connection0 = httpConnection0.parser(parser1);
      Connection.Request connection_Request0 = httpConnection0.request();
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(boolean0);
      String string0 = "noscript";
      String string1 = "s|Zx nf1w ~";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      boolean boolean1 = false;
      httpConnection_Request1.ignoreHttpErrors = boolean1;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean2 = httpConnection_Request3.followRedirects();
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "no.\" l^N^>6SAQ%";
      boolean boolean0 = httpConnection_Request0.hasHeader(string0);
      int int0 = 2390;
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int1 = (-471);
      // Undeclared exception!
      try { 
        httpConnection_Request2.timeout(int1);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL0 = mockFile0.toURL();
      Connection connection0 = HttpConnection.connect(uRL0);
      Collection<Connection.KeyVal> collection0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "DxTlrn5";
      Connection connection0 = httpConnection0.referrer(string0);
      Connection connection1 = httpConnection0.cookie(string0, string0);
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      String string1 = "xFe`~l=1pEV<4";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1);
      String string2 = httpConnection_KeyVal0.toString();
      boolean boolean0 = linkedList0.add((Connection.KeyVal) httpConnection_KeyVal0);
      Iterator<Connection.KeyVal> iterator0 = linkedList0.iterator();
      Connection connection2 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal1 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = 2335;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(httpConnection_Request1.followRedirects);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      httpConnection_Request0.ignoreContentType = httpConnection_Request1.followRedirects;
      String string0 = "0kpzL:X)9*8b3M";
      String string1 = "";
      Document document0 = Parser.parse(string0, string1);
      String string2 = "meter";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string2);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string2, string2);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection0.HTTP_TEMP_REDIR);
      String string3 = "Po`0";
      boolean boolean0 = httpConnection_Request3.hasHeader(string3);
      boolean boolean1 = httpConnection_Request3.followRedirects();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int0 = 22;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      Parser parser1 = httpConnection_Request3.parser();
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "input";
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "HuVS^r@]Nl/kO~p4YN";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(string2, httpConnection_KeyVal0.value);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      HttpConnection.Response httpConnection_Response3 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, httpConnection_Response1.charset);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.toString();
      String string1 = "";
      httpConnection_KeyVal0.value = string1;
      String string2 = httpConnection_KeyVal0.toString();
      String string3 = httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 3613;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean0 = false;
      httpConnection_Request3.ignoreHttpErrors = boolean0;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request1);
      Parser parser1 = Parser.htmlParser();
      Connection connection1 = httpConnection0.parser(parser1);
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "4Lj)P";
      String string1 = " &ak4x0N9jlh+XJc";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection0 = httpConnection0.method(connection_Method0);
      String string2 = "4x7l,Y7^B#npz";
      String string3 = "";
      Connection connection1 = httpConnection0.cookie(string2, string3);
      Connection connection2 = httpConnection0.data(string0, string1);
      Connection connection3 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-963);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "source";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "a=Ko2-a\\vL#1)";
      Collection<Connection.KeyVal> collection0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "RpBEEEQBkZTJ";
      String string1 = "";
      Connection connection0 = httpConnection0.data(string0, string1);
      String string2 = "py";
      String string3 = HttpConnection.encodeUrl(string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      boolean boolean1 = true;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string4 = "|g#]VVWuIPwC6xr";
      Document document0 = Parser.parseBodyFragment(string3, string4);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data();
      boolean boolean2 = httpConnection_Request2.ignoreContentType();
      int int0 = 2;
      Connection connection1 = httpConnection0.maxBodySize(int0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[1];
      String string0 = ": ";
      stringArray0[0] = string0;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "Header name must not be null";
      httpConnection_KeyVal0.value = string0;
      String string1 = httpConnection_KeyVal0.value();
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[1];
      stringArray0[0] = httpConnection_KeyVal0.key;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "!4FR]Fu";
      String string1 = "7vM;Y";
      MockFile mockFile0 = new MockFile(string0, string1);
      URL uRL0 = mockFile0.toURL();
      Connection connection0 = httpConnection0.url(uRL0);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      String string0 = "$[z%52'B`(vG+X{_l";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      httpConnection_Request2.cookies = map0;
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(httpConnection_Request0.followRedirects);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      int int0 = 461;
      Connection.Request connection_Request1 = httpConnection_Request2.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-4486);
      String string0 = "Header name must not be null";
      String string1 = httpConnection_Request0.getHeaderCaseInsensitive(string0);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key(string2);
      String string3 = httpConnection_KeyVal3.value();
      httpConnection_KeyVal3.key = httpConnection_KeyVal1.value;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = httpConnection_Response0.cookie(string3);
      String string5 = httpConnection_Response0.contentType();
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-1250);
      String string0 = "+z }-zHaYf2~^U_i";
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      httpConnection_Request0.timeoutMilliseconds = int0;
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
      String string0 = "optgroup";
      Connection connection1 = httpConnection0.userAgent(string0);
      String string1 = "Must supply an even number of key value pairs";
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      httpConnection_Response1.executed = httpConnection_Response0.executed;
      String string0 = httpConnection_Response1.charset();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      httpConnection_Response1.byteData = httpConnection_Response0.byteData;
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Insert position out of bounds.";
      Connection connection0 = httpConnection0.userAgent(string0);
      boolean boolean0 = false;
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection2 = httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection2 = httpConnection0.method(connection_Method0);
      HttpConnection.Response httpConnection_Response0 = null;
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request2.maxBodySize();
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-85);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-121);
      byteArray0[2] = byte2;
      byte byte3 = (byte)97;
      byteArray0[3] = byte3;
      byte byte4 = (byte)125;
      byteArray0[4] = byte4;
      byte byte5 = (byte)20;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-7);
      byteArray0[6] = byte6;
      byte byte7 = (byte)34;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "BeforeDoctypePublicIdentifier";
      HttpURLConnection httpURLConnection0 = null;
      String string1 = "}c CN%";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string1);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.setupFromConnection(httpURLConnection0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection connection1 = connection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = new HttpConnection.KeyVal(httpConnection_KeyVal0.key, string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(httpConnection0.req);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(httpConnection_KeyVal2.key, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key(string2);
      String string3 = httpConnection_KeyVal3.value();
      httpConnection_KeyVal3.key = httpConnection_KeyVal1.value;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.statusCode = httpConnection0.HTTP_TEMP_REDIR;
      String string4 = httpConnection_Response0.cookie(string3);
      String string5 = httpConnection_Response0.contentType();
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection2 = httpConnection0.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      int int0 = 52;
      URLStreamHandler uRLStreamHandler0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(httpConnection_Response0.contentType);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      int int0 = 64;
      HttpConnection.Response.MAX_REDIRECTS = int0;
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      String string0 = "t)w3:#f";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(collection0, mockPrintStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Response0.req, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "c[_|1";
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Response connection_Response0 = httpConnection0.execute();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection2 = httpConnection0.method(connection_Method0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection0.req);
      Map<String, String> map0 = httpConnection_Response0.cookies;
      Connection connection3 = connection2.data(map0);
      HttpConnection.Response httpConnection_Response1 = null;
      HttpConnection.Response httpConnection_Response2 = HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response1);
      String string1 = "blockquote";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockURL.URL(string1, httpConnection_Response2.statusMessage, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = new HttpConnection.KeyVal(string3, httpConnection_KeyVal0.key);
      httpConnection_KeyVal3.key = httpConnection_KeyVal1.value;
      try { 
        httpConnection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      try { 
        connection1.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "dfn";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Vy\\Y9aDdO`Ah";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = "org.jsoup.helper.HttpConnection";
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(httpConnection_KeyVal2.key, string3);
      String string4 = httpConnection_KeyVal3.value();
      httpConnection_KeyVal3.key = httpConnection_KeyVal1.value;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.contentType = httpConnection_KeyVal1.value;
      String string5 = httpConnection_Response0.cookie(string4);
      String string6 = httpConnection_Response0.contentType();
      try { 
        httpConnection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      httpConnection_Request0.data = (Collection<Connection.KeyVal>) linkedList0;
      boolean boolean0 = true;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.contentType();
      int int0 = 97;
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(int0);
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection_Response1.MAX_REDIRECTS);
      String string1 = "lgz.k~?xf=1j8wj";
      String string2 = "8)_@I(3tqF3";
      String string3 = hashMap0.put(string1, string2);
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap1);
      Connection.KeyVal connection_KeyVal0 = linkedList0.pollLast();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      httpConnection_Request0.data = (Collection<Connection.KeyVal>) linkedList0;
      boolean boolean0 = true;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.contentType();
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(httpConnection_Response1.statusCode);
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection_Response1.MAX_REDIRECTS);
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      Connection connection1 = connection0.ignoreHttpErrors(((HttpConnection.Request) connection_Request0).ignoreContentType);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      Connection.KeyVal connection_KeyVal0 = linkedList0.pollLast();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "wtMM";
      String string1 = "selected";
      String string2 = httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.key = string1;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string3 = HttpConnection.encodeUrl(httpConnection_KeyVal1.value);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string4 = "c[_|1";
      boolean boolean1 = httpConnection_Request1.hasCookie(string4);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = new HttpConnection.Request();
      String string5 = "dDd}=/";
      String string6 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = new HttpConnection.KeyVal(string5, string6);
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-597);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      int int0 = (-264);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string0);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection2 = httpConnection0.method(connection_Method0);
      String string0 = "blockquote";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/jsoup/3f7d2c71dbbbb289c684f339874eed8ac2747fa0/evosuite_6");
      String string1 = "F,v0])WMl~x";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      String string2 = null;
      String string3 = "K0sx-zi}Kx9@$V";
      boolean boolean2 = true;
      Connection connection3 = httpConnection0.followRedirects(boolean2);
      try { 
        connection3.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection2 = httpConnection0.method(connection_Method0);
      try { 
        connection2.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
