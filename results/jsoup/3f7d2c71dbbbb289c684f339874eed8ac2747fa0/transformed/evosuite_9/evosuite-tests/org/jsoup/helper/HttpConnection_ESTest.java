/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:09:50 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)51;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-43);
      byteArray0[1] = byte1;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Connection connection1 = httpConnection0.maxBodySize(((HttpConnection) connection0).HTTP_TEMP_REDIR);
      Connection connection2 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "5d.K*XI";
      Connection connection3 = connection2.data(string0, string0);
      String string1 = "a|s\"/:xB";
      Connection connection4 = httpConnection0.header(string1, string1);
      // Undeclared exception!
      try { 
        connection4.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string1 = "gzip";
      String string2 = httpConnection_Request1.getHeaderCaseInsensitive(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string3 = "#comment";
      String string4 = httpConnection_Request2.cookie(string3);
      int int0 = 42;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "tkv";
      String string1 = "\\JnP(D";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string2 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = "meta[http-equiv=content-type], meta[charset]";
      String string4 = "+*Y`Tz";
      httpConnection_KeyVal0.value = string0;
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string3, string4);
      String string5 = httpConnection_KeyVal0.value();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string2);
      Connection connection0 = httpConnection0.header(string0, string3);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string6 = httpConnection_Response0.statusMessage();
      Connection.Request connection_Request1 = httpConnection0.request();
      String string7 = ",u9/F&q";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string7, httpConnection_KeyVal2.key);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      String string0 = "";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string1 = "m@*UrE&Y";
      String string2 = null;
      char char0 = 'h';
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      Connection.Response connection_Response0 = null;
      Connection connection0 = httpConnection0.response(connection_Response0);
      Connection connection1 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      Connection.Response connection_Response1 = httpConnection0.response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      Connection connection2 = httpConnection0.followRedirects(httpConnection_Response0.executed);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      String string1 = "b<aQXB;xF|k";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = "oi#U*";
      String string3 = "LCR07PzV!& N-C1";
      String string4 = "application/xml";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string4);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string3, string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string2);
      String string5 = "Request must not be null";
      httpConnection_KeyVal0.value = string5;
      String string6 = "Lth9Do";
      String string7 = "{V_K6!A%`bA%Kc\\wM>W";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string7);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal3.key(string6);
      String string8 = httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 61;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(boolean0);
      int int1 = 0;
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method0;
      Connection.Request connection_Request1 = httpConnection_Request1.maxBodySize(int1);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "1%3>[0";
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 6;
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection connection0 = httpConnection0.timeout(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      String string0 = null;
      String string1 = "q";
      String string2 = "maxSize must be 0 (unlimited) or larger";
      String string3 = null;
      try { 
        connection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection0.HTTP_TEMP_REDIR);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request2.followRedirects(boolean0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
      Connection connection0 = httpConnection0.data(collection0);
      Connection connection1 = connection0.response(httpConnection0.res);
      boolean boolean1 = false;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        connection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 301;
      HttpConnection.HTTP_TEMP_REDIR = int0;
      int int1 = 2412;
      String string0 = "";
      Connection connection0 = httpConnection0.userAgent(string0);
      String string1 = "label";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string1, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string2 = ":gt(%d)";
      String string3 = httpConnection_KeyVal0.value();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = null;
      String string4 = "=";
      String string5 = "gB^L@c>Ra";
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string4, string5);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string6 = HttpConnection.Response.getRequestCookieString(httpConnection_Request1);
      httpConnection_KeyVal1.value = string1;
      String string7 = "SFao7dv$TDQ\\";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string7);
      int int2 = httpConnection_Request0.maxBodySize();
      httpConnection_KeyVal3.value = string0;
      String string8 = httpConnection_KeyVal3.toString();
      String string9 = "small";
      Connection connection1 = httpConnection0.cookie(string9, httpConnection_KeyVal3.value);
      boolean boolean0 = httpConnection_Request0.followRedirects();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      String string0 = ":7kkklwrp;X";
      Connection connection2 = httpConnection0.cookie(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = connection2.method(connection_Method0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Connection connection4 = connection2.data(stringArray0);
      Tag tag0 = Tag.valueOf(string0);
      Element element0 = new Element(tag0, string0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection5 = connection1.data((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        httpConnection0.url(stringArray0[0]);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: :7kkklwrp;X
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, List<String>> map0 = null;
      Connection.Response connection_Response0 = httpConnection_Response1.removeCookie(httpConnection_Response0.statusMessage);
      String string0 = "dEa@K'";
      Connection.Response connection_Response1 = httpConnection_Response1.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.removeHeader(httpConnection_Response0.statusMessage);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string0, list0);
      List<String> list2 = hashMap0.remove((Object) httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "1%3>[0";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 6;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      Connection connection0 = httpConnection0.request(connection_Request0);
      Connection connection1 = httpConnection0.timeout(int0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "yL\\:%M";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data(string0, string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "Br~3k\"fV3ss!jQ\"oam^";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      boolean boolean0 = linkedHashSet0.add(httpConnection_KeyVal1);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method0;
      int int0 = 3000;
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(int0);
      String string0 = "%20";
      String string1 = httpConnection_Request0.header(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = "URL must not be null";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data;
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreContentType(httpConnection_Request1.ignoreContentType);
      Connection connection0 = httpConnection0.data(collection0);
      String string2 = "]. \"{g^";
      String string3 = null;
      int int0 = 17;
      Connection connection1 = httpConnection0.timeout(int0);
      // Undeclared exception!
      try { 
        httpConnection0.data(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = ";AW&JO";
      String string1 = httpConnection_Response0.header(string0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request(httpConnection_Response0.req);
      String string2 = "kP";
      String string3 = ": ";
      // Undeclared exception!
      try { 
        httpConnection0.data(string2, string3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      String string0 = "Data key value pairs must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(httpConnection_Request2.ignoreHttpErrors);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string0);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.POST;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = 40;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(int0);
      Connection connection0 = httpConnection0.followRedirects(httpConnection_Request0.ignoreContentType);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = " ";
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      boolean boolean1 = httpConnection_Request0.ignoreHttpErrors();
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "6gx3l3XmTtJjJaW91sr";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 6gx3l3XmTtJjJaW91sr
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.followRedirects();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.value(string0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "HTTP error fetching URL";
      String string1 = "";
      Connection connection0 = httpConnection0.userAgent(string1);
      String string2 = "tr";
      Connection connection1 = httpConnection0.header(string0, string2);
      Connection.Response connection_Response0 = httpConnection0.response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string1, string2);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request1.maxBodySizeBytes);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(httpConnection_Request0.timeoutMilliseconds);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "\"5|tb;";
      Connection connection0 = httpConnection0.referrer(string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      Connection connection2 = httpConnection0.method(connection_Method0);
      String string1 = "Key val must not be null";
      try { 
        MockURL.URL(string1);
      } catch(MalformedURLException e) {
         //
         // no protocol: Key val must not be null
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "f{Dgm*qm@`\"2T=p";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.maxBodySizeBytes);
      int int0 = 756;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.timeout(int0);
      String string2 = "";
      Connection.Request connection_Request0 = httpConnection_Request3.removeCookie(string2);
      Connection.Request connection_Request1 = httpConnection_Request3.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      HttpConnection httpConnection0 = new HttpConnection();
      String string3 = "";
      Connection connection0 = httpConnection0.userAgent(string3);
      Connection.Request connection_Request2 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request2);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string0 = "tkV";
      String string1 = "Location";
      Connection.Request connection_Request0 = httpConnection_Request0.header(string0, string1);
      Connection.Request connection_Request1 = httpConnection_Request0.method(connection_Method0);
      boolean boolean0 = httpConnection_Request0.followRedirects();
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = ".yj^";
      Connection connection0 = httpConnection0.referrer(string2);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string1 = "gzip";
      String string2 = httpConnection_Request1.getHeaderCaseInsensitive(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = 42;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "pMtuIjkBPVd:\\3uS@5";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.cookies(hashMap0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "K?:6TtfjCtRQ-7";
      String string1 = "";
      Connection connection0 = httpConnection0.header(string0, string1);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection1 = httpConnection0.method(connection_Method0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "";
      String string1 = "d?]?Pv~nT_c<hjiBM";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      String string2 = "veZ>YBk";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string2);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Hmm.}v,&|(0_5/=!ww";
      String string1 = "h[";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = httpConnection_Request1.maxBodySize();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = "GIm3l";
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request1.hasHeader(string4);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[7];
      String string0 = "Must supply a valid URL";
      stringArray0[0] = string0;
      String string1 = "|Bm_KVd,9~2]ZYhilR`";
      stringArray0[1] = string1;
      String string2 = "hf3ESXl:ou~sf'\"`";
      stringArray0[2] = string2;
      String string3 = "(L(:jv:";
      stringArray0[3] = string3;
      String string4 = "vB{K<E9Tj";
      stringArray0[4] = string4;
      String string5 = "Data key value pairs must not be null";
      stringArray0[5] = string5;
      String string6 = "Location";
      stringArray0[6] = string6;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "pop td not in cell";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "?";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      String string2 = ", currentElement=";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string2);
      String string3 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      stringArray0[0] = httpConnection_KeyVal1.key;
      String string4 = "Header value must not be null";
      stringArray0[1] = string4;
      stringArray0[2] = httpConnection_KeyVal0.key;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-486);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "a|s\"/:xB";
      Connection connection2 = httpConnection0.header(string0, string0);
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      Connection connection3 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      Connection connection4 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 3916;
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int1 = 1604;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int1);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      // Undeclared exception!
      try { 
        HttpConnection.connect(httpConnection_Response0.charset);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      int int0 = 23;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
      httpConnection_Request1.parser = httpConnection_Request0.parser;
      httpConnection_Request1.data = collection0;
      String string0 = "Request must not be null";
      boolean boolean1 = httpConnection_Request2.hasHeader(string0);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(httpConnection_Request1.ignoreContentType);
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "`*!'xT<q";
      String string2 = "=Re>QeJQz}b7x*hUO";
      Connection connection0 = httpConnection0.header(string1, string2);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "_wSD";
      boolean boolean0 = httpConnection_Response0.hasHeader(string0);
      String string1 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(httpConnection_Response0.statusCode);
      Parser parser0 = null;
      Connection connection1 = httpConnection0.parser(parser0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request0.scanHeaders(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      String string0 = "[%s]";
      String string1 = "";
      File file0 = MockFile.createTempFile(string0, string1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      HttpConnection.Response.writePost(linkedHashSet0, mockPrintStream0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      String string0 = "";
      String string1 = "|f@";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      String string3 = "kTg_1fL!At)|eu";
      httpConnection_KeyVal0.value = string3;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean0 = false;
      httpConnection_Request1.ignoreContentType = boolean0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string4 = "[%s]";
      boolean boolean1 = httpConnection_Request2.hasCookie(string4);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request5.maxBodySize();
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "}>l{tm3ote=~7H~R";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string5);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "";
      String string1 = ":nth-child(%d)";
      // Undeclared exception!
      try { 
        httpConnection_Response1.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "cs+Igm8_";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request2.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 1124;
      Connection connection0 = httpConnection0.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      String[] stringArray0 = new String[0];
      Connection connection1 = httpConnection0.data(stringArray0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "";
      String string1 = hashMap0.put(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.cookies(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "CCn9D%lC525";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string1 = "HTTP error fetching URL";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string0);
      String string2 = httpConnection_KeyVal1.value();
      HttpConnection httpConnection0 = new HttpConnection();
      String string3 = "";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection0 = httpConnection0.data(map0);
      try { 
        MockURL.URL(string1, string3, httpConnection_KeyVal0.key);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: http error fetching url
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.cookies();
      Connection connection0 = httpConnection0.cookies(map0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "j9p 5^5en~s\\O3";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(httpConnection_Response1.statusMessage, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      httpConnection_Request1.cookies = map0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      Connection.Request connection_Request0 = httpConnection_Request3.maxBodySize(httpConnection_Response1.numRedirects);
      Connection.Request connection_Request1 = httpConnection0.request();
      String string1 = httpConnection_KeyVal0.toString();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request1, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string1 = "Key val must not be null";
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Response0.req, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "o%Fm3@OHNyepx^";
      Connection connection0 = httpConnection0.userAgent(string1);
      int int0 = 5906;
      Connection connection1 = httpConnection0.timeout(int0);
      Connection connection2 = httpConnection0.userAgent(string0);
      HttpConnection.HTTP_TEMP_REDIR = int0;
      String string2 = "Referrer must not be null";
      Connection connection3 = httpConnection0.data(string2, string1);
      String string3 = "_by:-UbIF~$yM6C";
      Connection connection4 = httpConnection0.userAgent(string3);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = httpConnection_Request0.cookie(string0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      Connection.Request connection_Request1 = httpConnection_Request0.followRedirects(boolean0);
      String string2 = HttpConnection.Response.getRequestCookieString(httpConnection_Request0);
      String string3 = "[%s]";
      // Undeclared exception!
      try { 
        httpConnection_Request0.cookie(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      int int0 = 2017;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      String string0 = "i/]rgyD/:x";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      boolean boolean1 = true;
      httpConnection_Request1.ignoreHttpErrors = boolean1;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      Parser parser1 = httpConnection_Request3.parser();
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = Parser.htmlParser();
      String string0 = "canvas";
      Document document0 = Parser.parseBodyFragment(string0, string0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request2.url = uRL0;
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request2);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      Parser parser2 = httpConnection_Request0.parser();
      String string1 = "Malformed URL: ";
      Tag tag0 = Tag.valueOf(string1);
      Attributes attributes0 = new Attributes();
      String string2 = "%20";
      attributes0.remove(string2);
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, string1, attributes1);
      Element element0 = null;
      Parser parser3 = Parser.htmlParser();
      FormElement formElement1 = formElement0.addElement(element0);
      String string3 = "cBT: TlA`;F3";
      List<Node> list0 = Parser.parseFragment(string1, formElement1, string3);
      httpConnection_Request3.parser = parser2;
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      Connection connection1 = httpConnection0.parser(httpConnection_Request3.parser);
      HttpConnection.Response httpConnection_Response0 = null;
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "$E%td>I'AD$6[\"d&KI.";
      httpConnection_KeyVal0.value = string0;
      String string1 = httpConnection_KeyVal0.value();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.headers();
      Connection connection0 = httpConnection0.cookies(map0);
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(httpConnection_Response0.charset);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Collection<Connection.KeyVal> collection0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.headers;
      Connection connection0 = httpConnection0.cookies(map0);
      String string0 = "";
      Connection connection1 = httpConnection0.referrer(string0);
      Connection connection2 = httpConnection0.cookies(map0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = hashMap0.put(httpConnection_Response1.contentType, list1);
      httpConnection_Response1.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "[C3d)q=";
      String string1 = "1+gB&/L";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Object object0 = hashMap0.clone();
      Connection connection0 = httpConnection0.cookies(hashMap0);
      String string2 = httpConnection_KeyVal0.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "font";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request0.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "0]3hq2eS/i,R";
      int int0 = (-2238);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = true;
      String string1 = "[%s]";
      String string2 = "FmUD";
      String string3 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 48;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      String string4 = "";
      String string5 = HttpConnection.encodeUrl(string4);
      String string6 = null;
      httpConnection0.res = (Connection.Response) httpConnection_Response0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string1, string6);
      String string7 = "AzX<KCJ?q||Hs";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string7);
      String string8 = "truespeed";
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string8);
      String string9 = "org.jsoup.safety.Cleaner$CleaningVisitor";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.key(string9);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.key(httpConnection_KeyVal3.value);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal3.value(string9);
      String string10 = "org.jsoup.HttpStatusException";
      Connection connection1 = httpConnection0.cookie(httpConnection_KeyVal5.key, string10);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      boolean boolean4 = true;
      boolean boolean5 = true;
      boolean boolean6 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean4, boolean5);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "ismap";
      String string1 = HttpConnection.encodeUrl(string0);
      Connection.Request connection_Request0 = httpConnection0.request();
      String string2 = HttpConnection.Response.getRequestCookieString(connection_Request0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection connection0 = httpConnection0.userAgent(string0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      String string3 = "://";
      String string4 = HttpConnection.encodeUrl(string3);
      httpConnection_Request0.method = connection_Method0;
      int int0 = (-1053);
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
      OutputStream outputStream0 = null;
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(outputStream0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(collection0, filterOutputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      String string0 = "";
      String string1 = "meta[http-equiv=content-type], meta[charset]";
      String string2 = "+*Y`Tz";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = httpConnection_Response0.statusMessage();
      Connection.Request connection_Request1 = httpConnection0.request();
      String string4 = ",u9/F&q";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string4, httpConnection_KeyVal0.key);
      boolean boolean1 = httpConnection_Request0.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      String string0 = ":7kkklwrp;X";
      Connection connection2 = httpConnection0.cookie(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = connection2.method(connection_Method0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      Connection connection4 = connection2.data(stringArray0);
      Tag tag0 = Tag.valueOf(string0);
      Element element0 = new Element(tag0, string0);
      Map<String, String> map0 = element0.dataset();
      Connection connection5 = connection1.data(map0);
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "a|s\"/:xB";
      Connection connection2 = httpConnection0.header(string0, string0);
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      HttpConnection httpConnection1 = new HttpConnection();
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.setupFromConnection(httpURLConnection0, httpConnection0.res);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "1%3>[0";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 6;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      HttpConnection.Request httpConnection_Request2 = null;
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request2);
      // Undeclared exception!
      try { 
        connection0.timeout(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      httpConnection_Request0.timeoutMilliseconds = httpConnection0.HTTP_TEMP_REDIR;
      int int0 = (-1968742466);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection0.HTTP_TEMP_REDIR);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request2.followRedirects(boolean0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
      Connection connection0 = httpConnection0.data(collection0);
      boolean boolean1 = false;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "=hDDm7sGOP!I";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request2.scanHeaders(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      String string0 = ":7kkklwrp;X";
      Connection connection2 = httpConnection0.cookie(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = connection2.method(connection_Method0);
      String[] stringArray0 = new String[4];
      stringArray0[2] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        connection2.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "hr";
      String string1 = "3N";
      String string2 = hashMap0.put(string0, string1);
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreContentType(boolean0);
      String string0 = ":7kkklwrp;X";
      Connection connection2 = httpConnection0.cookie(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection3 = connection2.method(connection_Method0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        connection2.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      String string0 = null;
      String string1 = "q";
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 301;
      HttpConnection.HTTP_TEMP_REDIR = int0;
      int int1 = 2412;
      HttpConnection.HTTP_TEMP_REDIR = int1;
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string1);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      String string0 = "[C3d)q=";
      String string1 = "1+gB&/x4L";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string2 = "5d.k*xi";
      String string3 = hashMap0.put(string2, string0);
      Object object0 = hashMap0.clone();
      Connection connection0 = httpConnection0.cookies(hashMap0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      String string0 = null;
      String string1 = "q";
      String string2 = "maxSize must be 0 (unlimited) or larger";
      String string3 = null;
      try { 
        connection0.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      String string0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      Connection connection1 = connection0.ignoreContentType(boolean0);
      String string1 = "q";
      String string2 = "maxSize must be 0 (unlimited) or larger";
      String string3 = null;
      try { 
        connection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 325;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = "a|s\"/:xb";
      String string1 = httpConnection_Request2.getHeaderCaseInsensitive(string0);
      String string2 = "org.jsoup.select.Evaluator$Attribute";
      String string3 = "q/4lRxW.`w0VdM6";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string2, string3);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data();
      String string4 = httpConnection_KeyVal0.toString();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HttpConnection.Response.writePost(collection0, pipedOutputStream0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      String string0 = null;
      String string1 = "-";
      String string2 = "maxSize must be 0 (unlimited) or larger";
      String string3 = null;
      try { 
        connection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "q";
      String string1 = "maxSize must be 0 (unlimited) or larger";
      String string2 = null;
      HttpConnection.Response.serialiseRequestUrl(((HttpConnection) connection0).req);
      String string3 = HttpConnection.Response.getRequestCookieString(((HttpConnection) connection0).req);
  }
}
