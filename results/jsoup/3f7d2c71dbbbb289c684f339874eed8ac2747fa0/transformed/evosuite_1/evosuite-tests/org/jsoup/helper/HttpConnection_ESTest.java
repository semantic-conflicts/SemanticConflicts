/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:42:58 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      String string0 = "";
      String string1 = httpConnection_Request0.header(string0);
      int int0 = httpConnection_Request0.maxBodySize();
      boolean boolean1 = httpConnection_Request0.followRedirects();
      String string2 = ")drjf ? IvQ?=U n/";
      String string3 = HttpConnection.encodeUrl(string2);
      HttpConnection httpConnection0 = new HttpConnection();
      String string4 = "";
      String string5 = "9xwz.F%''R2s";
      String string6 = "";
      Connection connection0 = httpConnection0.userAgent(string6);
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string4, string5);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "^%cr]V2wL_X{QX8mAe(";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(httpConnection_Request0.timeoutMilliseconds);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getAbsolutePath();
      String string2 = mockFile0.getAbsolutePath();
      URL uRL0 = mockFile0.toURL();
      String string3 = "";
      URL uRL1 = MockURL.URL(uRL0, string3);
      Connection connection0 = HttpConnection.connect(uRL1);
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.response();
      Map<String, String> map0 = httpConnection_Response0.cookies;
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data(map0);
      String string4 = HttpConnection.Response.getRequestCookieString(httpConnection0.req);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.followRedirects();
      String string5 = "e";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string5, string5);
      String string6 = httpConnection_KeyVal0.value();
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.data(map0);
      int int0 = httpConnection_Request0.timeout();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>(int0);
      Connection connection0 = httpConnection0.cookies(hashMap0);
      String string0 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string2 = "";
      String string3 = hashMap0.put(httpConnection_KeyVal0.value, string2);
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request1.timeoutMilliseconds);
      httpConnection_Request2.headers = (Map<String, String>) hashMap0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(httpConnection_Request1.followRedirects);
      String string4 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection1 = new HttpConnection();
      String string5 = "";
      int int1 = (-997);
      URLStreamHandler uRLStreamHandler0 = null;
      try { 
        MockURL.URL(string0, string5, int1, httpConnection_KeyVal0.value, uRLStreamHandler0);
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-997
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-288);
      String string0 = "org.jsoup.helper.HttpConnection$Response";
      String string1 = httpConnection_Request0.header(string0);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Referer";
      String string1 = "";
      Connection connection0 = httpConnection0.data(string0, string1);
      String[] stringArray0 = new String[0];
      Connection connection1 = httpConnection0.data(stringArray0);
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      Connection connection2 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      String string2 = "7\"h;)w7`a=q{c{Hm{";
      Connection connection3 = httpConnection0.data(string2, string2);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection4 = httpConnection0.method(connection_Method0);
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection0.HTTP_TEMP_REDIR);
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection5 = connection4.cookies(map0);
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      URI uRI0 = null;
      // Undeclared exception!
      try { 
        MockURI.relativize(uRI0, uRI0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "eq3LHQZ`9}u({U#";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      httpConnection0.req = connection_Request0;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      String string1 = "://";
      Connection connection0 = httpConnection0.data(string1, string1);
      Connection connection1 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreContentType);
      Connection connection2 = httpConnection0.header(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "2_#0\"OUQ-K:";
      String string1 = "s=*q";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string2 = "8>jUU/Ov'/W(Yit";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string2, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      boolean boolean0 = httpConnection_Response0.hasHeader(string1);
      String string3 = "!\\bSt";
      boolean boolean1 = httpConnection_Response0.hasHeader(string3);
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      Connection connection2 = connection1.response(((HttpConnection) connection0).res);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection3 = httpConnection0.ignoreHttpErrors(((HttpConnection.Response) connection_Response0).executed);
      int int1 = 11;
      Connection connection4 = httpConnection0.maxBodySize(int1);
      Connection connection5 = connection3.followRedirects(((HttpConnection.Response) connection_Response0).executed);
      String string0 = "UTF-8";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "dl";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(httpConnection_KeyVal0.key);
      String string2 = connection_Response0.statusMessage();
      // Undeclared exception!
      try { 
        connection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      String string0 = "NsdWnd'";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getCanonicalPath();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      boolean boolean0 = linkedList0.add((Connection.KeyVal) httpConnection_KeyVal0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      int int0 = (-896);
      mockFileOutputStream0.write(int0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(linkedList0, mockFileOutputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      Connection connection0 = httpConnection0.userAgent(string0);
      int int0 = 125;
      String string1 = "_>D4^F$0) lG@";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: _>D4^F$0) lG@
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "action";
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      boolean boolean1 = httpConnection_Request0.hasCookie(string0);
      boolean boolean2 = httpConnection_Request0.ignoreHttpErrors();
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "vJR0Ku!";
      httpConnection_Response1.charset = string0;
      int int0 = httpConnection_Response1.statusCode();
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response3 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string1 = "b+c1gu3";
      // Undeclared exception!
      try { 
        httpConnection0.url(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: b+c1gu3
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "; ";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "-6rzt3:EL[xW%{#";
      Connection connection0 = httpConnection0.referrer(string1);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean1, boolean1, boolean2);
      int int0 = 307;
      Connection connection1 = httpConnection0.timeout(int0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response1.method = connection_Method0;
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "R +ZvIW@g";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = httpConnection_KeyVal0.toString();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection0 = httpConnection0.method(connection_Method0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection2 = httpConnection0.response(connection_Response0);
      boolean boolean0 = true;
      Connection connection3 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "UTF-8";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "dl";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(httpConnection_KeyVal0.key);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Attributes attributes0 = new Attributes();
      Iterator<Attribute> iterator0 = attributes0.iterator();
      List<Attribute> list0 = attributes0.asList();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection0 = httpConnection0.data(map0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.statusMessage();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = 0;
      String string0 = "";
      String string1 = "N1 ";
      String string2 = hashMap0.put(string0, string1);
      String string3 = "+F8\"dFD1YgY;`gEq:=u";
      String string4 = ":>V;IKV/U0{&E0";
      String string5 = hashMap0.put(string3, string4);
      Connection connection0 = httpConnection0.timeout(int0);
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 20;
      String string0 = "G<;sP(uwh1vUue";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      List<Attribute> list0 = attributes0.asList();
      Map<String, String> map0 = attributes1.dataset();
      Connection connection0 = httpConnection0.cookies(map0);
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(int0);
      Connection connection1 = httpConnection0.request(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "p^?PZB\\Q";
      String string1 = "Only http & https protocols supported";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(httpConnection_KeyVal0.key);
      String string2 = "; ";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string2);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "cx0o,so^f8<+";
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = HttpConnection.Response.getRequestCookieString(httpConnection_Request1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "bc8Lpg57lXtp.OK{)k";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      Connection connection0 = httpConnection0.data(collection0);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string2);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-830);
      String string0 = "application/xml";
      Connection connection0 = httpConnection0.referrer(string0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection.Request connection_Request1 = httpConnection0.request();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = httpConnection_Request0.getHeaderCaseInsensitive(string0);
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Request0.hasHeader(string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "";
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      httpConnection_Request0.data = collection0;
      httpConnection_KeyVal0.key = string0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Request1.headers = (Map<String, String>) hashMap0;
      String string1 = "\\o9I\"84cmXJuMDBom";
      boolean boolean0 = httpConnection_Request1.hasHeader(string1);
      httpConnection_KeyVal0.value = string1;
      Connection.Request connection_Request0 = httpConnection_Request1.removeHeader(httpConnection_KeyVal0.value);
      boolean boolean1 = true;
      httpConnection_Request1.ignoreContentType = boolean1;
      Connection.Request connection_Request1 = httpConnection_Request1.maxBodySize(httpConnection_Request0.timeoutMilliseconds);
      int int0 = httpConnection_Request1.maxBodySize();
      Connection.Request connection_Request2 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.ignoreContentType);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string2 = "HTTP error fetching URL";
      Connection connection0 = httpConnection0.data(httpConnection_Request0.data);
      try { 
        MockURL.URL(httpConnection_KeyVal0.value, string2, string0);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: \\o9i\"84cmxjumdbom
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Pattern syntax error: ";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Pattern syntax error: 
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ")EK=";
      Connection.Request connection_Request0 = httpConnection0.request();
      httpConnection0.req = connection_Request0;
      Connection connection0 = httpConnection0.referrer(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Request0.method = connection_Method0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.parser(parser0);
      String string1 = "org.jsoup.select.Elements";
      Connection connection1 = httpConnection0.referrer(string1);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "b+C1gU3";
      String string1 = ";yP|4t~t6";
      Connection connection0 = httpConnection0.header(string0, string1);
      Connection.Response connection_Response0 = null;
      Connection connection1 = httpConnection0.response(connection_Response0);
      int int0 = 25;
      Connection connection2 = httpConnection0.maxBodySize(int0);
      String string2 = HttpConnection.Response.getRequestCookieString(httpConnection0.req);
      int int1 = (-2064);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int1);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "maxSize must be 0 (unlimited) or larger";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request1.timeoutMilliseconds);
      Connection.Request connection_Request0 = httpConnection_Request3.followRedirects(httpConnection_Request0.ignoreHttpErrors);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      String string0 = "e'Fg-BfpKOxm&A:m#t";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data();
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(collection0, outputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = "P&x#zx8X{";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "q?&{;.cTS@i";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      String string1 = "";
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) string1;
      objectArray0[1] = (Object) mockPrintStream0;
      objectArray0[2] = (Object) string1;
      objectArray0[3] = (Object) string1;
      objectArray0[4] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(string1, objectArray0);
      HttpConnection.Response.writePost(httpConnection_Request0.data, printStream0);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "%20";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Cookie name must not be empty";
      String string1 = "http:/";
      Document document0 = Parser.parseBodyFragment(string0, string1);
      boolean boolean0 = false;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      Map<String, String> map0 = document0.dataset();
      httpConnection_Request0.cookies = map0;
      Parser parser0 = httpConnection_Request0.parser();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data(httpConnection_Request0.cookies);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      httpConnection0.res = (Connection.Response) httpConnection_Response0;
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "7%tdh,FE9Ks^jl-:";
      String string1 = httpConnection_Request0.cookie(string0);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "org.jsoup.helper.HttpConnection";
      boolean boolean1 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean1);
      try { 
        MockURL.URL(string2, string2, string2);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: org.jsoup.helper.httpconnection
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[5];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "d{[[BGp2R6*,_";
      stringArray0[1] = string1;
      String string2 = "VtH>_x:R\"8(3(J";
      stringArray0[2] = string2;
      String string3 = ">9Wi3R7*?0&QKs6,q";
      stringArray0[3] = string3;
      String string4 = "";
      stringArray0[4] = string4;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "='^etuXT<";
      httpConnection_Response0.charset = string0;
      String string1 = httpConnection_Response0.statusMessage();
      String string2 = httpConnection_Response0.charset();
      String string3 = "";
      String string4 = HttpConnection.encodeUrl(string3);
      String string5 = "charset";
      String string6 = "output";
      String string7 = httpConnection_Response0.cookie(string6);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string5, httpConnection_Response0.charset);
      String string8 = "";
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string8);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      URL uRL0 = mockFile0.toURL();
      Connection connection0 = HttpConnection.connect(uRL0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      Connection connection0 = httpConnection0.request(connection_Request0);
      String string0 = "0;}!";
      Connection connection1 = httpConnection0.cookie(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 23;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      int int1 = httpConnection_Request2.timeout();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 286;
      String string0 = ">>'5kN";
      String string1 = httpConnection_Request0.getHeaderCaseInsensitive(string0);
      boolean boolean0 = false;
      httpConnection_Request0.ignoreContentType = boolean0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string2 = "";
      httpConnection_Request1.ignoreContentType = httpConnection_Request0.ignoreHttpErrors;
      String string3 = HttpConnection.encodeUrl(string2);
      boolean boolean1 = httpConnection_Request0.hasCookie(string3);
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(httpConnection_Request0.ignoreContentType);
      boolean boolean2 = httpConnection_Request0.ignoreContentType();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request1 = httpConnection0.request();
      String string4 = "body";
      Connection connection0 = httpConnection0.userAgent(string4);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string5 = "IvIt*hZQ/";
      String string6 = hashMap0.put(string1, string5);
      // Undeclared exception!
      try { 
        httpConnection0.cookies(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1;
      String string0 = "";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeCookie(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.headers();
      httpConnection_Request0.headers = map0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request2.ignoreContentType(httpConnection_Request0.followRedirects);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string1 = "4mwcq*7Pt K1o";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "Cj,T";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      httpConnection_KeyVal0.value = string0;
      String string1 = "@U[Y;jR=9N`cf02P~Q";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(httpConnection_KeyVal0.value);
      String string2 = httpConnection_KeyVal2.key();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      httpConnection_Request1.headers = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "link";
      String string1 = HttpConnection.encodeUrl(string0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "big";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "E&";
      String string2 = "";
      String string3 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string0);
      httpConnection_KeyVal0.value = string3;
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string0);
      String string4 = httpConnection_KeyVal4.toString();
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "&kesL/q`JTrT";
      Connection connection0 = httpConnection0.header(string0, string5);
      Parser parser0 = Parser.htmlParser();
      Connection connection1 = httpConnection0.parser(parser0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string6 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request0.cookie(string6, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "oHAV:HL;'6FX !~B";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.putIfAbsent(string0, linkedList0);
      httpConnection_Response1.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      String string0 = "center";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "?/opDvgY`H";
      String string2 = "2n4zA<uV9[C/TPm,~\\N";
      httpConnection_KeyVal0.value = string2;
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string1);
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      int int0 = (-1759);
      Map<String, String> map0 = null;
      httpConnection_Request0.headers = map0;
      Parser parser1 = parser0.setTrackErrors(int0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      boolean boolean1 = httpConnection_Request1.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 29;
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      String string0 = "http";
      String string1 = "big";
      String string2 = "b+c1gu3";
      String string3 = "w,$:EV.";
      Connection connection1 = httpConnection0.header(string2, string3);
      Connection connection2 = connection0.cookie(string0, string1);
      HttpConnection httpConnection1 = new HttpConnection();
      String string4 = "";
      boolean boolean0 = false;
      Connection connection3 = httpConnection0.ignoreContentType(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string5 = "@2P9C.-&SDH3Na";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string4, string5);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "^~%";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      URL uRL0 = MockURL.getFtpExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection.Response.serialiseRequestUrl(connection_Request1);
      String string1 = HttpConnection.Response.getRequestCookieString(connection_Request1);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response1.method(connection_Method0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "eq3LHQZ`9}u({U#";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      httpConnection0.req = connection_Request0;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      Connection connection0 = httpConnection0.data(string0, string0);
      Connection connection1 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreContentType);
      boolean boolean1 = false;
      Connection.Request connection_Request2 = connection_Request1.maxBodySize(((HttpConnection.Request) connection_Request1).timeoutMilliseconds);
      Connection.Request connection_Request3 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      String string1 = HttpConnection.Response.getRequestCookieString(connection_Request2);
      boolean boolean2 = httpConnection_Request0.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = 0;
      String string0 = "o";
      String string1 = "N1 ";
      String string2 = hashMap0.put(string0, string1);
      String string3 = "+F8\"dFD1YgY;`gEq:=u";
      String string4 = ":>V;IKV/U0{&E0";
      String string5 = hashMap0.put(string3, string4);
      Connection connection0 = httpConnection0.timeout(int0);
      Connection connection1 = httpConnection0.data((Map<String, String>) hashMap0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Set<String> set0 = hashMap0.keySet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string0;
      stringArray0[2] = string1;
      String string6 = "\"TBEBba:SwLVJoAM>2Y";
      stringArray0[3] = string6;
      stringArray0[4] = string2;
      String string7 = "User agent must not be null";
      String string8 = hashMap0.put(stringArray0[4], string7);
      stringArray0[5] = string1;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = Parser.htmlParser();
      String string0 = "section";
      boolean boolean0 = true;
      Parser parser2 = Parser.xmlParser();
      String string1 = Parser.unescapeEntities(string0, boolean0);
      Map<String, String> map0 = null;
      String string2 = "B:r/%c _V-:";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string2);
      String string3 = "Content-Encoding";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string3);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser2);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string1, httpConnection_Request0.ignoreContentType);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      String string4 = "mTn#lJt|DS4</12V7/N";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) string4;
      objectArray0[1] = (Object) map0;
      objectArray0[2] = (Object) parser2;
      objectArray0[3] = (Object) string4;
      objectArray0[4] = (Object) string1;
      objectArray0[5] = (Object) httpConnection_Request2;
      PrintStream printStream0 = mockPrintStream0.format(string4, objectArray0);
      HttpConnection.Response.writePost(collection0, printStream0);
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "th";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Request connection_Request0 = httpConnection_Request2.method(connection_Method0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request1.maxBodySizeBytes);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.contentType();
      boolean boolean3 = httpConnection_Request3.followRedirects();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer(httpConnection_KeyVal0.value);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getAbsolutePath();
      String string2 = mockFile0.getAbsolutePath();
      URL uRL0 = mockFile0.toURL();
      String string3 = "";
      URL uRL1 = MockURL.URL(uRL0, string3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Connection connection0 = HttpConnection.connect(uRL1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      try { 
        HttpConnection.Response.execute(((HttpConnection) connection0).req, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "MHZO9.0}#";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.key, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      boolean boolean0 = true;
      httpConnection_Response0.executed = boolean0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string0);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        connection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      String string0 = "application/xhtml+xml";
      String string1 = ":c";
      Connection connection0 = httpConnection0.data(string0, string1);
      // Undeclared exception!
      try { 
        connection0.data(((HttpConnection.Request) connection_Request0).data);
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getAbsolutePath();
      String string2 = mockFile0.getAbsolutePath();
      URL uRL0 = mockFile0.toURL();
      String string3 = "";
      URL uRL1 = MockURL.URL(uRL0, string3);
      Connection connection0 = HttpConnection.connect(uRL1);
      try { 
        connection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Referer";
      String string1 = "";
      Connection connection0 = httpConnection0.data(string0, string1);
      String[] stringArray0 = new String[0];
      Connection connection1 = httpConnection0.data(stringArray0);
      int int0 = (-441);
      // Undeclared exception!
      try { 
        connection1.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Set-Cookie";
      httpConnection_Response0.charset = string0;
      HttpConnection.Response.MAX_REDIRECTS = httpConnection_Response0.statusCode;
      HttpConnection.Response httpConnection_Response1 = null;
      try {
        httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      } catch(Throwable e) {
         //
         // Too many redirects occurred trying to load URL null
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
