/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:44:43 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.ByteBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "r.rS6l'wI_[&wMVif";
      boolean boolean0 = false;
      httpConnection_Request0.ignoreContentType = boolean0;
      String string1 = ":eq(%d)";
      boolean boolean1 = false;
      httpConnection_Request0.followRedirects = boolean1;
      String string2 = httpConnection_Request0.getHeaderCaseInsensitive(string1);
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      boolean boolean2 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean2);
      int int0 = httpConnection_Request0.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection0.HTTP_TEMP_REDIR, int0);
      httpConnection_Request0.headers = (Map<String, String>) hashMap0;
      Connection.Request connection_Request2 = httpConnection_Request0.ignoreHttpErrors(boolean1);
      Parser parser0 = httpConnection_Request0.parser();
      boolean boolean3 = httpConnection_Request0.ignoreContentType();
      String string3 = "4bY";
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 47;
      Connection connection0 = httpConnection0.maxBodySize(int1);
      String string4 = hashMap0.merge(string0, string3, biFunction0);
      String string5 = "compact";
      Connection connection1 = httpConnection0.referrer(string5);
      Connection connection2 = httpConnection0.request(connection_Request2);
      boolean boolean4 = httpConnection_Request0.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      int int0 = 4464;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      Connection connection1 = httpConnection0.followRedirects(boolean0);
      String string0 = "Header value must not be null";
      Connection connection2 = httpConnection0.data(string0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string1 = httpConnection_Request0.cookie(string0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser0);
      String string2 = "Header name must not be empty";
      // Undeclared exception!
      try { 
        httpConnection0.url(string2);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Header name must not be empty
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "del";
      String string1 = httpConnection_KeyVal0.toString();
      httpConnection_KeyVal0.key = string0;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      boolean boolean0 = httpConnection_Request1.hasHeader(httpConnection_KeyVal0.key);
      Parser parser0 = httpConnection_Request1.parser();
      Connection.Request connection_Request1 = httpConnection_Request1.followRedirects(httpConnection_Request0.followRedirects);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Request1.ignoreContentType);
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Request1.followRedirects = httpConnection_Request0.ignoreContentType;
      String string2 = httpConnection_KeyVal0.toString();
      boolean boolean1 = false;
      Connection connection1 = httpConnection0.ignoreContentType(boolean1);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(httpConnection_Request1.data, outputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "lt";
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string1 = "";
      String string2 = httpConnection_Response1.header(string1);
      Map<String, String> map0 = httpConnection_Response0.headers();
      String string3 = httpConnection_Response0.contentType();
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      httpConnection_Response2.statusMessage = string2;
      boolean boolean0 = httpConnection_Response2.hasCookie(httpConnection_Response0.charset);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      int int0 = httpConnection_Response2.statusCode();
      HttpConnection httpConnection1 = new HttpConnection();
      String[] stringArray0 = new String[1];
      String string4 = "gzip";
      stringArray0[0] = string4;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.maxBodySizeBytes);
      String string0 = "org.jsoup.parser.ParseError";
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      HttpConnection.Request httpConnection_Request1 = new HttpConnection.Request();
      String string1 = " \"";
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Request1.headers = map0;
      int int0 = (-1746);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(httpConnection_Request0.maxBodySizeBytes);
      Connection connection1 = httpConnection0.parser(parser1);
      boolean boolean0 = true;
      Connection connection2 = httpConnection0.ignoreContentType(boolean0);
      String string2 = "Htg|q'0==";
      Connection connection3 = httpConnection0.cookie(string2, string2);
      String string3 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string3);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueMatching";
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0, httpConnection_Request0.followRedirects);
      String string2 = "Data collection must not be null";
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      URL uRL0 = mockFile1.toURL();
      String string3 = mockFile1.getAbsolutePath();
      URL uRL1 = mockFile1.toURL();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string4);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request2.maxBodySize();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = ":]&_d$u8-yW*Ej*RA";
      String string6 = HttpConnection.encodeUrl(string5);
      String string7 = httpConnection_KeyVal0.key();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      String string8 = "(i}}kl?0={jm{8Vy@W";
      stringArray0[1] = string8;
      stringArray0[2] = string6;
      stringArray0[3] = string7;
      String string9 = "";
      stringArray0[4] = string9;
      stringArray0[5] = string5;
      stringArray0[6] = httpConnection_KeyVal0.value;
      stringArray0[7] = httpConnection_KeyVal1.value;
      stringArray0[1] = httpConnection_KeyVal1.value;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueMatching";
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = new MockFile(uRI1);
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setExecutable(boolean0, httpConnection_Request0.followRedirects);
      String string2 = "Data collection must not be null";
      MockFile mockFile1 = new MockFile(mockFile0, string2);
      URL uRL0 = mockFile1.toURL();
      String string3 = mockFile1.getAbsolutePath();
      URL uRL1 = mockFile1.toURL();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string4);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request2.maxBodySize();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = ":]&_d$u8-yW*Ej*RA";
      String string6 = HttpConnection.encodeUrl(string5);
      String string7 = httpConnection_KeyVal0.key();
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      String string8 = "(i}}kl?0={jm{8Vy@W";
      stringArray0[1] = string8;
      stringArray0[2] = string6;
      stringArray0[3] = string7;
      String string9 = "";
      stringArray0[4] = string9;
      stringArray0[5] = string5;
      stringArray0[6] = httpConnection_KeyVal0.value;
      stringArray0[7] = httpConnection_KeyVal1.value;
      stringArray0[8] = httpConnection_KeyVal1.value;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data;
      httpConnection_Request0.data = collection0;
      int int0 = (-1737);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      String string0 = "wv*";
      stringArray0[0] = string0;
      String string1 = "snQ98vd\"";
      stringArray0[1] = string1;
      String string2 = "zRWHx@";
      stringArray0[2] = string2;
      String string3 = "org.jsoup.parser.ParseErrorList";
      stringArray0[3] = string3;
      String string4 = "Request must be executed (with .execute(), .get(), or .post() before parsing response";
      stringArray0[4] = string4;
      String string5 = "CQioZ";
      stringArray0[5] = string5;
      Connection connection0 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "p`Z*N}h#rdYv;:jNh#";
      String string1 = ")G#*88_e";
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, httpConnection_KeyVal0.value);
      String string2 = HttpConnection.Response.getRequestCookieString(httpConnection_Request3);
      Connection.Request connection_Request0 = httpConnection_Request2.removeCookie(httpConnection_KeyVal1.value);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.KeyVal httpConnection_KeyVal3 = new HttpConnection.KeyVal();
      String string3 = "(2/Hp";
      httpConnection_KeyVal0.value = string3;
      boolean boolean0 = httpConnection_Response0.executed;
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.key(httpConnection_KeyVal0.value);
      Connection.Request connection_Request1 = httpConnection_Request3.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      Connection.Request connection_Request2 = httpConnection_Request3.ignoreContentType(httpConnection_Request0.ignoreContentType);
      String string4 = ".,M";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(httpConnection_KeyVal3.key, string4);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean2 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean2);
      String string5 = httpConnection_Response0.statusMessage();
      Connection connection1 = httpConnection0.timeout(httpConnection_Request2.maxBodySizeBytes);
      String string6 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)59;
      byteArray0[0] = byte0;
      byte byte1 = (byte)52;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      String string0 = ")g#*88_e";
      String string1 = "&vy']AyNFHcyLTE$3zA";
      Connection connection1 = httpConnection0.cookie(string0, string1);
      String string2 = "nunexv(*3v}kici$;(";
      try { 
        httpConnection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "DmQ\"Lg_BuZ";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: DmQ\"Lg_BuZ
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "g[Wh";
      String string1 = "E %8AI8fx";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = "g%!oV/";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.timeout(httpConnection_Request1.maxBodySizeBytes);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "org.jsoup.nodes.DocumentType";
      String string1 = "map";
      Document document0 = Parser.parse(string0, string1);
      Map<String, String> map0 = document0.dataset();
      Connection connection0 = httpConnection0.cookies(map0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      boolean boolean1 = false;
      Connection connection1 = httpConnection0.ignoreContentType(boolean1);
      int int0 = 0;
      Connection connection2 = httpConnection0.maxBodySize(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection connection3 = httpConnection0.response((Connection.Response) httpConnection_Response1);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      String string1 = "{a7H;NGz$aU,Bo";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(httpConnection_Request0.parser);
      String string0 = "O/VS5M,`3e!4";
      String string1 = "q\"K]]N?Ns3\\~HX[8LQ1";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int0 = 0;
      String string2 = httpConnection_Request0.header(httpConnection_KeyVal0.value);
      httpConnection_Request0.maxBodySizeBytes = httpConnection_Request2.timeoutMilliseconds;
      Connection.Request connection_Request0 = httpConnection_Request2.header(httpConnection_KeyVal0.value, string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      httpConnection0.req = (Connection.Request) httpConnection_Request0;
      String string0 = "2G";
      Connection connection0 = httpConnection0.cookie(string0, string0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "q";
      String string1 = HttpConnection.encodeUrl(string0);
      Connection.Request connection_Request0 = httpConnection0.request();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "PB62q3nZ8+\\D :}?G{l";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: PB62q3nZ8+\\D :}?G{l
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "Cookie value must not be null";
      String string1 = "bdo";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string2 = "D*'Qf^kw/";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(httpConnection_KeyVal1.value);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "mC";
      String string1 = "7-b>Pe";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      Parser parser1 = httpConnection_Request3.parser();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "hEIE'Wy{)!";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request1.timeoutMilliseconds);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(httpConnection_Request2.ignoreHttpErrors);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "XTNZ121)wdgrY";
      String string1 = "&kA";
      String string2 = HttpConnection.encodeUrl(string1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      String string3 = "";
      stringArray0[2] = string3;
      stringArray0[3] = string2;
      String string4 = "Yj^ ~";
      stringArray0[4] = string4;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = "section";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request1.url = uRL0;
      httpConnection_KeyVal0.value = string1;
      httpConnection_Request0.data = httpConnection_Request1.data;
      String string2 = httpConnection_Request0.cookie(httpConnection_KeyVal0.key);
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(httpConnection_Request0.ignoreContentType);
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(connection_Request0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Response connection_Response0 = httpConnection_Response0.url(uRL0);
      Map<String, String> map0 = null;
      httpConnection_Request1.headers = map0;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      int int0 = 0;
      httpConnection_Response1.statusCode = int0;
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "+||WHuF{MqhU]9.,m3~";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string0);
      int int0 = (-135);
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Request0.cookies = (Map<String, String>) hashMap0;
      boolean boolean0 = false;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 0;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ",:Vqpi}[d";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ,:Vqpi}[d
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = ")Jq<u";
      httpConnection_KeyVal0.key = string0;
      String string1 = httpConnection_KeyVal0.value();
      String string2 = "Kq@IE.";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = httpConnection_Request1.followRedirects();
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "_Ma'pwXQIive0~3b";
      String string1 = "org.jsoup.helper.HttpConnection$Request";
      httpConnection_KeyVal0.value = string1;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = 3;
      String string2 = "mWG$@Z-=\"";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      int int1 = httpConnection_Request3.timeout();
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(httpConnection_Request2.ignoreContentType);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string3 = "S9M6PL,XQ";
      // Undeclared exception!
      try { 
        HttpConnection.Response.getRequestCookieString(httpConnection_Response1.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "B<X}6Usp0";
      String string1 = "ZiJO*:UL8";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      String string0 = "Q~hTNVUd1:Q]X9u#";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "pop td not in cell";
      stringArray0[2] = string2;
      String string3 = "c|!iMN=$8')";
      stringArray0[3] = string3;
      String string4 = "kbd";
      stringArray0[4] = string4;
      String string5 = "";
      stringArray0[5] = string5;
      String string6 = "<!DOCTYPE";
      stringArray0[6] = string6;
      String string7 = "";
      stringArray0[7] = string7;
      Connection connection0 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.KeyVal connection_KeyVal0 = null;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(httpConnection_Request0.parser);
      boolean boolean0 = httpConnection_Request1.ignoreContentType();
      httpConnection_Request0.timeoutMilliseconds = httpConnection_Request1.timeoutMilliseconds;
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "!j2<|9";
      boolean boolean1 = httpConnection_Request1.hasCookie(string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.data(httpConnection_Request1.data);
      Connection connection1 = httpConnection0.method(connection_Method0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      String string1 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request1.scanHeaders(string1);
      boolean boolean2 = true;
      Connection connection2 = httpConnection0.followRedirects(boolean2);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(boolean1);
      URL uRL0 = MockURL.getFileExample();
      Connection connection3 = HttpConnection.connect(uRL0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string0);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      URL uRL1 = MockURL.getHttpExample();
      Connection connection1 = httpConnection0.url(uRL1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Accept-Encoding";
      String string1 = "[)&(,6;;]A!R)";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.value(string2);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "b9x{+^5\\.$";
      String string1 = "0U]?Ui_";
      Connection connection0 = httpConnection0.data(string0, string1);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "q)";
      Connection connection0 = httpConnection0.userAgent(string0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string0 = "Je8";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      String string1 = "";
      String string2 = httpConnection_Response0.getHeaderCaseInsensitive(string1);
      httpConnection_Response0.method = connection_Method0;
      Connection.Method connection_Method1 = Connection.Method.POST;
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method1);
      String string3 = "'S.c";
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string3);
      String string4 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "http";
      Connection connection0 = httpConnection0.userAgent(string5);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response1.method(connection_Method0);
      String string0 = httpConnection_Response1.charset();
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "cRP?nh5Pg+Z$neH";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Yc7L!5`+P76.$";
      Connection connection0 = httpConnection0.header(string0, string0);
      String string1 = "xh";
      Connection connection1 = httpConnection0.userAgent(string1);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key value pairs must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "yRd ";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      int int0 = (-2324);
      String string0 = "$rPJGLw8?0R9";
      String string1 = "font";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      String string2 = "H)<RbdJhj>";
      boolean boolean0 = false;
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      String string3 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string3);
      HttpConnection httpConnection0 = new HttpConnection();
      String string4 = "";
      Connection connection0 = httpConnection0.userAgent(string4);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection1 = httpConnection0.data((Map<String, String>) hashMap0);
      int int1 = 0;
      Connection connection2 = httpConnection0.timeout(int1);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      URI uRI0 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      httpConnection_Request0.parser = parser0;
      int int0 = 15;
      httpConnection_Request0.maxBodySizeBytes = int0;
      int int1 = 1621;
      Parser parser1 = parser0.setTrackErrors(int1);
      boolean boolean0 = false;
      Map<String, String> map0 = null;
      httpConnection_Request0.cookies = map0;
      httpConnection_Request0.ignoreContentType = boolean0;
      String string0 = "";
      List<Node> list0 = Parser.parseXmlFragment(string0, string0);
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      boolean boolean1 = httpConnection_Request0.ignoreHttpErrors();
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "b+-nfzHXzf,65;e";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "$VALUES";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-559);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      Connection.Request connection_Request0 = null;
      Connection connection0 = httpConnection0.request(connection_Request0);
      Parser parser0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.parser(parser0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "ylwD+1SX/)%xj>l";
      String string1 = httpConnection_Request1.cookie(string0);
      int int1 = httpConnection_Request1.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(string2, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "";
      httpConnection_Response1.contentType = string0;
      String string1 = httpConnection_Response1.charset();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      String string0 = "I8f2~s";
      String string1 = "&lt;";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      boolean boolean0 = linkedList0.offerFirst(httpConnection_KeyVal0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        HttpConnection.Response.writePost(linkedList0, pipedOutputStream0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "p";
      String string1 = "";
      Connection connection0 = httpConnection0.cookie(string0, string1);
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = ")T%V(q8";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "6pGo{,K8j8(c(Z#T2yZ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 3159;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      boolean boolean0 = httpConnection_Request2.hasHeader(httpConnection_KeyVal0.value);
      boolean boolean1 = httpConnection_Request2.followRedirects();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.parser(httpConnection_Request2.parser);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      stringArray0[0] = httpConnection_KeyVal0.key;
      stringArray0[1] = httpConnection_KeyVal0.value;
      stringArray0[2] = httpConnection_KeyVal0.value;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      int int0 = httpConnection_Response1.statusCode();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = httpConnection_Response0.cookie(string0);
      ByteBuffer byteBuffer0 = null;
      httpConnection_Response0.byteData = byteBuffer0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string2 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      List<String> list2 = hashMap0.put(string2, list1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      int int0 = httpConnection_Response0.statusCode();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Collection<Connection.KeyVal> collection0 = null;
      String string0 = "lE SEu^)<k<";
      Document document0 = Parser.parse(string0, string0);
      Element element0 = document0.head();
      Map<String, String> map0 = element0.dataset();
      Connection connection0 = httpConnection0.data(map0);
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "s7";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request2.method = connection_Method0;
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.method(connection_Method0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(string1);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      HttpConnection.Response.writePost(httpConnection_Request1.data, mockPrintStream1);
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "p`Z*N}h#rdYv;:jNh#";
      String string1 = ")G#*88_e";
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, httpConnection_KeyVal0.value);
      String string2 = HttpConnection.Response.getRequestCookieString(httpConnection_Request3);
      String string3 = "";
      Connection.Request connection_Request0 = httpConnection_Request2.removeCookie(string3);
      HttpConnection.KeyVal httpConnection_KeyVal3 = new HttpConnection.KeyVal();
      String string4 = "(2/Hp";
      httpConnection_KeyVal0.value = string4;
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.key(httpConnection_KeyVal0.value);
      Connection.Request connection_Request1 = httpConnection_Request3.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      Connection.Request connection_Request2 = httpConnection_Request3.ignoreContentType(httpConnection_Request0.ignoreContentType);
      String string5 = ".,M";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(httpConnection_KeyVal3.key, string5);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean1 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean1);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data;
      Connection connection0 = httpConnection0.data(collection0);
      Connection connection1 = httpConnection0.maxBodySize(int0);
      boolean boolean0 = true;
      Connection connection2 = httpConnection0.ignoreContentType(boolean0);
      String string0 = httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "Set-Cookie";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      Connection.Response connection_Response0 = null;
      Connection connection0 = httpConnection0.response(connection_Response0);
      String string2 = "Z qA";
      String string3 = "\n * ";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string2, string3);
      String string4 = httpConnection_KeyVal0.value();
      Connection.Request connection_Request0 = null;
      Connection connection1 = httpConnection0.request(connection_Request0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      // Undeclared exception!
      try { 
        httpConnection0.method(connection_Method0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "ibN&[IG";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "lt";
      String string2 = httpConnection_KeyVal0.toString();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int0 = 72;
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(httpConnection_KeyVal1.key);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      httpConnection_Request2.data = httpConnection_Request1.data;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection1 = httpConnection0.cookies(map0);
      Connection connection2 = httpConnection0.parser(httpConnection_Request1.parser);
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      int int1 = httpConnection_Request1.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.maxBodySizeBytes);
      httpConnection_Request0.parser = parser0;
      int int0 = 38;
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(httpConnection_Request0.parser);
      String string0 = "";
      boolean boolean0 = httpConnection_Request1.ignoreHttpErrors;
      boolean boolean1 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(boolean1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string1 = "6!C!uy$@g<oN&`hK";
      boolean boolean2 = connection_Request0.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(httpConnection_KeyVal0.key, httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "del";
      boolean boolean0 = true;
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      int int0 = (-2086);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "&!";
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URI uRI2 = MockURI.resolve(uRI1, string0);
      URL uRL0 = MockURI.toURL(uRI2);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string1 = "J<CM|N=_t=RP5";
      String string2 = hashMap0.put(string0, string1);
      Connection connection1 = httpConnection0.cookies(hashMap0);
      Connection connection2 = httpConnection0.data((Map<String, String>) hashMap0);
      Connection connection3 = httpConnection0.cookies(hashMap0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ":matches(%s";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, httpConnection0.HTTP_TEMP_REDIR, string0, uRLStreamHandler0);
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        connection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "r.rS6l'wI_[&wMVif";
      boolean boolean0 = false;
      httpConnection_Request0.ignoreContentType = boolean0;
      String string1 = ":eq(%d)";
      boolean boolean1 = true;
      httpConnection_Request0.followRedirects = boolean1;
      String string2 = httpConnection_Request0.getHeaderCaseInsensitive(string1);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean2, boolean3, httpConnection_Request0.ignoreContentType);
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      boolean boolean5 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean5);
      int int0 = httpConnection_Request0.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection0.HTTP_TEMP_REDIR, int0);
      httpConnection_Request0.headers = (Map<String, String>) hashMap0;
      Connection.Request connection_Request2 = httpConnection_Request0.ignoreHttpErrors(boolean1);
      Parser parser0 = httpConnection_Request0.parser();
      boolean boolean6 = httpConnection_Request0.ignoreContentType();
      String string3 = "4bY";
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 47;
      Connection connection0 = httpConnection0.maxBodySize(int1);
      String string4 = hashMap0.merge(string0, string3, biFunction0);
      String string5 = "compact";
      Connection connection1 = httpConnection0.referrer(string5);
      Connection connection2 = httpConnection0.request(connection_Request2);
      boolean boolean7 = httpConnection_Request0.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)59;
      byteArray0[0] = byte0;
      byte byte1 = (byte)52;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      String string0 = "nunexv(*3v}kici$;(";
      try { 
        httpConnection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "r.rS6l'wI_[&wMVif";
      boolean boolean0 = false;
      httpConnection_Request0.ignoreContentType = boolean0;
      String string1 = ":eq(%d)";
      boolean boolean1 = false;
      httpConnection_Request0.followRedirects = boolean1;
      String string2 = httpConnection_Request0.getHeaderCaseInsensitive(string1);
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      boolean boolean2 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean2);
      int int0 = httpConnection_Request0.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(httpConnection0.HTTP_TEMP_REDIR, int0);
      httpConnection_Request0.headers = (Map<String, String>) hashMap0;
      Connection.Request connection_Request2 = httpConnection_Request0.ignoreHttpErrors(boolean1);
      Parser parser0 = httpConnection_Request0.parser();
      boolean boolean3 = httpConnection_Request0.ignoreContentType();
      String string3 = "4bY";
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int1 = 47;
      Connection connection0 = httpConnection0.maxBodySize(int1);
      String string4 = hashMap0.merge(string0, string3, biFunction0);
      String string5 = "compact";
      Connection.Request connection_Request3 = httpConnection_Request0.removeHeader(string0);
      Connection connection1 = httpConnection0.referrer(string5);
      Connection connection2 = httpConnection0.request(connection_Request2);
      boolean boolean4 = httpConnection_Request0.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Response0.req = (Connection.Request) httpConnection_Request0;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response1.setupFromConnection(httpURLConnection0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "p`Z*N}h#rdYv;:jNh#";
      String string1 = ")G#*88_e";
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, httpConnection_KeyVal0.value);
      String string2 = HttpConnection.Response.getRequestCookieString(httpConnection_Request3);
      Connection.Request connection_Request0 = httpConnection_Request2.removeCookie(httpConnection_KeyVal1.value);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.KeyVal httpConnection_KeyVal3 = new HttpConnection.KeyVal();
      String string3 = "(2/Hp";
      httpConnection_KeyVal0.value = string3;
      boolean boolean0 = httpConnection_Response0.executed;
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.key(httpConnection_KeyVal0.value);
      Connection.Request connection_Request1 = httpConnection_Request3.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      httpConnection_Response0.executed = httpConnection_Request0.followRedirects;
      Connection.Request connection_Request2 = httpConnection_Request3.ignoreContentType(httpConnection_Request0.ignoreContentType);
      String string4 = ".,M";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(httpConnection_KeyVal3.key, string4);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean2 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean2);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "lt";
      String string1 = httpConnection_Response0.getHeaderCaseInsensitive(string0);
      httpConnection_Response0.statusMessage = string0;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string2 = "";
      httpConnection_Response1.contentType = httpConnection_Response0.contentType;
      String string3 = httpConnection_Response1.header(string2);
      Map<String, String> map0 = httpConnection_Response0.headers();
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      String string4 = httpConnection_Response0.contentType();
      HttpConnection.Response httpConnection_Response3 = new HttpConnection.Response(httpConnection_Response1);
      httpConnection_Response3.statusMessage = string3;
      boolean boolean0 = httpConnection_Response3.hasCookie(httpConnection_Response0.charset);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
