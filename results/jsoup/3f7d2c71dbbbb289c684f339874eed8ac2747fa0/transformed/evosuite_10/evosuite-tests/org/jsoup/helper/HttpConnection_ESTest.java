/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:11:37 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "h0Y/TWJCs/";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "#r:zfXei8Tak$g-^~'";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      boolean boolean0 = httpConnection_Request0.hasHeader(httpConnection_KeyVal0.key);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      String string2 = httpConnection_KeyVal2.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal3);
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(httpConnection_Request0.followRedirects);
      String string3 = "";
      httpConnection_KeyVal2.key = string3;
      String string4 = "org.jsoup.helper.HttpConnection$Response";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal2.key(string0);
      httpConnection_KeyVal0.key = string4;
      String string5 = httpConnection_KeyVal3.toString();
      String string6 = "Cookie map must not be null";
      String string7 = httpConnection_Request1.getHeaderCaseInsensitive(httpConnection_KeyVal0.key);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal2.value(string6);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      URL uRL0 = httpConnection_Response1.url();
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "{[V";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = httpConnection_KeyVal0.key();
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, httpConnection_KeyVal0.value);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "";
      Connection connection0 = httpConnection0.header(httpConnection_KeyVal0.key, string2);
      URL uRL0 = MockURL.getFtpExample();
      String string3 = ")eE\"N WZ&";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string3, uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, httpConnection_KeyVal0.value);
      Connection connection1 = HttpConnection.connect(uRL2);
      Connection.Response connection_Response0 = httpConnection0.response();
      String string4 = "maxSize must be 0 (unlimited) or larger";
      // Undeclared exception!
      try { 
        httpConnection0.url(string4);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      String string0 = "p{B$%C-cNQ";
      Connection connection0 = httpConnection0.referrer(string0);
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      Connection connection2 = httpConnection0.followRedirects(boolean0);
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      String string1 = "DR@";
      Connection connection3 = httpConnection0.cookie(string1, string0);
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "dir";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-1);
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string1);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 2059;
      String string0 = "html";
      HttpConnection.HTTP_TEMP_REDIR = httpConnection0.HTTP_TEMP_REDIR;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      String[] stringArray0 = new String[8];
      boolean boolean0 = false;
      Document document0 = Parser.parse(string0, string0);
      Document document1 = document0.clone();
      Element element0 = document1.text(string0);
      Map<String, String> map0 = element0.dataset();
      Connection connection1 = httpConnection0.data(map0);
      Connection connection2 = httpConnection0.ignoreContentType(boolean0);
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      String string1 = "laCdvHN7ZsJ}`6CTN";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "";
      String string1 = "nav";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = "!R\\o&YWV";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = "I;w4k(=CG=M";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string3);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      boolean boolean0 = httpConnection_Request0.hasCookie(string2);
      httpConnection_Request0.data = httpConnection_Request2.data;
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.parser(httpConnection_Request0.parser);
      String string4 = "Location";
      Connection connection1 = httpConnection0.userAgent(string4);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      String string0 = "VBo} tYZp";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Locale locale0 = Locale.KOREA;
      String string1 = "SH7!;=/T";
      Object[] objectArray0 = null;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, string1, objectArray0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-110);
      byteArray0[2] = byte2;
      byte byte3 = (byte)47;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-16);
      byteArray0[4] = byte4;
      mockFileOutputStream0.write(byteArray0);
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) string0;
      Connection.Request connection_Request1 = httpConnection_Request0.removeHeader(string0);
      mockFileOutputStream0.release();
      objectArray1[1] = (Object) mockFileOutputStream0;
      objectArray1[2] = (Object) mockPrintStream0;
      objectArray1[3] = (Object) mockFileOutputStream0;
      PrintStream printStream1 = mockPrintStream0.format(string0, objectArray1);
      HttpConnection.Response.writePost(collection0, printStream1);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "label";
      String string3 = HttpConnection.encodeUrl(string2);
      Connection connection0 = httpConnection0.referrer(string0);
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        HttpConnection.connect(string2);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: label
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "3#t0hOOsAo\\!*`iG";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = httpConnection_KeyVal1.toString();
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "org.jsoup.helper.HttpConnection$KeyVal";
      // Undeclared exception!
      try { 
        httpConnection0.data(httpConnection_KeyVal0.value, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "*wb";
      String string1 = hashMap0.put(string0, string0);
      String[] stringArray0 = new String[28];
      stringArray0[0] = string1;
      String string2 = "details";
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      stringArray0[4] = string1;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[5] = string1;
      stringArray0[6] = string1;
      stringArray0[7] = string1;
      stringArray0[8] = string1;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        linkedList0.remove(httpConnection0.HTTP_TEMP_REDIR);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 307, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      httpConnection_Request1.maxBodySizeBytes = httpConnection_Request0.timeoutMilliseconds;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = null;
      httpConnection_Request2.url = uRL0;
      boolean boolean0 = true;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.parser(httpConnection_Request0.parser);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = ":U#K-RQz";
      String string1 = "";
      TextNode textNode0 = new TextNode(string1, httpConnection_KeyVal0.key);
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Map<String, String> map0 = attributes1.dataset();
      httpConnection_Response0.headers = map0;
      Map<String, String> map1 = attributes1.dataset();
      httpConnection_Response0.charset = string0;
      int int1 = httpConnection_Response0.statusCode();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = null;
      String string3 = "";
      HttpConnection httpConnection1 = new HttpConnection();
      String string4 = httpConnection_Response0.contentType();
      String string5 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(string5);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-40);
      byteArray0[0] = byte0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection_Response0.req = httpConnection0.req;
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "wo3'spy";
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Object object0 = null;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      boolean boolean2 = linkedList0.removeIf(predicate3);
      List<String> list0 = hashMap0.put(string0, linkedList0);
      httpConnection_Response1.processResponseHeaders(hashMap0);
      String string1 = "a>ao:e2cvs\"";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: a>ao:e2cvs\"
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "W?i";
      Connection connection0 = httpConnection0.header(string0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string0, httpConnection_KeyVal1.key);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = httpConnection_Request2.cookie(httpConnection_KeyVal1.value);
      String string2 = "-jA`t^Yg!";
      String string3 = httpConnection_Request1.getHeaderCaseInsensitive(string2);
      String string4 = "org.jsoup.select.Evaluator$AttributeWithValueNot";
      Connection.Request connection_Request1 = httpConnection_Request2.cookie(httpConnection_KeyVal1.value, string4);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      String string5 = httpConnection_KeyVal0.value();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string5);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string0);
      boolean boolean0 = httpConnection_Request2.ignoreHttpErrors();
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string0);
      int int0 = 790;
      Connection.Request connection_Request2 = httpConnection_Request0.maxBodySize(int0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "fkv77be";
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string1 = "fkv77be";
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string2 = "";
      httpConnection_KeyVal0.value = string2;
      String string3 = "l%20/wtecz";
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean5 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Map.Entry<String, String> map_Entry0 = httpConnection_Request1.scanHeaders(string3);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string4 = "application/xml";
      String string5 = httpConnection_Request2.header(string4);
      boolean boolean6 = httpConnection_Request2.ignoreHttpErrors();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies();
      httpConnection_Response0.headers = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 2179;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(httpConnection_Request1.ignoreContentType);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Cookie map must not be null";
      Connection connection0 = httpConnection0.data(string0, string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ", state=";
      Connection connection0 = httpConnection0.header(string0, string0);
      Connection connection1 = httpConnection0.data(httpConnection_Request0.data);
      boolean boolean0 = true;
      Connection connection2 = httpConnection0.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "FM4qZuo'WC";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "z.a(t^X1i!";
      String string1 = "k=5dnat  Kg9";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.maxBodySizeBytes);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(httpConnection_Request0.followRedirects);
      boolean boolean0 = true;
      httpConnection_Request2.ignoreContentType = boolean0;
      String string2 = "7\\joaeq.\"S!";
      String string3 = httpConnection_Request0.header(string2);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string3);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "\"r,W";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string1 = "R:[|HH";
      String string2 = "Must supply a valid URL";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      String string3 = "Y~+\\%m}&Z@r3U2)z(";
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, string3);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "W?i";
      Connection connection0 = httpConnection0.header(string0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string0, httpConnection_KeyVal1.key);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = httpConnection_Request2.cookie(httpConnection_KeyVal1.value);
      String string2 = "-jA`t^Yg!";
      String string3 = httpConnection_Request1.getHeaderCaseInsensitive(string2);
      String string4 = "org.jsoup.select.Evaluator$AttributeWithValueNot";
      Connection.Request connection_Request1 = httpConnection_Request2.cookie(httpConnection_KeyVal1.value, string4);
      Connection.Request connection_Request2 = httpConnection_Request2.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      String string5 = httpConnection_KeyVal0.value();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string5);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string0);
      boolean boolean0 = httpConnection_Request2.ignoreHttpErrors();
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string0);
      int int0 = 790;
      Connection.Request connection_Request3 = httpConnection_Request0.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 19;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "Vg3IpUm mx2!PW^_ev:";
      String string1 = "URL must not be null";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string1);
      String string2 = "dOib}==,a";
      Connection.Request connection_Request0 = httpConnection_Request1.header(string0, string2);
      String string3 = "quirks";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string3);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = httpConnection_Request1.hasHeader(string0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean1 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.followRedirects(httpConnection_Request2.ignoreContentType);
      Connection.Request connection_Request2 = httpConnection_Request1.ignoreContentType(httpConnection_Request2.followRedirects);
      Connection.Request connection_Request3 = httpConnection_Request3.removeHeader(httpConnection_KeyVal0.key);
      httpConnection_Request3.ignoreContentType = boolean1;
      Connection.Request connection_Request4 = httpConnection_Request3.followRedirects(httpConnection_Request0.followRedirects);
      String string4 = "User-Agent";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string4);
      // Undeclared exception!
      try { 
        HttpConnection.connect(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Vg3IpUm mx2!PW^_ev:
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "LG;><dh{cb(%fP:u";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string1, httpConnection_KeyVal1.value);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      httpConnection_KeyVal0.key = httpConnection_KeyVal0.key;
      String string0 = httpConnection_KeyVal0.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data;
      httpConnection_Request0.data = collection0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "?";
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string0, string0);
      Map.Entry<String, String> map_Entry0 = httpConnection_Request1.scanHeaders(string0);
      Collection<Connection.KeyVal> collection1 = httpConnection_Request1.data();
      boolean boolean0 = httpConnection_Request1.followRedirects();
      String string1 = httpConnection_Request0.getHeaderCaseInsensitive(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      boolean boolean0 = linkedHashSet0.containsAll(linkedList0);
      Connection.KeyVal connection_KeyVal0 = null;
      boolean boolean1 = linkedHashSet0.add(connection_KeyVal0);
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      int int0 = 1870;
      Connection connection1 = httpConnection0.timeout(int0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      httpConnection_Response0.cookies = map0;
      String string0 = "lxM";
      String string1 = httpConnection_Response0.getHeaderCaseInsensitive(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      String string0 = "pBQe2[d<";
      Connection connection1 = httpConnection0.data(string0, string0);
      String string1 = "9C1snDci=<";
      int int0 = (-646);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection connection0 = httpConnection0.request(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      String string0 = "Location";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string0);
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean0);
      Connection connection0 = httpConnection0.request(connection_Request1);
      int int0 = 941;
      Connection connection1 = httpConnection0.timeout(int0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection2 = httpConnection0.response(connection_Response0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = false;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.timeout();
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = " ";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL:  
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "V{#[p4qC";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      Path path0 = mockFile0.toPath();
      boolean boolean1 = mockFile0.setReadable(boolean0, boolean0);
      URL uRL0 = mockFile0.toURL();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean2 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean2);
      Parser parser0 = httpConnection_Request0.parser();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      int int0 = 61;
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = ",+w=3@";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "comment";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies();
      httpConnection_Request0.cookies = map0;
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      int int1 = 307;
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int1);
      Parser parser1 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "User agent must not be null";
      boolean boolean0 = httpConnection_Request0.hasHeader(string0);
      httpConnection_Request0.url = uRL0;
      int int0 = httpConnection_Request0.maxBodySize();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "";
      String string1 = "acronym";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection0 = new HttpConnection();
      String string3 = "entities-base.properties";
      String string4 = "xE]XsbZJ(hl]J,";
      Connection connection0 = httpConnection0.header(string3, string4);
      Connection connection1 = httpConnection0.referrer(string0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      String string1 = "yS.T?Q;9MJ^j;\\aW";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request0.header(httpConnection_KeyVal0.value, httpConnection_KeyVal0.value);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request1.method = connection_Method0;
      int int0 = 1733;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      String string2 = ",x\"(l3rOepj-1{@;8<";
      String string3 = httpConnection_Request2.getHeaderCaseInsensitive(string2);
      Connection.Method connection_Method1 = Connection.Method.GET;
      Connection.Request connection_Request1 = httpConnection_Request2.method(connection_Method1);
      Map.Entry<String, String> map_Entry0 = httpConnection_Request2.scanHeaders(httpConnection_KeyVal0.value);
      boolean boolean0 = true;
      Connection.Request connection_Request2 = httpConnection_Request3.followRedirects(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = new HttpConnection.KeyVal();
      String string4 = httpConnection_KeyVal0.key();
      int int1 = httpConnection_Request2.maxBodySize();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection_KeyVal1.key = string0;
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection0 = httpConnection0.method(connection_Method0);
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "publicId";
      Connection connection2 = httpConnection0.userAgent(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      boolean boolean1 = httpConnection_Request0.ignoreHttpErrors();
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = "org.jsoup.parser.XmlTreeBuilder";
      URL uRL1 = MockURL.URL(uRL0, string0);
      Connection connection0 = HttpConnection.connect(uRL1);
      String[] stringArray0 = new String[2];
      String string1 = "";
      stringArray0[0] = string1;
      String string2 = "Cookie map must not be null";
      stringArray0[1] = string2;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      boolean boolean0 = true;
      httpConnection_Request0.followRedirects = boolean0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = MockURL.getFileExample();
      Connection.Request connection_Request0 = httpConnection_Request1.url(uRL0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      String string0 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      int int0 = (-1179);
      // Undeclared exception!
      try { 
        httpConnection_Request2.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, String> map0 = null;
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      httpConnection_Request0.headers = map0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.referrer(httpConnection_KeyVal0.value);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      int int0 = 20;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap0);
      HttpConnection.Response.MAX_REDIRECTS = int0;
      httpConnection_Response1.req = httpConnection_Response0.req;
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap1);
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, httpConnection_Response1.charset);
      String string1 = "D";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(httpConnection_Response0.statusMessage);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(boolean0);
      String string0 = HttpConnection.Response.getRequestCookieString(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = "param";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "AP1G!u";
      String string1 = "URL must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "org.jsoup.nodes.Attributes";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection0 = httpConnection0.data(map0);
      String string0 = ">";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: >
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      String string0 = "";
      String string1 = "";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection1 = httpConnection0.method(connection_Method0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection2 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      boolean boolean1 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean1);
      Connection connection3 = httpConnection0.request(httpConnection_Response0.req);
      httpConnection0.req = (Connection.Request) httpConnection_Request0;
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "audio";
      httpConnection_Response1.contentType = string0;
      String string1 = httpConnection_Response1.charset();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Response0.req = httpConnection_Response1.req;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Response1.numRedirects);
      String string2 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request1.scanHeaders(string2);
      httpConnection_Request1.followRedirects = httpConnection_Request0.ignoreHttpErrors;
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response1.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.GET;
      int int0 = (-3912);
      Connection.Method connection_Method1 = Connection.Method.GET;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method1);
      String string0 = "";
      Connection.Request connection_Request1 = httpConnection_Request0.removeCookie(string0);
      httpConnection_Request0.maxBodySizeBytes = int0;
      Connection.Request connection_Request2 = httpConnection_Request0.method(connection_Method0);
      boolean boolean0 = true;
      Connection.Request connection_Request3 = httpConnection_Request0.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 58;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(boolean0);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request0.url = uRL0;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.req = (Connection.Request) httpConnection_Request0;
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      httpConnection0.req = connection_Request0;
      String string0 = ":[/S?f!.za;.H%N5A";
      Connection connection0 = httpConnection0.data(string0, string0);
      int int0 = 28;
      httpConnection_Request0.ignoreContentType = boolean0;
      Connection connection1 = httpConnection0.timeout(int0);
      String string1 = "m";
      Connection.Request connection_Request1 = httpConnection_Request0.removeCookie(string1);
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string0);
      Connection connection2 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      URL uRL0 = MockURL.getFileExample();
      Connection connection3 = httpConnection0.url(uRL0);
      String string2 = "kr_\"FP&1j&9->";
      Connection connection4 = httpConnection0.referrer(string2);
      Connection.Response connection_Response0 = httpConnection0.response();
      try { 
        httpConnection0.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "L /WTEcz";
      String string1 = HttpConnection.encodeUrl(string0);
      String string2 = "J\\t4tsfNIosWE)7YfUr";
      Connection connection0 = httpConnection0.referrer(string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(boolean0);
      String string3 = "Cookie value must not be null";
      String string4 = "";
      Connection.Request connection_Request1 = httpConnection_Request2.header(string3, string4);
      httpConnection0.req = connection_Request0;
      boolean boolean1 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean1);
      String string5 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request3.scanHeaders(string5);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection2 = httpConnection0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      boolean boolean2 = httpConnection_Request2.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "?";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int1 = httpConnection_Request2.maxBodySize();
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(httpConnection_Request0.ignoreHttpErrors);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      stringArray0[0] = httpConnection_KeyVal0.value;
      stringArray0[1] = httpConnection_KeyVal0.value;
      stringArray0[2] = httpConnection_KeyVal0.value;
      stringArray0[3] = httpConnection_KeyVal0.key;
      stringArray0[4] = httpConnection_KeyVal0.key;
      stringArray0[5] = string0;
      stringArray0[6] = httpConnection_KeyVal0.key;
      stringArray0[7] = httpConnection_KeyVal0.value;
      Connection connection0 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies;
      Connection connection0 = httpConnection0.cookies(map0);
      String string0 = "Must supply a valid URL";
      Connection connection1 = httpConnection0.request(httpConnection_Response0.req);
      String string1 = "Referer";
      // Undeclared exception!
      try { 
        httpConnection0.header(httpConnection_Response0.charset, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string0);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "+0P`` fH-rF}j>";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      boolean boolean1 = linkedHashSet0.add(httpConnection_KeyVal1);
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 2540;
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection connection1 = httpConnection0.timeout(int0);
      String string0 = "Fkv77BE";
      String string1 = "j(wA5!";
      Connection connection2 = httpConnection0.header(string0, string1);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection3 = httpConnection0.method(connection_Method0);
      URL uRL1 = MockURL.getFtpExample();
      Connection connection4 = httpConnection0.url(uRL1);
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      Connection connection5 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      String string2 = "D";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string2, string2);
      int int1 = 0;
      Connection connection6 = httpConnection0.maxBodySize(int1);
      Connection connection7 = HttpConnection.connect(uRL1);
      boolean boolean0 = false;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      Connection connection8 = httpConnection0.ignoreHttpErrors(boolean0);
      Connection connection9 = httpConnection0.data(httpConnection_KeyVal0.key, httpConnection_KeyVal0.key);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.toString();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean1 = httpConnection_Request0.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 817;
      httpConnection_Response0.statusCode = int0;
      String string0 = "cookie value must not be null";
      httpConnection_Response0.charset = string0;
      String string1 = httpConnection_Response0.statusMessage();
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = null;
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      boolean boolean2 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string2);
      // Undeclared exception!
      try { 
        HttpConnection.Response.getRequestCookieString(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      String string0 = "";
      String string1 = "acronym";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = httpConnection_KeyVal0.key();
      HttpConnection httpConnection0 = new HttpConnection();
      String string3 = "entities-base.properties";
      String string4 = "xE]XsbZJ(hl]J,";
      boolean boolean0 = false;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Request connection_Request0 = httpConnection_Response1.req;
      Connection connection0 = httpConnection0.request(connection_Request0);
      // Undeclared exception!
      try { 
        httpConnection0.followRedirects(boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "{[V";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = httpConnection_KeyVal0.key();
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, httpConnection_KeyVal0.value);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "";
      Connection connection0 = httpConnection0.header(httpConnection_KeyVal0.key, string2);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      stringArray0[3] = httpConnection_KeyVal0.key;
      stringArray0[4] = httpConnection_KeyVal1.key;
      stringArray0[5] = string2;
      stringArray0[6] = httpConnection_KeyVal1.value;
      String string3 = "[fR<te-P";
      stringArray0[7] = string3;
      Connection connection1 = connection0.data(stringArray0);
      URL uRL0 = MockURL.getFtpExample();
      String string4 = ")eE\"N WZ&";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string4, uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, httpConnection_KeyVal0.value);
      String string5 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal1.key(string5);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      String string0 = "";
      String string1 = "dir";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-1);
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeCookie(string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request2.cookie(string2, httpConnection_KeyVal0.key);
      String string3 = "-G|";
      boolean boolean0 = httpConnection_Request0.hasHeader(string3);
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request2.ignoreContentType(httpConnection_Request0.followRedirects);
      String string4 = HttpConnection.Response.getRequestCookieString(httpConnection_Request4);
      Connection.Method connection_Method0 = Connection.Method.POST;
      HttpConnection.Request httpConnection_Request5 = (HttpConnection.Request)httpConnection_Request2.method(connection_Method0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "";
      try { 
        MockURL.URL(string5, httpConnection_KeyVal0.key, string4);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection0.res;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      int int0 = httpConnection_Response2.statusCode();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      String string0 = "*3=6&1sfC0/";
      String string1 = "@6<#}\\6*1>&4^-";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string1);
      String string2 = "YkRH-fk";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = "cite";
      boolean boolean0 = linkedHashSet0.add(httpConnection_KeyVal1);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "h0Y/TWJCs/";
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal(string0, string0);
      String string1 = "#r:zfXei8Tak$g-^~'";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      boolean boolean0 = httpConnection_Request0.hasHeader(httpConnection_KeyVal0.key);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      String string2 = httpConnection_KeyVal2.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal3);
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(httpConnection_Request0.followRedirects);
      String string3 = "";
      httpConnection_KeyVal2.key = string3;
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal2.key(string0);
      httpConnection_KeyVal0.key = httpConnection_KeyVal1.key;
      String string4 = httpConnection_KeyVal3.toString();
      String string5 = "Cookie map must not be null";
      String string6 = httpConnection_Request1.getHeaderCaseInsensitive(httpConnection_KeyVal0.key);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal2.value(string5);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      URL uRL0 = httpConnection_Response1.url();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response2);
      Connection.Response connection_Response0 = httpConnection0.response();
      int int0 = httpConnection_Response1.statusCode();
      String string7 = httpConnection_KeyVal5.key();
      // Undeclared exception!
      try { 
        httpConnection0.cookie(httpConnection_Response2.contentType, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "w?i";
      String string1 = httpConnection_Response0.cookie(string0);
      String string2 = httpConnection_Response0.charset();
      String string3 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      int int0 = 2;
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      httpConnection_Response0.byteData = byteBuffer0;
      Map<String, String> map0 = null;
      httpConnection_Response0.cookies = map0;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, httpConnection_Response0.executed, boolean0, boolean1);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "wo3'spy";
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string0, linkedList0);
      httpConnection_Response1.processResponseHeaders(hashMap0);
      String string1 = "a>ao:e2cvs\"";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: a>ao:e2cvs\"
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "L /WTEcz";
      String string1 = HttpConnection.encodeUrl(string0);
      String string2 = "E[[a.1/*04";
      Connection connection0 = httpConnection0.referrer(string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection0.HTTP_TEMP_REDIR);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(boolean0);
      String string3 = "Cookie value must not be null";
      String string4 = "";
      Connection.Request connection_Request1 = httpConnection_Request2.header(string3, string4);
      httpConnection0.req = connection_Request0;
      boolean boolean1 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean1);
      String string5 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request3.scanHeaders(string5);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection2 = httpConnection0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        connection1.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URLEncoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      int int0 = (-1954267073);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "*wb";
      String string1 = hashMap0.put(string0, string0);
      String[] stringArray0 = new String[28];
      stringArray0[0] = string0;
      String string2 = "details";
      stringArray0[1] = string2;
      stringArray0[2] = string0;
      stringArray0[4] = string1;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      stringArray0[23] = string1;
      stringArray0[6] = string1;
      stringArray0[7] = string1;
      stringArray0[8] = string1;
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      Object object0 = new Object();
      boolean boolean1 = hashMap0.remove((Object) string0, object0);
      String string3 = hashMap0.put(string0, string0);
      Connection connection1 = httpConnection0.cookies(hashMap0);
      String string4 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string4, string4);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
