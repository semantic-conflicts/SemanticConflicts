/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:06:48 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = 302;
      Connection connection1 = connection0.maxBodySize(int0);
      String string0 = "&gt;";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: &gt;
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      String string0 = "<}fvMB)9";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      String string1 = "Request must be executed (with .execute(), .get(), or .post() before getting response body";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "`s tr";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      Map<String, String> map0 = null;
      httpConnection_Response0.cookies = map0;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      int int0 = 64;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(int0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string0, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "org.jsoup.select.Evaluator$AttributeStarting";
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string0, string1);
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.value(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "@Y`BhIc&[CN([gw/#";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "text";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      String string2 = "tag name must not be empty.";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string1);
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = httpConnection_KeyVal1.value();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "a";
      String string1 = "ib\\eFq]odKXCt#ZBOI-";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string2 = "CH[h";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      String string3 = "h*;i437&,$5q7#";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string0, string3);
      String string4 = httpConnection_KeyVal3.toString();
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal3.key(string1);
      String string5 = httpConnection_KeyVal5.key();
      String string6 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "7@Q9!g@";
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string1);
      String string2 = "";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string2);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = null;
      Connection.Method connection_Method0 = Connection.Method.POST;
      String string1 = null;
      String string2 = "vi$_";
      String string3 = "https";
      // Undeclared exception!
      try { 
        Connection.Method.valueOf(string1);
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string0 = "Ugd'isP<[CYJwvL=@";
      String string1 = "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml";
      String string2 = "|J";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string1, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = MockURL.getFtpExample();
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL0);
      Connection.Response connection_Response2 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Malformed URL: ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "ismap";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Method must not be null";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      String string1 = httpConnection_Response0.statusMessage();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "nE<1d%'y9t+DQy1{!~";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: nE<1d%'y9t+DQy1{!~
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      int int0 = httpConnection_Response0.statusCode();
      String string1 = "";
      String string2 = "HjbHq3eLfcTD";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "&gt;";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: &gt;
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "http:/";
      Connection connection0 = HttpConnection.connect(string0);
      String string1 = "Header name must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "Cookie map must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, string2);
      String string3 = "F/|f4jV}6XQ\\";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string3);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string3);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.value(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = httpConnection_Response0.contentType();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "key val must not be null";
      String string1 = "key val must not be null";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "eXW6.h:A";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      String string1 = null;
      String string2 = "";
      String string3 = "";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string3);
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "XmN)y[} d{MK_ttE";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "563t";
      String string1 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      String string2 = "3]U5w.+*)WnOd!;3F\\";
      try { 
        MockURL.URL(string2);
      } catch(MalformedURLException e) {
         //
         // no protocol: 3]U5w.+*)WnOd!;3F\\
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreContentType(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "&gt;";
      Connection connection1 = HttpConnection.connect(uRL0);
      String string1 = null;
      // Undeclared exception!
      try { 
        connection0.userAgent(string1);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection1 = connection0.method(connection_Method0);
      Connection connection2 = HttpConnection.connect(uRL0);
      String string0 = null;
      Connection connection3 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.followRedirects(boolean0);
      String string0 = "&gt;";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: &gt;
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      String string0 = "gzip";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      List<String> list1 = hashMap0.put(string0, list0);
      hashMap0.forEach(biConsumer0);
      String string1 = "4r>.5N7!U<1HOw,pl-Y";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = linkedList1.add(string1);
      List<String> list2 = hashMap0.put(string1, linkedList1);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string2 = "tag name must not be empty.";
      String string3 = "";
      hashMap0.clear();
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string2);
      String string4 = " ";
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      Connection connection1 = connection0.request(connection_Request0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Must be false";
      Connection connection1 = connection0.referrer(string0);
      boolean boolean0 = true;
      Connection connection2 = connection0.ignoreContentType(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "&gt;";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection1 = connection0.data(map0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "=";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add(string0);
      List<String> list0 = hashMap0.put(string1, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string2 = "Kj7aW%5Jjnkm";
      String string3 = "nav";
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string3);
      String string4 = "d?rY)}U^Z_F[-jH{Z";
      String string5 = "must supply a valid url";
      linkedList1.push(string5);
      Connection.Response connection_Response2 = httpConnection_Response0.header(string2, string4);
      List<String> list1 = hashMap0.put(string0, linkedList1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "";
      // Undeclared exception!
      try { 
        connection0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
