/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:22:18 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.URL;
import java.net.UnknownServiceException;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "org.jsoup.helper.HttpConnection$Response";
      String string1 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      String string2 = "^8";
      URL uRL0 = null;
      httpConnection_Response0.url = uRL0;
      Connection.Response connection_Response1 = httpConnection_Response0.header(string2, string2);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "DVX";
      String string1 = "rXgvs[S;~ah";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "Content-Encoding";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string0);
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Response0.headers = map0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal1.value(string2);
      String string5 = "tcth&~]s=L5:6I";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string6 = "a#YI$is";
      boolean boolean0 = linkedList0.add(string6);
      List<String> list0 = hashMap0.putIfAbsent(string5, linkedList0);
      BiFunction<Object, List<String>, List<String>> biFunction0 = (BiFunction<Object, List<String>, List<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Connection.Response connection_Response0 = httpConnection_Response0.header(string2, string5);
      List<String> list1 = hashMap0.computeIfPresent(string4, biFunction0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "mzxzJyKwxSQ";
      BiFunction<Object, List<String>, List<String>> biFunction0 = (BiFunction<Object, List<String>, List<String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.clear();
      List<String> list0 = hashMap0.computeIfPresent(string0, biFunction0);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = hashMap0.remove(object0, object1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "n{GA2\"";
      String string1 = null;
      String string2 = "";
      String string3 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string3);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Data key must not be empty";
      String string1 = "Insert position out of bounds.";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string2 = "Tpuxnwpi:it";
      URL uRL1 = MockURL.getFileExample();
      String string3 = "0ud)RX7/U YQSWfav\")";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string3);
      String string4 = "extended";
      String string5 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string4, string5);
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string1);
      Connection.Response connection_Response2 = httpConnection_Response0.removeHeader(string2);
      int int0 = httpConnection_Response0.statusCode();
      int int1 = httpConnection_Response0.statusCode();
      String string6 = httpConnection_KeyVal0.toString();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string7 = httpConnection_Response0.charset();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeHeader(string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "Must supply an even number of key value pairs";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "h";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: h
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string0 = "~N=|t1";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreContentType(boolean0);
      int int0 = 4779;
      Connection connection2 = connection0.timeout(int0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "@@?";
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      String string1 = "_CV8`lDc)V>G4";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      Map<String, String> map0 = null;
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      httpConnection_Response0.headers = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeHeader(string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "Data key must not be empty";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Data key must not be empty
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "~N=|t1";
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreContentType(boolean0);
      try { 
        connection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = "B{f:LG}";
      URL uRL1 = MockURL.URL(uRL0, string0);
      Connection connection0 = HttpConnection.connect(uRL1);
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url;
      httpConnection_Response0.url = uRL0;
      int int0 = httpConnection_Response0.statusCode();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Matches";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      String string2 = ")7(qGJjKP";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.key(string2);
      String string3 = "";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string3);
      String string4 = httpConnection_KeyVal4.value();
      String string5 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Attribute";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "g,7JjUHAl?r";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string0);
      String string2 = httpConnection_KeyVal2.key();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = HttpConnection.connect(uRL0);
      Parser parser0 = Parser.xmlParser();
      Connection connection2 = connection1.parser(parser0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection3 = connection1.method(connection_Method0);
      Connection connection4 = HttpConnection.connect(uRL0);
      String string0 = "";
      String string1 = "H3}sEOLZY=]S8";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "~N=|t1";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response1 = connection0.response();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "~N=|t1";
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreContentType(boolean0);
      int int0 = 4779;
      Connection connection2 = connection0.timeout(int0);
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection3 = connection0.data(map0);
      try { 
        connection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Data key must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "Tpuxnwpi:it";
      URL uRL1 = MockURL.getFileExample();
      String string2 = "0ud)RX7/U YQSWfav\")";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = "extended";
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      String string5 = httpConnection_KeyVal0.toString();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string6 = httpConnection_KeyVal0.key();
      String string7 = httpConnection_KeyVal0.value();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string6);
      String[] stringArray0 = new String[2];
      String string8 = "DZx~4u8Rd8w'ZH";
      stringArray0[0] = string8;
      stringArray0[1] = string6;
      Connection connection1 = connection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Data key must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = "Tpuxnwpi:it";
      URL uRL1 = MockURL.getFileExample();
      String string2 = "0ud)RX7/U YQSWfav\")";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      String string3 = "extended";
      String string4 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string3, string4);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string1);
      int int0 = httpConnection_Response0.statusCode();
      int int1 = httpConnection_Response0.statusCode();
      String string5 = httpConnection_KeyVal0.toString();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string6 = httpConnection_Response0.charset();
      Connection connection1 = connection0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "~N=|t1";
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreContentType(boolean0);
      Connection connection2 = connection0.referrer(string1);
  }
}
