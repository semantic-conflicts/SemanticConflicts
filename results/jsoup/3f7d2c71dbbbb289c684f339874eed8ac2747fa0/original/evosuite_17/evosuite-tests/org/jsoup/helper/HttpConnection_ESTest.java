/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:20:27 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = httpConnection_Response0.charset();
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "W2a<";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "2Fo)?Dei#V$ZII]T";
      String string2 = "samp";
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string0);
      String string3 = "BNv";
      Connection.Response connection_Response2 = httpConnection_Response0.cookie(string2, string3);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      boolean boolean0 = linkedList0.retainAll(linkedList1);
      String string4 = "V+QejOGrbu";
      List<String> list0 = hashMap0.put(string4, linkedList0);
      String string5 = "Request must be executed (with .execute(), .get(), or .post() before getting response body";
      String string6 = "\\^^wc*@ox(Ke`[AnA#";
      boolean boolean1 = linkedList0.add(string6);
      List<String> list1 = hashMap0.put(string5, linkedList0);
      List<String> list2 = hashMap0.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: W2a<
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = " `y&^,J#DS'?A";
      String string1 = "Y+M^7HL(NG";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "://";
      String string3 = httpConnection_KeyVal0.toString();
      String string4 = "I~-Ur%g+";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, string4);
      String string5 = "6$z|TAGroEMz}/r(62";
      String string6 = "cs*LO\"(s:hmf<,xv";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string6);
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string2, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string2, string1);
      String string7 = ":jL:g";
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal0.value(string7);
      String string8 = "c`5ucpb!][dL=*(c";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal0.value(string2);
      String string9 = httpConnection_KeyVal0.toString();
      String string10 = "7ARsh4<5c.xK";
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(string10, string3);
      HttpConnection.KeyVal httpConnection_KeyVal9 = HttpConnection.KeyVal.create(string0, string2);
      HttpConnection.KeyVal httpConnection_KeyVal10 = HttpConnection.KeyVal.create(string2, string8);
      String string11 = "";
      String string12 = "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML";
      HttpConnection.KeyVal httpConnection_KeyVal11 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal12 = HttpConnection.KeyVal.create(string12, string2);
      String string13 = "BO=TgS{kWOZEGqc/^";
      HttpConnection.KeyVal httpConnection_KeyVal13 = httpConnection_KeyVal0.value(string13);
      HttpConnection.KeyVal httpConnection_KeyVal14 = httpConnection_KeyVal0.value(string11);
      HttpConnection.KeyVal httpConnection_KeyVal15 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal16 = httpConnection_KeyVal0.value(string0);
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "h3";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment(string0, string1);
      Map<String, String> map0 = document0.dataset();
      Document document1 = document0.normalise();
      httpConnection_Response0.cookies = map0;
      String string2 = "&I,,(";
      String string3 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string2, string3);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string4 = "lP/F[Bk\"yY;yJ| ";
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = "text";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL1);
      String string1 = "#declaration";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string0);
      String string2 = "n0)";
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      String string4 = httpConnection_KeyVal1.toString();
      String string5 = "org.jsoup.helper.HttpConnection$Base";
      String string6 = httpConnection_KeyVal1.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string5);
      String string7 = httpConnection_KeyVal1.value();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string8 = "CaGSl";
      Connection connection1 = connection0.header(string4, string8);
      try { 
        connection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "JJ7Z12<1@_}!";
      String string1 = "font";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "aside";
      String string3 = null;
      String string4 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "nb{C";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: nb{C
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "Ic,+Cu";
      String string1 = "; ";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = ",UR}Flx;|*V+! =";
      String string1 = "";
      String string2 = "org.jsoup.helper.HttpConnection$Base";
      String string3 = null;
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "O~)g uR9)v0(A";
      String string1 = "muted";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "&5!'\"S>?[\\\\-";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: &5!'\"S>?[\\\\-
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "g\\RkXI\\5!";
      String string1 = null;
      Attributes attributes0 = new Attributes();
      String string2 = "org.jsoup.select.Collector$Accumulator";
      String string3 = attributes0.get(string2);
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Response0.headers = map0;
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string1);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "Xrnsw2le%";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "HTTP error fetching URL";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.toString();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "p[e3*mK5#2z@U";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "Request must be executed (with .execute(), .get(), or .post() before parsing response";
      String string2 = "1l>X>|,FT-";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string0, string1);
      String string3 = "Gbs9z1y6TzLWk./X 8";
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string3);
      String string4 = "W]";
      String string5 = "Cookie name must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal6 = HttpConnection.KeyVal.create(string1, string5);
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal0.value(string4);
      String string6 = httpConnection_KeyVal6.toString();
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = httpConnection_KeyVal0.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      // Undeclared exception!
      try { 
        HttpConnection.connect(string8);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: p[e3*mK5#2z@U=W]
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "[";
      int int0 = 20;
      String string1 = "jReCg!b$l";
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection1 = connection0.method(connection_Method0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = ",UR}Flx;|*V+! =";
      String string1 = "";
      String string2 = "org.jsoup.helper.HttpConnection$Base";
      Map<String, String> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.headers = map0;
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string2);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "R41^=-OYo,&QHlA]l6X";
      String string1 = "sortable";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "\\?";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "`px5U|3";
      String string1 = "N_/LT";
      String string2 = "cJ^";
      String string3 = "";
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "caption";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string1 = ":\"'A]<_Kn\\";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string1);
      String string2 = httpConnection_KeyVal2.value();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url;
      httpConnection_Response0.url = uRL0;
      String string0 = "O>7-\"7(";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      httpConnection_Response0.url = uRL0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(string0, string0);
      Document document1 = document0.clone();
      String string1 = "BXS";
      Element element0 = document1.val(string1);
      Element element1 = document0.head();
      String string2 = document1.html();
      Map<String, String> map0 = document1.dataset();
      httpConnection_Response0.headers = map0;
      String string3 = "option";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string3);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      String string4 = httpConnection_Response0.statusMessage();
      int int0 = httpConnection_Response0.statusCode();
      String string5 = "DpAhR#cDLvIe:";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string5, string2);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Response0.url = uRL0;
      String string0 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "#GD;YJfjqsm7Kd18{'";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "d-lCE'G";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string1);
      String string2 = httpConnection_KeyVal0.toString();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = httpConnection_KeyVal0.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = httpConnection_Response0.charset();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string5 = "application/xhtml+xml";
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string5, list0);
      Object object0 = hashMap0.clone();
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "h3";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment(string0, string1);
      Map<String, String> map0 = document0.dataset();
      Document document1 = document0.normalise();
      String string2 = "&I,,(";
      String string3 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string2, string3);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string1, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string4 = "lP/F[Bk\"yY;yJ| ";
      Document document2 = Document.createShell(string4);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "#text";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      List<String> list0 = hashMap0.getOrDefault(httpConnection_Response0, linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string2 = "z'Zc+t\"`L";
      boolean boolean0 = linkedList1.add(string2);
      String string3 = "";
      List<String> list1 = hashMap0.put(string3, linkedList1);
      List<String> list2 = hashMap0.put(string1, linkedList1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "Must supply a valid URL";
      String string1 = null;
      String string2 = "#QY2g+BZ8idI";
      String string3 = "65+a^Q/[W=2iA.CdMS";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string2, string3);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string4 = null;
      // Undeclared exception!
      try { 
        connection0.referrer(string4);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = "text";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL1);
      String string1 = "#declaration";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string0);
      String string2 = "n0)";
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      String string4 = httpConnection_KeyVal1.toString();
      String string5 = "org.jsoup.helper.HttpConnection$Base";
      String string6 = httpConnection_KeyVal1.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string5);
      String string7 = httpConnection_KeyVal1.value();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string8 = "CaGSl";
      Connection connection1 = connection0.header(string4, string8);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      String string0 = "text";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL1);
      Connection connection1 = connection0.userAgent(string0);
      String string1 = "#declaration";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string0);
      String string2 = "n0)";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = "org.jsoup.helper.HttpConnection$Base";
      String string5 = httpConnection_KeyVal1.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string4);
      String string6 = httpConnection_KeyVal1.value();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
