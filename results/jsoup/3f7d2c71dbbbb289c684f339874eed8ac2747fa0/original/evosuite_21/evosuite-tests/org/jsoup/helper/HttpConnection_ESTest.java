/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:34:19 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "V/k'CXnX4G'U[";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string3 = "";
      String string4 = "!r.}'X";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string3);
      String string5 = "dg%usg7_nRQY9";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string0, string5);
      String string6 = "#Ji\"V0cum&";
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal1.key(string6);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string7 = "Xdf.z1a-Fqq";
      String string8 = "";
      Connection connection1 = connection0.cookie(string7, string8);
      String string9 = httpConnection_KeyVal1.value();
      Connection connection2 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteURL evoSuiteURL0 = null;
      String string10 = "width must be > 0";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string10);
      httpConnection_Response0.url = uRL0;
      String string11 = httpConnection_Response0.charset();
      String[] stringArray0 = new String[8];
      stringArray0[0] = string5;
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      stringArray0[1] = string11;
      stringArray0[2] = string11;
      stringArray0[3] = string3;
      stringArray0[4] = string4;
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = string5;
      // Undeclared exception!
      try { 
        connection2.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = httpConnection_Response0.url;
      httpConnection_Response0.url = uRL0;
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      String string0 = ";[blQ*9PhLr";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add(string0);
      List<String> list0 = hashMap1.put(string0, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      String string1 = "MyO%yN~azoyf~";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "&C:}\\{V";
      Connection connection1 = connection0.header(string0, string0);
      String string1 = "";
      try { 
        connection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "B k^=T,O$mK.[";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      String string1 = httpConnection_Response0.statusMessage();
      String string2 = "xi-@jD-l}wLchaV/Wo&";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Response0.cookies = (Map<String, String>) hashMap0;
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string2);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      String string3 = httpConnection_Response0.charset();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      String string4 = " ";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = "";
      Document document0 = new Document(string1);
      Connection.Method connection_Method0 = Connection.Method.GET;
      Node node0 = document0.previousSibling();
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string2 = "muted";
      Elements elements0 = document0.getElementsByAttributeValueMatching(string2, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "a^()SEhiksUl8aHM";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = " <%s>";
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string1);
      String string2 = "Dub]L@v$?L";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string2);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Dub]L@v$?L
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = MockURL.getFileExample();
      Connection.Response connection_Response0 = httpConnection_Response0.url(uRL0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "ih!6+77x";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      boolean boolean0 = predicate0.test(linkedList0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      boolean boolean1 = linkedList0.removeIf(predicate4);
      String string1 = "org.jsoup.parser.Token$Tag";
      boolean boolean2 = linkedList1.add(string1);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string0, list0);
      Collection<List<String>> collection0 = hashMap0.values();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "^&(";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = ">L:Fn7K+mQG";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "wbRaz|";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "Only http & https protocols supported";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "eJ2U1dRE^nZ$gb]11";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "User-Agent";
      String string1 = "gzip";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "code";
      String string3 = httpConnection_KeyVal0.toString();
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string4);
      String string5 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      String string6 = httpConnection_KeyVal2.toString();
      String string7 = httpConnection_KeyVal2.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string5, string5);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string7);
      String string8 = "huzm6'P+|1+%>yO";
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.key(string8);
      String string9 = "+;[.#GVSMV,fK_T#^";
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal2.value(string9);
      String string10 = "dmNOA4M\\ra";
      HttpConnection.KeyVal httpConnection_KeyVal7 = HttpConnection.KeyVal.create(string7, string10);
      String string11 = "$!hG\\aNWd=et0~_";
      HttpConnection.KeyVal httpConnection_KeyVal8 = httpConnection_KeyVal7.value(string11);
      String string12 = httpConnection_KeyVal7.toString();
      String string13 = httpConnection_KeyVal0.value();
      String string14 = httpConnection_KeyVal2.toString();
      String string15 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string15);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "[%s~=%s]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string0);
      String string1 = httpConnection_KeyVal2.key();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "X^kw@8L#H$H/;`zm(&";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: X^kw@8L#H$H/;`zm(&
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = ":G(5A2IuVUQse`%6o";
      String string2 = "";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string1, string2);
      Connection.Method connection_Method0 = Connection.Method.POST;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = "=X@p";
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>(hashMap0);
      List<String> list0 = hashMap1.remove((Object) httpConnection_Response0);
      httpConnection_Response0.processResponseHeaders(hashMap1);
      String string0 = "data-";
      String string1 = "`b>-8(";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string2);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      String string0 = "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.";
      String string1 = ":yCjx@`Yp11eCNc'6";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string1, list0);
      String string2 = "3H2";
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      boolean boolean0 = linkedList2.add(string2);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2, locale_FilteringMode1);
      List<String> list3 = hashMap0.put(string2, list2);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string3 = httpConnection_Response0.statusMessage();
      String string4 = null;
      String string5 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string4, string5);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = MockURL.getFtpExample();
      Connection.Response connection_Response0 = httpConnection_Response0.url(uRL0);
      String string0 = "-`a.+)xtQhcG^3H)";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string0);
      String string1 = "IH!6+77X";
      Connection.Response connection_Response2 = httpConnection_Response0.removeHeader(string1);
      String string2 = httpConnection_Response0.statusMessage();
      String string3 = httpConnection_Response0.charset();
      String string4 = "6\"4 oaGzCQCu`N'";
      String string5 = "Malformed URL: ";
      Connection.Response connection_Response3 = httpConnection_Response0.removeCookie(string5);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Response0.method = connection_Method0;
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = " ?_d1kl/}";
      String string1 = "fuL!G9m(}f=/<pns0G";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      URL uRL0 = MockURL.getFtpExample();
      String string2 = "2-#_$d";
      String string3 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Header value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "V/k'CXnX4G'U[";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string3 = "";
      String string4 = "!r.}'X";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string4);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string3);
      String string5 = "dg%usg7_nRQY9";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string0, string5);
      String string6 = "#Ji\"V0cum&";
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal1.key(string6);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string7 = httpConnection_KeyVal1.value();
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteURL evoSuiteURL0 = null;
      String string8 = "width must be > 0";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string8);
      httpConnection_Response0.url = uRL0;
      String string9 = httpConnection_Response0.charset();
      String[] stringArray0 = new String[8];
      stringArray0[0] = string5;
      stringArray0[1] = string9;
      stringArray0[2] = string9;
      stringArray0[3] = string3;
      stringArray0[4] = string4;
      stringArray0[5] = string5;
      stringArray0[6] = string3;
      stringArray0[7] = string5;
      // Undeclared exception!
      try { 
        connection1.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = " x?T34mU~oS";
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = false;
      Connection connection1 = connection0.followRedirects(boolean0);
      String string1 = "[%s~=%s]";
      String string2 = "x";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string2);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      String string3 = httpConnection_KeyVal1.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "V/k'CXnX4G'U[";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string3 = "";
      String string4 = "%";
      String string5 = ":ycjx@`yp11ecnc'6";
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string4, string5);
      String string6 = "!r.}'X";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string6);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal1.value(string3);
      String string7 = "dg%usg7_nRQY9";
      HttpConnection.KeyVal httpConnection_KeyVal6 = HttpConnection.KeyVal.create(string0, string7);
      String string8 = "#Ji\"V0cum&";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal1.key(string8);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string9 = httpConnection_KeyVal1.value();
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.url = uRL0;
      String string10 = httpConnection_Response0.charset();
      String[] stringArray0 = new String[1];
      stringArray0[0] = string9;
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreHttpErrors(boolean0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "V/k'CXnX4G'U[";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = "";
      String string3 = "!r.}'X";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string3);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string2);
      String string4 = "dg%usg7_nRQY9";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string0, string4);
      String string5 = "#Ji\"V0cum&";
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal1.key(string5);
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string6 = httpConnection_KeyVal1.value();
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.url = uRL0;
      String string7 = httpConnection_Response0.charset();
      String string8 = "";
      // Undeclared exception!
      try { 
        connection1.header(string7, string8);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "V/k'CXnX4G'U[";
      String string1 = "Data value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string3 = "";
      String string4 = "!r.}'X";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.value(string3);
      String string5 = "dg%usg7_nRQY9";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string0, string5);
      String string6 = "#Ji\"V0cum&";
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal1.key(string6);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "&C:}\\{V";
      Connection connection1 = connection0.header(string0, string0);
      String string1 = "";
      try { 
        connection0.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
