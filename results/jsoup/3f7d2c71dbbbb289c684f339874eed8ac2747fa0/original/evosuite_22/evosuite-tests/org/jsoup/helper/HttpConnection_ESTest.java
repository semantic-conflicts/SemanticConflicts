/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:36:06 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "-*";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Parser parser0 = Parser.xmlParser();
      String string1 = "Z*fkRDt";
      Document document0 = parser0.parseInput(string1, string1);
      Set<String> set0 = document0.classNames();
      String string2 = "required";
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = hashMap0.put(string2, list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list3 = hashMap0.put(string0, list2);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = "RzsbvK";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      String string3 = "zk93";
      String string4 = httpConnection_KeyVal0.toString();
      String string5 = "org.jsoup.HttpStatusException";
      Connection.Response connection_Response2 = httpConnection_Response0.header(string3, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string0);
      String string6 = httpConnection_KeyVal5.key();
      Connection.Response connection_Response3 = httpConnection_Response0.cookie(string5, string0);
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = "org.jsoup.select.Elements";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal5.value(string8);
      String string9 = httpConnection_Response0.statusMessage();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string10 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal5.key(string10);
      String string11 = "mark";
      String string12 = ")5dup69Su#ylAO8IPn";
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(string11, string12);
      String string13 = httpConnection_Response0.charset();
      Connection connection1 = connection0.userAgent(string11);
      boolean boolean0 = false;
      Connection connection2 = connection0.ignoreHttpErrors(boolean0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Connection connection3 = connection0.cookies(hashMap1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "org.jsoup.select.Evaluator";
      String string1 = ".ss,h!X_[";
      String string2 = "";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = " `^6(&";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL:  `^6(&
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "\"pJSyEX1i`:";
      String string1 = "?[ .z,-X6?!zQo3c";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "XRh";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string1);
      String string3 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key(string3);
      String string4 = httpConnection_KeyVal2.value();
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "set-cookie";
      String string1 = "A2nQwnSstaJR";
      Map<String, String> map0 = httpConnection_Response0.cookies;
      httpConnection_Response0.cookies = map0;
      String string2 = "pYAflBwK/9}";
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.cookie(string1, string2);
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response0.removeHeader(string0);
      String string3 = "u>6x0*jdx~@k'1<ktrg";
      HttpConnection.Response httpConnection_Response3 = (HttpConnection.Response)httpConnection_Response0.cookie(string1, string3);
      Connection.Request connection_Request0 = null;
      String string4 = "l(Uz>&c)Sfd";
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "|'";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>(hashMap0);
      String string1 = "^o";
      List<String> list0 = null;
      List<String> list1 = hashMap0.put(string1, list0);
      String string2 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.removeLastOccurrence(string2);
      List<String> list2 = hashMap1.put(string2, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap1);
      int int0 = httpConnection_Response0.statusCode();
      String string3 = "audio";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string3, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = ".%s";
      String string1 = "amp";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "Request must be executed (with .execute(), .get(), or .post() before parsing response";
      String string1 = "Mcr";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "u{bP4l~$#5@y]!<m_R";
      String string1 = "Cookie value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "[s2nCArmD+H3(:\\m?";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "1Gm[$De/Y";
      String string2 = "T,ap]";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string2);
      String string3 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "-*";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Parser parser0 = Parser.htmlParser();
      String string1 = "Z*fkRDt";
      Document document0 = parser0.parseInput(string1, string1);
      Set<String> set0 = document0.classNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string0, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = null;
      httpConnection_Response0.url = uRL0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Response0.cookies = (Map<String, String>) hashMap0;
      String string0 = "#QZe&";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.contentType();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "Location";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "z";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      String string2 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "=\"";
      String string1 = "Referer";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string2 = "readonly";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "O|@y)Gcka[";
      String string1 = "[&CH\"";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "%20";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = ",>7>n\\ad2t|DiTr\"H-<";
      String string5 = "e5\\w^Uid{yO~X";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      String string6 = "Zy{9+>'rwc*ntktnD)";
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string2, string6);
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string5, string0);
      String string7 = "";
      String string8 = httpConnection_KeyVal2.toString();
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string6, string7);
      HttpConnection.KeyVal httpConnection_KeyVal6 = HttpConnection.KeyVal.create(string4, string5);
      String string9 = httpConnection_KeyVal1.toString();
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal1.key(string1);
      String string10 = httpConnection_KeyVal2.toString();
      HttpConnection.KeyVal httpConnection_KeyVal8 = httpConnection_KeyVal7.value(string3);
      String string11 = httpConnection_KeyVal7.toString();
      String string12 = "code";
      String string13 = ";";
      HttpConnection.KeyVal httpConnection_KeyVal9 = httpConnection_KeyVal2.value(string13);
      HttpConnection.KeyVal httpConnection_KeyVal10 = httpConnection_KeyVal7.value(string12);
      String string14 = "";
      HttpConnection.KeyVal httpConnection_KeyVal11 = HttpConnection.KeyVal.create(string2, string14);
      String string15 = httpConnection_KeyVal2.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Only http & https protocols supported";
      String string1 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      String string2 = httpConnection_Response0.charset();
      String string3 = "%20";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string3, string3);
      String string4 = "voo<FE1[+|M4";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string4, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "u{\\2tk {vjn";
      String string1 = "bG|DQsO}Y!:>Q^";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      String string2 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "set-cookie";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      List<String> list1 = hashMap0.put(string1, list0);
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      hashMap0.putAll(hashMap1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = "RzsbvK";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      String string3 = "zk93";
      String string4 = httpConnection_KeyVal0.toString();
      String string5 = "org.jsoup.HttpStatusException";
      Connection.Response connection_Response2 = httpConnection_Response0.header(string3, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string3, string2);
      String string6 = httpConnection_KeyVal5.key();
      Connection.Response connection_Response3 = httpConnection_Response0.cookie(string5, string0);
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = "org.jsoup.select.Elements";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string9 = "X";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0);
      List<String> list1 = hashMap0.putIfAbsent(string9, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal5.value(string8);
      String string10 = httpConnection_Response0.statusMessage();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response1.cookies;
      Connection connection1 = connection0.cookies(map0);
      String string11 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal5.key(string11);
      String string12 = "mark";
      String string13 = ")5dup69Su#ylAO8IPn";
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(string12, string13);
      String string14 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "Data key value pairs must not be null";
      String string1 = "@tWK9}M";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string2 = "JS/Rn #Me6*U(";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string3 = "";
      String string4 = "|J<";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string4, linkedList1);
      boolean boolean0 = linkedList0.add(string3);
      List<String> list1 = hashMap0.put(string2, linkedList0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      String string5 = httpConnection_Response0.contentType();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list2, locale_FilteringMode0);
      List<String> list4 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list3);
      List<String> list5 = hashMap0.put(string0, list4);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = "RzsbvK";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      String string3 = "zk93";
      String string4 = httpConnection_KeyVal0.toString();
      String string5 = "org.jsoup.HttpStatusException";
      Connection.Response connection_Response2 = httpConnection_Response0.header(string3, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string0);
      String string6 = httpConnection_KeyVal5.key();
      Connection.Response connection_Response3 = httpConnection_Response0.cookie(string5, string0);
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = "org.jsoup.select.Elements";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal5.value(string8);
      String string9 = httpConnection_Response0.statusMessage();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string10 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal5.key(string10);
      String string11 = "mark";
      String string12 = ")5dup69Su#ylAO8IPn";
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(string11, string12);
      String string13 = httpConnection_Response0.charset();
      LinkedHashSet<HttpConnection.KeyVal> linkedHashSet0 = new LinkedHashSet<HttpConnection.KeyVal>();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>(linkedHashSet0);
      Connection connection1 = connection0.data((Collection<Connection.KeyVal>) linkedList0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = "RzsbvK";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      String string3 = "zk93";
      String string4 = httpConnection_KeyVal0.toString();
      String string5 = "org.jsoup.HttpStatusException";
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response0.header(string3, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string0);
      String string6 = httpConnection_KeyVal5.key();
      HttpConnection.Response httpConnection_Response3 = (HttpConnection.Response)httpConnection_Response0.cookie(string5, string0);
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = "a=dn";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal5.value(string8);
      String string9 = httpConnection_Response0.statusMessage();
      URL uRL0 = MockURL.getFtpExample();
      HttpConnection httpConnection0 = (HttpConnection)HttpConnection.connect(uRL0);
      String string10 = "Key val must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal7 = httpConnection_KeyVal5.key(string10);
      String string11 = "mark";
      String string12 = ")5dup69Su#ylAO8IPn";
      HttpConnection.KeyVal httpConnection_KeyVal8 = HttpConnection.KeyVal.create(string11, string12);
      String string13 = httpConnection_Response0.charset();
      Map<String, String> map0 = httpConnection_Response1.headers;
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data(map0);
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.method(connection_Method0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Cookie name must not be empty";
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = "RzsbvK";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.key(string2);
      String string3 = "zk93";
      String string4 = httpConnection_KeyVal0.toString();
      String string5 = "org.jsoup.HttpStatusException";
      Connection.Response connection_Response2 = httpConnection_Response0.header(string3, string5);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string0);
      String string6 = httpConnection_KeyVal5.key();
      Connection.Response connection_Response3 = httpConnection_Response0.cookie(string5, string0);
      String string7 = httpConnection_KeyVal0.toString();
      String string8 = "org.jsoup.select.Elements";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal5.value(string8);
      String string9 = httpConnection_Response0.statusMessage();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
