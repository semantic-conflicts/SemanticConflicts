/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:40:07 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "mqu`E-lE2;F}>.m";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      TextNode textNode2 = (TextNode)textNode0.attr(string0, string0);
      String string1 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      int int0 = (-507);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      TextNode textNode1 = textNode0.text(textNode0.TEXT_KEY);
      String string0 = textNode1.absUrl(textNode0.TEXT_KEY);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "!";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "t";
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 29;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "tHxt";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Tag tag0 = Tag.valueOf(string0);
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      textNode0.setParentNode(element0);
      String string1 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      TextNode textNode1 = textNode0.text(textNode0.TEXT_KEY);
      Attributes attributes0 = textNode0.attributes();
      String string0 = textNode0.text();
      textNode1.setParentNode(textNode0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = ":+vo*xHtW746F}";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "Xb&9F{)=s`7-Vr,G2% ";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Attributes";
      TextNode textNode0 = new TextNode(string0, string0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "^\\s+";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = textNode1.getWholeText();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "<!--";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.nodeName();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "w1n4e>Mc";
      String string1 = TextNode.stripLeadingWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "CWjUvVyxi/V]*#f5\"i";
      TextNode textNode0 = new TextNode(string0, string0);
      boolean boolean0 = textNode0.hasAttr(string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 132;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "^\\s+";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "! TA";
      String string2 = textNode0.attr(string1);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = ".WfPo<<'xXWt";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "RL$Bn=";
      String string3 = textNode0.absUrl(string2);
      String string4 = "";
      String string5 = textNode0.attr(string4);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 1;
      String string0 = null;
      String string1 = "AQ ]PJ{\" }f0L#o0n";
      String string2 = TextNode.stripLeadingWhitespace(string1);
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "#";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Attribute";
      String string1 = "J_ze@X'@d@NB$_|>-";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "Split offset must not be greater than current text length";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      int int0 = 272;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Document";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "@^)wx=xO9xqEUN0Z`-p";
      String string3 = TextNode.stripLeadingWhitespace(string2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "pre";
      String string1 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "9zx#";
      Node node0 = textNode0.attr(string1, string2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "dX.J/\"]EhB9D";
      String string1 = "_cDHpj[8j}*{;h/";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      Attributes attributes0 = textNode1.attributes();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "Es(NA$WR%5i/LKFUz";
      TextNode textNode1 = textNode0.text(string0);
      boolean boolean0 = textNode1.isBlank();
      Attributes attributes0 = textNode0.attributes();
      String string1 = textNode0.text();
      textNode1.setParentNode(textNode0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = (-4955);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = "q2uQ1-l\\v";
      TextNode textNode0 = new TextNode(string0, string1);
      Node node0 = textNode0.attr(string0, string0);
      String string2 = textNode0.nodeName();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "H.b.%m";
      TextNode textNode1 = TextNode.createFromEncoded(string0, textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        textNode0.absUrl(textNode1.TEXT_KEY);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
      String string2 = textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "`\"EyS -y";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode();
      int int0 = 2053;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      String string1 = "J\"9dnzOSF*lWF";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Node node0 = textNode0.removeAttr(string1);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "0$Wt*s>!e5l&|}";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      String string3 = "`EjkRE";
      Attributes attributes0 = textNode0.attributes();
      String string4 = "'iQWDr0`VtNkRV5N{3C";
      String string5 = textNode0.attr(string4);
      TextNode textNode1 = textNode0.text(string3);
      textNode1.setBaseUri(string3);
      String string6 = "q";
      String string7 = textNode0.text();
      Node node0 = textNode1.removeAttr(string6);
      textNode0.ensureAttributes();
      Attributes attributes1 = textNode0.attributes();
      Attributes attributes2 = textNode0.attributes();
      String string8 = textNode1.getWholeText();
      boolean boolean0 = textNode1.isBlank();
      String string9 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "!s";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.TEXT_KEY);
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.append(int0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, (CharSequence) textNode0.TEXT_KEY);
      char[] charArray0 = new char[6];
      char char0 = 'T';
      charArray0[0] = char0;
      char char1 = ',';
      charArray0[1] = char1;
      char char2 = 'j';
      charArray0[2] = char2;
      char char3 = 'R';
      charArray0[3] = char3;
      char char4 = 'i';
      charArray0[4] = char4;
      char char5 = '!';
      charArray0[5] = char5;
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0, int0, int0);
      char[] charArray1 = new char[8];
      charArray1[0] = char4;
      charArray1[1] = char1;
      charArray1[2] = char4;
      charArray1[3] = char0;
      charArray1[4] = char3;
      charArray1[5] = char2;
      charArray1[6] = char4;
      charArray1[7] = char0;
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray1);
      int int1 = 1184;
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder4, int1, document_OutputSettings0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "NN@^DyQ9/";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "l9z\\8Y4UE}";
      Node node0 = textNode0.nextSibling();
      textNode0.setParentNode(node0);
      String string1 = ">ps";
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "(Y z^ZANX.U%;$rX5";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      int int0 = 0;
      String string1 = "[%s]";
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string1);
      char[] charArray0 = new char[8];
      char char0 = 'Q';
      charArray0[0] = char0;
      char char1 = 'S';
      charArray0[1] = char1;
      char char2 = 'p';
      charArray0[2] = char2;
      char char3 = 'a';
      int int1 = 0;
      StringBuilder stringBuilder2 = stringBuilder1.insert(int1, (CharSequence) string0);
      charArray0[3] = char3;
      char char4 = 'g';
      charArray0[4] = char4;
      char char5 = '@';
      charArray0[5] = char5;
      char char6 = 'G';
      charArray0[6] = char6;
      char char7 = 't';
      charArray0[7] = char7;
      StringBuilder stringBuilder3 = stringBuilder1.insert(int0, charArray0);
      int int2 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int2);
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      boolean boolean0 = true;
      StringBuilder stringBuilder5 = stringBuilder4.insert(int0, boolean0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean1 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean1);
      textNode0.outerHtmlHead(stringBuilder5, int2, document_OutputSettings1);
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string2);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = null;
      String string1 = "4:VI3V8=u\"}d";
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      String string1 = "tr";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "1;+\\gI$";
      String string1 = ";rV";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
      Node node0 = textNode1.previousSibling();
      String string2 = textNode1.getWholeText();
      StringBuilder stringBuilder0 = new StringBuilder();
      double double0 = 1158.2042325809857;
      StringBuilder stringBuilder1 = stringBuilder0.append(double0);
      int int0 = 465;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      textNode0.outerHtmlTail(stringBuilder1, int0, document_OutputSettings4);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "kVs45^wyhGs~=Z'";
      String string1 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 6;
      Attributes attributes0 = new Attributes();
      String string2 = textNode0.toString();
      textNode0.attributes = attributes0;
      Node node0 = textNode0.nextSibling();
      Attributes attributes1 = attributes0.clone();
      textNode0.siblingIndex = int0;
      String string3 = textNode0.toString();
      boolean boolean0 = textNode0.isBlank();
      String string4 = textNode0.nodeName();
      String string5 = TextNode.stripLeadingWhitespace(string1);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 2;
      TextNode textNode1 = textNode0.splitText(int0);
      TextNode.TEXT_KEY = textNode0.TEXT_KEY;
      TextNode textNode2 = textNode1.text(textNode0.TEXT_KEY);
      int int1 = 525;
      textNode2.setSiblingIndex(int1);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int2 = 414;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int2, (CharSequence) textNode0.TEXT_KEY);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 414
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "^s+";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
      int int0 = (-908);
      textNode1.siblingIndex = int0;
      String string2 = textNode1.toString();
      TextNode textNode2 = textNode0.text(string2);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Id";
      String string1 = null;
      String string2 = "_e\"DQ\")I7l0Y/W.";
      int int0 = 587;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "Es(NA$WR%5i/LKFUz";
      TextNode textNode1 = textNode0.text(string0);
      Attributes attributes0 = textNode0.attributes();
      String string1 = textNode0.text();
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      textNode2.ensureAttributes();
      String string2 = "^$,**z>#H)fOo'";
      TextNode textNode3 = textNode0.text(string2);
      String string3 = null;
      // Undeclared exception!
      try { 
        textNode1.text(string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "C.Jm-juD";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "@WIVyEM";
      String string2 = textNode1.absUrl(string1);
      boolean boolean0 = textNode1.isBlank();
      Attributes attributes0 = new Attributes();
      String string3 = textNode0.text();
      List<Node> list0 = textNode1.childNodes();
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      TextNode textNode3 = textNode0.text(string3);
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "tHxt";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Tag tag0 = Tag.valueOf(string0);
      Tag tag1 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      textNode0.setParentNode(element0);
      int int0 = 0;
      String string2 = textNode0.toString();
      int int1 = 17;
      TextNode textNode1 = textNode0.text(string2);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) textNode1.TEXT_KEY);
      int int2 = (-1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder1, int2, document_OutputSettings0);
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "tHx.Yt";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Tag tag0 = Tag.valueOf(string0);
      Tag tag1 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      textNode0.setParentNode(element0);
      int int0 = 0;
      String string2 = TextNode.normaliseWhitespace(string1);
      int int1 = 17;
      String string3 = "Xb&9F{)=s`7-Vr,G2% ";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "tHxt";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Tag tag0 = Tag.valueOf(string0);
      Tag tag1 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      String string2 = "Split offset must not be greater than current text length";
      String string3 = attributes0.get(string2);
      Element element0 = new Element(tag0, string0, attributes0);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) textNode0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) textNode0;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      textNode0.setParentNode(element0);
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = ":+vo*xH:tW746F}";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      Node node0 = textNode1.doClone(textNode0);
      textNode0.parentNode = node0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = ":+vo*xH:tW746F}";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      textNode0.attributes = attributes1;
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "tHxt";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-1353);
      textNode0.setSiblingIndex(int0);
      Tag tag0 = Tag.valueOf(string0);
      Tag tag1 = Tag.valueOf(string0);
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      textNode0.setParentNode(element0);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
