/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:52:08 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.List;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Node node0 = textNode0.removeAttr(textNode0.TEXT_KEY);
      String string2 = textNode0.text();
      long long0 = 716L;
      // Undeclared exception!
      try { 
        textNode0.absUrl(string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "K z!qZBd";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string0);
      String string1 = textNode0.attr(string0);
      int int0 = 1;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      TextNode textNode2 = textNode1.text(string1);
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      String string2 = "Split of?set must be not bG negative";
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      int int0 = 0;
      textNode1.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "text";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      boolean boolean0 = textNode0.hasAttr(textNode0.TEXT_KEY);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.toString();
      int int0 = (-4724);
      TextNode textNode1 = new TextNode();
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      int int0 = (-672);
      String string0 = "Split offset must not be greater than current text length";
      Tag tag0 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      Element element1 = element0.prepend(textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int0, (Object) element1);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -672
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 1312;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "V]rSw]*7g ";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = (-1721);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      String string1 = "~^BI9lwK-(?yNKB~";
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // ~^BI9lwK-(?yNKB~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "Q]^wLEyAA";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "mFPO)Ri/";
      TextNode textNode1 = textNode0.text(string0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = (-1154);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 453;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "#text";
      String string1 = "samp";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      textNode0.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "sub";
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 1541;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "{I&";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      String string1 = textNode0.text();
      TextNode textNode1 = textNode0.splitText(int0);
      TextNode textNode2 = textNode1.splitText(int0);
      TextNode textNode3 = TextNode.createFromEncoded(string1, textNode0.TEXT_KEY);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.toString();
      textNode0.ensureAttributes();
      String string3 = textNode0.attr(string0);
      TextNode textNode1 = textNode0.text(string2);
      String string4 = textNode1.getWholeText();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "#text";
      String string1 = "fM@l1(XJ]";
      TextNode textNode0 = new TextNode(string0, string1);
      Node node0 = textNode0.removeAttr(string1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "Mi]v@@9ff";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "^\\s+";
      String string2 = textNode1.absUrl(string1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      List<Node> list0 = textNode0.childNodesCopy();
      textNode0.childNodes = list0;
      String string0 = "xFour2mb'B~'[";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "FbPO015\\kc";
      String string1 = null;
      textNode0.text = string1;
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "Mm# m68:@_ymLi$";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "Lh'kRE*[q1W";
      String string3 = "xhtml";
      TextNode textNode0 = new TextNode(string2, string3);
      boolean boolean0 = textNode0.hasAttr(string3);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode0 = new TextNode(string0, string0);
      boolean boolean0 = textNode0.isBlank();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "";
      String string1 = "#root";
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "[%s*=%s]";
      String string1 = "<'$r5v90vs";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.outerHtml();
      Node node0 = textNode0.removeAttr(string0);
      String string3 = textNode0.text();
      boolean boolean0 = textNode0.isBlank();
      String string4 = "";
      Node node1 = textNode0.attr(string1, string4);
      String string5 = "";
      boolean boolean1 = textNode0.hasAttr(string5);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode1.attr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "Split offset must be not be negative";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\d*);?";
      Node node0 = textNode1.removeAttr(string1);
      String string2 = "";
      Node node1 = textNode1.attr(string1, string2);
      int int0 = (-3434);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder(int0);
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "!]nX4";
      String string3 = textNode0.attr(string2);
      String string4 = "^\\s+";
      Node node0 = textNode0.removeAttr(string4);
      textNode0.ensureAttributes();
      String string5 = textNode0.nodeName();
      String string6 = TextNode.stripLeadingWhitespace(string1);
      Node node1 = textNode0.removeAttr(string4);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "(:=rldnrm6Llx*";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "";
      boolean boolean0 = textNode1.hasAttr(string1);
      Attributes attributes0 = textNode1.attributes();
      String string2 = textNode1.text();
      String string3 = "v{ej%qH<O1CK/ntcH]";
      String string4 = textNode0.attr(string3);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      boolean boolean0 = textNode0.isBlank();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode();
      TextNode textNode1 = textNode0.text(string1);
      Node node0 = textNode0.doClone(textNode1);
      textNode1.ensureAttributes();
      TextNode textNode2 = textNode0.text(string0);
      Attributes attributes0 = textNode2.attributes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node1 = textNode1.traverse(nodeVisitor0);
      TextNode textNode3 = textNode2.text(string1);
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      StringBuilder stringBuilder0 = null;
      int int0 = (-728);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      int int1 = 1;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int1);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "ID";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "eEyj>bcU4C~Gk";
      TextNode textNode0 = new TextNode(string2, string0);
      String string3 = textNode0.nodeName();
      String string4 = "|Lcb9oIf]o/";
      String string5 = TextNode.normaliseWhitespace(string4);
      textNode0.ensureAttributes();
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.hasAttr(string3);
      String string6 = TextNode.stripLeadingWhitespace(string1);
      String string7 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string7);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = "m/HB'd25s";
      TextNode textNode0 = new TextNode(string0, string1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      textNode0.ensureAttributes();
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "rt";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string1 = "#text";
      String string2 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode(string1, string2);
      TextNode textNode1 = textNode0.text(string0);
      boolean boolean1 = textNode1.isBlank();
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "ZLG(L?G1&";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "[3L";
      TextNode textNode1 = textNode0.text(string1);
      int int0 = 1585;
      textNode1.setSiblingIndex(int0);
      int int1 = 0;
      TextNode textNode2 = textNode1.splitText(int1);
      // Undeclared exception!
      try { 
        textNode1.remove();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      int int0 = 0;
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, object0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      int int1 = 0;
      StringBuilder stringBuilder3 = stringBuilder2.delete(int0, int1);
      int int2 = 0;
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      StringBuilder stringBuilder5 = stringBuilder3.append(int2);
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder5, int1, document_OutputSettings0);
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "E73Zw!WOI~&^";
      String string1 = "value";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "I(mo";
      textNode0.text = string2;
      int int0 = (-2003);
      List<Node> list0 = textNode0.childNodes();
      textNode0.setSiblingIndex(int0);
      String string3 = "pq";
      textNode0.setBaseUri(string3);
      boolean boolean0 = textNode0.hasAttr(string3);
      String string4 = "";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string4);
      int int1 = 2564;
      textNode1.siblingIndex = int1;
      String string5 = textNode0.absUrl(textNode1.TEXT_KEY);
      boolean boolean1 = textNode0.isBlank();
      String string6 = "xH0LnLtU32h*sx";
      Node node0 = textNode1.removeAttr(string6);
      String string7 = node0.toString();
      String string8 = "";
      TextNode textNode2 = textNode1.text(string8);
      Attributes attributes0 = textNode1.attributes();
      Node node1 = textNode0.removeAttr(textNode2.TEXT_KEY);
      String string9 = "";
      // Undeclared exception!
      try { 
        textNode2.removeAttr(string9);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "w[Vw\"{Cu";
      int int0 = 2517;
      Node[] nodeArray0 = new Node[8];
      String string1 = "";
      int int1 = (-68);
      String string2 = "p:+|Z13q<P[Ij7a-";
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "q";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      Node node0 = null;
      String string2 = textNode0.toString();
      Attributes attributes0 = textNode0.attributes();
      String string3 = ";";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      char char0 = 'a';
      StringBuilder stringBuilder1 = stringBuilder0.append(char0);
      Object object0 = new Object();
      StringBuilder stringBuilder2 = stringBuilder1.append(object0);
      float float0 = 1106.8885F;
      StringBuilder stringBuilder3 = stringBuilder2.append(float0);
      int int0 = 32;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      StringBuilder stringBuilder4 = stringBuilder1.append(float0);
      String string4 = "org.jsoup.nodes.TextNode";
      textNode0.outerHtmlTail(stringBuilder3, int0, document_OutputSettings2);
      Attributes attributes1 = textNode0.attributes();
      boolean boolean0 = textNode0.isBlank();
      Attributes attributes2 = textNode0.attributes();
      int int1 = 0;
      textNode0.outerHtmlHead(stringBuilder1, int1, document_OutputSettings2);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      int int0 = (-654);
      String string0 = "Split offset must not be greater than current text length";
      Tag tag0 = Tag.valueOf(string0);
      String string1 = "/Ua\\3@`";
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, string1, attributes0);
      Element element1 = element0.text(textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int0, (Object) element1);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -654
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "]6";
      TextNode textNode1 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      textNode1.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "]6";
      textNode0.setParentNode(textNode0);
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string1);
      String string2 = "Y";
      Node node0 = textNode0.removeAttr(string2);
      String string3 = "";
      TextNode.TEXT_KEY = string3;
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-4708);
      textNode0.setSiblingIndex(int0);
      String string1 = textNode0.toString();
      int int1 = (-4724);
      TextNode textNode1 = new TextNode();
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
