/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:38:31 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) attributes0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      int int0 = (-9);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "<vd:!GHf";
      String string1 = ",";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "Split offset must not be greater than current text length";
      Document document0 = new Document(string2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      List<Node> list0 = textNode0.childNodes();
      Element element0 = document2.body();
      textNode0.setParentNode(element0);
      String string3 = textNode0.absUrl(string0);
      String string4 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "=!?oiPas3p};";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      String string2 = TextNode.normaliseWhitespace(string1);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string2);
      String string3 = "org.jsoup.nodes.TextNode";
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string3);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder1, int0, document_OutputSettings0);
      TextNode textNode2 = textNode0.splitText(int0);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "=!?oiPas3p};";
      String string1 = TextNode.TEXT_KEY;
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      String string2 = TextNode.normaliseWhitespace(string1);
      Node node0 = textNode0.attr(string2, string2);
      textNode0.setParentNode(textNode0);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string3 = "bO{[6[Biu7Nn)K";
      TextNode textNode1 = textNode0.text(string3);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      char char0 = 'U';
      StringBuilder stringBuilder1 = stringBuilder0.append(char0);
      int int0 = (-316);
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char char1 = 'p';
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint(int0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.toString();
      TextNode textNode1 = textNode0.text(string0);
      String string2 = textNode1.attr(textNode0.TEXT_KEY);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = "UTF-8";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 122;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = textNode0.nodeName();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.getWholeText();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "F-4GdB{u";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      Attributes attributes0 = textNode1.attributes();
      boolean boolean0 = textNode0.hasAttr(textNode1.TEXT_KEY);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = null;
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "zjtBI";
      String string1 = "^\\s+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "6:8H*0bd8ok&[mFuc`";
      Node node0 = textNode0.removeAttr(string2);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "Lc9RTX0A0+PU/L^2?K";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 649;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 0;
      textNode0.siblingIndex = int0;
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "5.R\"9rl";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      String string3 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "HmDk.yGl0";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.toString();
      String string2 = textNode0.toString();
      boolean boolean0 = textNode0.isBlank();
      String string3 = "";
      String string4 = TextNode.stripLeadingWhitespace(string3);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "";
      String string3 = TextNode.normaliseWhitespace(string2);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "#root";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "eRTBPn_z88(*|l";
      String string3 = textNode0.absUrl(string2);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = "oKmp &3[)TN7";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.text();
      String string3 = "org.jsoup.select.Evaluator$Attribute";
      Node node0 = textNode0.removeAttr(string3);
      String string4 = textNode0.getWholeText();
      String string5 = textNode0.attr(string2);
      String string6 = textNode0.getWholeText();
      int int0 = 42;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "quot";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = textNode1.absUrl(string0);
      int int0 = 3491;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string1);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      int int1 = (-1265);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode1.outerHtmlTail(stringBuilder2, int1, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 2690;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = null;
      String string1 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "-";
      String string2 = "VYAj-cN%TISE";
      Node node0 = textNode0.attr(string1, string2);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = null;
      TextNode textNode1 = textNode0.text(string0);
      boolean boolean0 = textNode1.isBlank();
      String string1 = null;
      TextNode textNode2 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string1);
      List<Node> list0 = textNode1.childNodes;
      textNode1.childNodes = list0;
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "$u'wx]2gH?(JRp(2";
      String string1 = "\"C'v)n~=dD^NQ";
      Document document0 = Document.createShell(string1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.clone();
      Document document2 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document2.val(textNode0.TEXT_KEY);
      Map<String, String> map0 = document2.dataset();
      textNode0.setParentNode(document2);
      textNode0.setBaseUri(string0);
      List<Node> list0 = textNode0.childNodes();
      textNode0.childNodes = list0;
      boolean boolean0 = textNode0.isBlank();
      boolean boolean1 = textNode0.isBlank();
      // Undeclared exception!
      try { 
        textNode0.attr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "*\"U9_z|1_";
      String string1 = "L|{H";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      textNode1.ensureAttributes();
      String string2 = "'_4jy]EM@z";
      String string3 = TextNode.normaliseWhitespace(string2);
      TextNode textNode2 = TextNode.createFromEncoded(string0, string2);
      Node node0 = textNode0.clone();
      String string4 = "";
      String string5 = "";
      // Undeclared exception!
      try { 
        textNode1.attr(string4, string5);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "q";
      String string1 = "9";
      TextNode textNode0 = new TextNode(string0, string1);
      TextNode textNode1 = textNode0.text(string1);
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      StringBuilder stringBuilder0 = null;
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        textNode2.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "D65P]9e(r@";
      TextNode textNode0 = new TextNode(string0, string0);
      Comment comment0 = new Comment(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      textNode0.setParentNode(comment0);
      Node node0 = textNode0.removeAttr(string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      char[] charArray0 = new char[1];
      char char0 = '0';
      charArray0[0] = char0;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      textNode0.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "P{aU@#G3SxLs)";
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "[InQTf-Jg+eMO~l<J%";
      String string1 = "r/o`3\\ 0twqt_1k";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 4;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) textNode1;
      nodeArray0[1] = (Node) textNode1;
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) textNode1;
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) textNode1;
      StringBuilder stringBuilder0 = null;
      TextNode textNode2 = textNode1.text(textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "text";
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = textNode0.text(string2);
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      boolean boolean0 = false;
      String string3 = " Oe'$6[g";
      textNode0.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Node node0 = textNode0.clone();
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = textNode0.text(string0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "*y/ZwW#xYi";
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "<vd:\"GH I";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = (-115);
      String string2 = "";
      String string3 = textNode0.attr(string2);
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.isBlank();
      textNode0.setSiblingIndex(int0);
      String string4 = textNode0.absUrl(string0);
      String string5 = textNode0.toString();
      String string6 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string1, string6);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 7;
      TextNode textNode1 = textNode0.splitText(int0);
      int int1 = 0;
      TextNode textNode2 = textNode1.splitText(int1);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "gtSzASF%^egvPQ9er";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "data-";
      TextNode textNode1 = textNode0.text(string1);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, (CharSequence) textNode1.TEXT_KEY, int0, int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      long long0 = (-1L);
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, long0);
      int int1 = (-23);
      Document.OutputSettings document_OutputSettings5 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.escapeMode(entities_EscapeMode1);
      Document.OutputSettings document_OutputSettings7 = document_OutputSettings6.clone();
      // Undeclared exception!
      try { 
        Charset.forName(textNode1.TEXT_KEY);
      } catch(UnsupportedCharsetException e) {
         //
         // text
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "D65P]9e(r@";
      TextNode textNode0 = new TextNode(string0, string0);
      Node node0 = textNode0.removeAttr(string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      char[] charArray0 = new char[1];
      char char0 = '0';
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      textNode0.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "dfn";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string1);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      boolean boolean0 = linkedList0.add((Node) textNode0);
      textNode0.childNodes = (List<Node>) linkedList0;
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "=!?oiPas3p};";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "7";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      String string3 = "";
      textNode0.baseUri = string3;
      String string4 = TextNode.normaliseWhitespace(string2);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string4);
      String string5 = "org.jsoup.nodes.TextNode";
      String string6 = textNode0.attr(string5);
      boolean boolean0 = textNode0.hasAttr(string1);
      TextNode.TEXT_KEY = textNode0.baseUri;
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      String string7 = "E";
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string7);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      int int1 = 17;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder1, int1, document_OutputSettings0);
      String string8 = "";
      // Undeclared exception!
      try { 
        textNode0.text(string8);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "<vd:\"GH I";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      String string3 = textNode0.attr(string2);
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.isBlank();
      String string4 = textNode0.absUrl(string0);
      TextNode.TEXT_KEY = string4;
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "=!?oiPas3p};";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "7";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string2);
      String string3 = "";
      textNode0.baseUri = string3;
      String string4 = TextNode.normaliseWhitespace(string2);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string4);
      String string5 = "org.jsoup.nodes.TextNode";
      String string6 = textNode0.attr(string5);
      String string7 = "Split offset must be not be negative";
      textNode1.text = string7;
      boolean boolean0 = textNode0.hasAttr(string1);
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      String string8 = "E";
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string8);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      int int1 = 17;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder1);
      textNode0.outerHtmlTail(stringBuilder1, int1, document_OutputSettings0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "alLW|_";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.outerHtml();
      String string3 = "j0\\OgeVh}jwJuF";
      TextNode textNode1 = textNode0.text(string3);
      String string4 = textNode1.outerHtml();
      int int0 = 104;
      textNode1.siblingIndex = int0;
      String string5 = textNode1.toString();
      boolean boolean0 = textNode1.isBlank();
      int int1 = (-2602);
      textNode1.setSiblingIndex(int1);
      int int2 = (-3658);
      // Undeclared exception!
      try { 
        textNode1.splitText(int2);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "=!?oiPas3p};";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      String string2 = TextNode.normaliseWhitespace(string1);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string2);
      String string3 = "org.jsoup.nodes.TextNode";
      textNode1.setParentNode(textNode0);
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, string3);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder1, int0, document_OutputSettings0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = textNode0.text(string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      float float0 = 20.0F;
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) attributes0);
      int int0 = 32;
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      String string1 = ":o5#1nrwhd}ic";
      TextNode textNode2 = textNode1.text(string1);
      int int1 = (-9);
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "<vd:!GHf";
      String string1 = ",";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.attr(textNode0.TEXT_KEY);
      String string3 = "Split offset must not be greater than current text length";
      Document document0 = new Document(string3);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Document document3 = document2.clone();
      List<Node> list0 = textNode0.childNodes();
      document1.childNodes = list0;
      Element element0 = document3.body();
      textNode0.setParentNode(element0);
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.isBlank();
      String string4 = textNode0.absUrl(string0);
      String string5 = textNode0.toString();
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      double double0 = 967.97;
      StringBuilder stringBuilder1 = stringBuilder0.append(double0);
      int int0 = (-3028);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int0, document_OutputSettings2);
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "<vd:!GHf";
      String string1 = ",";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = (-5);
      textNode0.setSiblingIndex(int0);
      String string2 = textNode0.attr(textNode0.TEXT_KEY);
      String string3 = "Split offset must not be greater than current text length";
      Document document0 = new Document(string3);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      Document document3 = document2.clone();
      List<Node> list0 = textNode0.childNodes();
      document1.childNodes = list0;
      Element element0 = document3.body();
      Element element1 = element0.tagName(string1);
      textNode0.setParentNode(element0);
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.isBlank();
      String string4 = textNode0.absUrl(string0);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
