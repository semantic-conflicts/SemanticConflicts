/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:26:29 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      TextNode textNode1 = textNode0.text(textNode0.TEXT_KEY);
      String string0 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      int int0 = 0;
      Attributes attributes0 = textNode1.attributes();
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "Y\",}:";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      textNode0.ensureAttributes();
      boolean boolean0 = textNode0.isBlank();
      String string1 = textNode0.absUrl(string0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      char char0 = 'N';
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.splitText(char0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "5xCe8s\">>wJ";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(textNode0.TEXT_KEY);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode2 = textNode1.text(string0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      Document document0 = Document.createShell(string0);
      textNode0.parentNode = (Node) document0;
      TextNode textNode1 = textNode0.splitText(int0);
      String string1 = textNode1.text();
      TextNode textNode2 = textNode0.text(textNode0.TEXT_KEY);
      Node node0 = textNode1.attr(string1, textNode1.TEXT_KEY);
      String string2 = textNode2.toString();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 32;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      String string0 = "h(Bg;)j";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int1 = (-724);
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "ex<66TIjNLIc{";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.attr(string0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "ttHd7";
      String string1 = "\n * ";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "n9";
      String string3 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "7!q')NT?7";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "^\\s+";
      String string2 = textNode0.absUrl(string1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "tP{?x";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "org.jsoup.nodes.TextNode";
      String string2 = "8,X(6!mQ},U";
      String string3 = textNode0.absUrl(string2);
      String string4 = "b|<.Rh'\"_n2miNCDN.";
      Node node0 = textNode0.attr(string1, string4);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "mw&ZGai]Aq)1tU-y$%X";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = (-2314);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 2572;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "mGaPkQa#P[{";
      TextNode textNode0 = new TextNode(string2, string1);
      String string3 = "org.jsoup.nodes.TextNode";
      String string4 = textNode0.attr(string3);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.outerHtml();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "org.jsoup.nodes.Document$OutputSettings";
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      String string1 = textNode2.toString();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-2308);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      String string1 = "@*cf|7WNVX|FoP>OM";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.getWholeText();
      String string3 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 343;
      String string2 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "dq;48Gfhpt%";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = textNode0.getWholeText();
      String string4 = textNode0.nodeName();
      String string5 = "ZVMn}k!)2";
      boolean boolean0 = textNode0.hasAttr(string5);
      String string6 = "aOF";
      String string7 = "$D&UjL.mQpQ7{OQ(\"";
      Node node0 = textNode0.attr(string6, string7);
      String string8 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string8);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 1929;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      int int1 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int1, (long) int1);
      String string0 = null;
      StringBuilder stringBuilder2 = stringBuilder1.append(string0);
      int int2 = 0;
      int int3 = 0;
      StringBuilder stringBuilder3 = stringBuilder2.delete(int2, int3);
      int int4 = 0;
      boolean boolean0 = false;
      StringBuilder stringBuilder4 = stringBuilder3.insert(int4, boolean0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "W%!\\Bkgg}o_Q ]";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.attr(string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string0);
      char char0 = 'g';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      int int0 = 0;
      long long0 = (-182L);
      StringBuilder stringBuilder3 = stringBuilder0.insert(int0, long0);
      int int1 = 0;
      int int2 = 0;
      boolean boolean0 = true;
      StringBuilder stringBuilder4 = stringBuilder1.insert(int2, boolean0);
      StringBuilder stringBuilder5 = stringBuilder2.insert(int1, (CharSequence) textNode0.TEXT_KEY);
      StringBuilder stringBuilder6 = stringBuilder5.appendCodePoint(int1);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder6);
      String string2 = textNode0.nodeName();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "||SM5Rz)|";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "";
      TextNode textNode1 = textNode0.text(string1);
      Attributes attributes0 = textNode1.attributes();
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Document$QuirksMode";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      String string2 = "$VALUES";
      TextNode textNode2 = textNode1.text(string2);
      textNode2.ensureAttributes();
      String string3 = ";wSC(SBK6Vz";
      TextNode textNode3 = TextNode.createFromEncoded(string3, textNode0.TEXT_KEY);
      StringBuilder stringBuilder0 = new StringBuilder(textNode3.TEXT_KEY);
      int int1 = (-1904);
      char char0 = '.';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int1, char0);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 406;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "";
      String string3 = null;
      TextNode textNode0 = new TextNode(string2, string3);
      int int0 = 32;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "-;.y";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.replaceWith(textNode1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = textNode0.getWholeText();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "\"~k&G=\\";
      String string1 = "s$ZY-i";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.toString();
      List<Node> list0 = textNode0.childNodes();
      boolean boolean0 = textNode0.hasAttr(string2);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "#text";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      Node node0 = textNode0.removeAttr(textNode1.TEXT_KEY);
      // Undeclared exception!
      try { 
        textNode1.removeAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      StringBuilder stringBuilder0 = new StringBuilder(stringBuffer0);
      int int1 = (-1);
      int int2 = (-2267);
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      char[] charArray0 = new char[0];
      StringBuffer stringBuffer1 = stringBuffer0.insert(int0, charArray0);
      TextNode textNode0 = new TextNode();
      int int3 = (-1805);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int3, document_OutputSettings0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "`N.)4AQ\"z|";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      char[] charArray0 = new char[8];
      char char0 = '2';
      charArray0[0] = char0;
      char char1 = '0';
      charArray0[1] = char1;
      char char2 = 'd';
      charArray0[2] = char2;
      char char3 = '~';
      charArray0[3] = char3;
      char char4 = 'w';
      charArray0[4] = char4;
      char char5 = ';';
      charArray0[5] = char5;
      char char6 = '6';
      charArray0[6] = char6;
      char char7 = '*';
      charArray0[7] = char7;
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, int0, int0);
      int int1 = 1789;
      String string1 = "{/^kGuqP+4!";
      StringBuilder stringBuilder2 = stringBuilder1.replace(int0, int1, string1);
      StringBuilder stringBuilder3 = stringBuilder2.append((double) int1);
      int int2 = 49;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlHead(stringBuilder3, int2, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      Node node0 = null;
      textNode0.ensureAttributes();
      textNode0.parentNode = node0;
      String string1 = textNode0.attr(string0);
      textNode0.baseUri = string1;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "";
      Node[] nodeArray0 = new Node[0];
      textNode0.addChildren(nodeArray0);
      textNode0.baseUri = string0;
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "e,,L7.g";
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "";
      String string1 = "details";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.text();
      // Undeclared exception!
      try { 
        textNode0.attr(string2, string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = TextNode.normaliseWhitespace(textNode0.TEXT_KEY);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "wHk_Ky5";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 130;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      textNode0.setSiblingIndex(int0);
      String string2 = "";
      List<Node> list0 = textNode0.childNodesCopy();
      textNode0.childNodes = list0;
      String string3 = textNode0.getWholeText();
      boolean boolean0 = textNode0.hasAttr(string2);
      String string4 = "n&U";
      Node node1 = textNode0.removeAttr(string4);
      String string5 = "";
      Node node2 = textNode0.attr(string4, string5);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      char char0 = 'A';
      StringBuilder stringBuilder2 = stringBuilder1.append(char0);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuffer stringBuffer0 = null;
      StringBuilder stringBuilder4 = stringBuilder3.append(stringBuffer0);
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder4, int1, document_OutputSettings0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "#QSZcz!i&2!pJMhM2*";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "*";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = textNode1.attr(string0);
      String string2 = "";
      textNode0.ensureAttributes();
      String string3 = textNode1.attr(string2);
      String string4 = textNode1.toString();
      boolean boolean0 = textNode1.isBlank();
      TextNode textNode2 = textNode1.text(string2);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = new StringBuilder();
      double double0 = 907.62088;
      StringBuilder stringBuilder1 = stringBuilder0.append(double0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) textNode0.TEXT_KEY);
      float float0 = 0.0F;
      StringBuilder stringBuilder3 = stringBuilder2.append(float0);
      int int0 = 0;
      StringBuilder stringBuilder4 = stringBuilder3.insert(int0, (Object) stringBuilder0);
      int int1 = 32;
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "";
      Document document0 = Document.createShell(string1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.appendChild(document0);
      Element element1 = element0.appendText(textNode0.TEXT_KEY);
      textNode0.parentNode = (Node) element1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      TextNode textNode1 = textNode0.splitText(int0);
      List<Node> list0 = textNode1.siblingNodes();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      String string2 = "#comment";
      boolean boolean0 = textNode1.hasAttr(string2);
      String string3 = textNode1.text();
      int int1 = 51;
      textNode1.siblingIndex = int1;
      String string4 = textNode1.text();
      String string5 = "#%s";
      TextNode textNode2 = textNode0.text(string5);
      String string6 = "";
      // Undeclared exception!
      try { 
        document0.absUrl(string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "mlc:";
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "";
      String string2 = "M ";
      TextNode textNode2 = textNode0.text(string2);
      String string3 = "";
      String string4 = textNode1.getWholeText();
      String string5 = TextNode.stripLeadingWhitespace(string3);
      String string6 = "ezi?{TaqnVsBm2Z=_UC";
      TextNode textNode3 = TextNode.createFromEncoded(string1, string6);
      String string7 = textNode1.nodeName();
      int int0 = 0;
      textNode1.setSiblingIndex(int0);
      Attributes attributes0 = textNode0.attributes();
      Node node0 = textNode0.nextSibling();
      String string8 = null;
      String string9 = "\\zaY&cMkXfxZ4g";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string6);
      double double0 = 0.0;
      StringBuilder stringBuilder1 = stringBuilder0.append(double0);
      boolean boolean0 = false;
      StringBuilder stringBuilder2 = stringBuilder1.append(boolean0);
      StringBuilder stringBuilder3 = stringBuilder2.append((float) int0);
      StringBuilder stringBuilder4 = stringBuilder3.insert(int0, (float) int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder4, int0, document_OutputSettings0);
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string8, string9);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "51x/e8s\"!>>wJ";
      String string1 = "=INXrZ<U v[{j,o0~u(";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "      ";
      Node node0 = textNode0.removeAttr(string2);
      List<Node> list0 = textNode0.siblingNodes();
      String string3 = TextNode.normaliseWhitespace(textNode0.TEXT_KEY);
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string4 = "";
      TextNode textNode1 = textNode0.text(string4);
      String string5 = "";
      TextNode.TEXT_KEY = string5;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      // Undeclared exception!
      try { 
        textNode0.isBlank();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "V=WELymmzr4JN0`fB";
      String string1 = "Split offset must not be greater than current text length";
      TextNode textNode0 = TextNode.createFromEncoded(string1, string1);
      TextNode textNode1 = new TextNode();
      textNode0.parentNode = (Node) textNode1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "51x/e8s\"!>>wJ";
      String string1 = "=INXrZ<U v[{j,o0~u(";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "      ";
      Node node0 = textNode0.removeAttr(string2);
      String string3 = TextNode.normaliseWhitespace(textNode0.TEXT_KEY);
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string4 = "";
      TextNode textNode1 = textNode0.text(string4);
      String string5 = "{{";
      TextNode.TEXT_KEY = string5;
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string6 = "#text";
      TextNode textNode2 = textNode0.text(string6);
      String string7 = "Split offset must be not be negative";
      TextNode textNode3 = textNode2.text(string7);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "";
      Document document0 = Document.createShell(string1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Element element0 = document1.appendChild(document0);
      Element element1 = element0.appendText(textNode0.TEXT_KEY);
      textNode0.parentNode = (Node) element1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      TextNode textNode1 = textNode0.splitText(int0);
      List<Node> list0 = textNode1.siblingNodes();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      String string2 = "#comment";
      boolean boolean0 = textNode0.isBlank();
      String string3 = textNode1.text();
      int int1 = 51;
      textNode1.siblingIndex = int1;
      String string4 = textNode1.text();
      String string5 = "#%s";
      TextNode textNode2 = textNode0.text(string5);
      String string6 = "";
      String string7 = TextNode.TEXT_KEY;
      Node node0 = textNode1.attr(string4, string6);
      String string8 = textNode1.toString();
      String string9 = textNode2.toString();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode2.TEXT_KEY);
      textNode2.outerHtmlHead(stringBuilder0, textNode1.siblingIndex, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "51x/e8s\"!>>wJ";
      String string1 = "=INXrZ<U v[{j,o0~u(";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "      ";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string2);
      String string3 = TextNode.normaliseWhitespace(textNode0.TEXT_KEY);
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string4 = "";
      TextNode textNode2 = textNode0.text(string4);
      String string5 = "";
      TextNode.TEXT_KEY = string5;
      List<Node> list0 = textNode0.childNodes();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string6 = "#text";
      int int0 = (-492);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "InBody";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-2406);
      textNode0.siblingIndex = int0;
      String string1 = "HuLR+)~dQN D91fK";
      TextNode textNode1 = textNode0.text(string1);
      StringBuilder stringBuilder0 = null;
      int int1 = 2384;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(boolean0);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "";
      Document document0 = Document.createShell(string1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      List<TextNode> list0 = document1.textNodes();
      Element element0 = document1.appendChild(document0);
      Element element1 = element0.appendText(textNode0.TEXT_KEY);
      textNode0.parentNode = (Node) element1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      TextNode textNode1 = textNode0.splitText(int0);
      List<Node> list1 = textNode1.siblingNodes();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      String string2 = "#comment";
      boolean boolean0 = textNode0.isBlank();
      String string3 = textNode1.text();
      int int1 = (-1235);
      textNode1.siblingIndex = int1;
      String string4 = textNode1.text();
      String string5 = "#%s";
      TextNode textNode2 = textNode0.text(string5);
      String string6 = "";
      String string7 = TextNode.TEXT_KEY;
      Node node0 = textNode1.attr(string4, string6);
      // Undeclared exception!
      try { 
        textNode1.toString();
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "5xCe8s\">>wJ";
      String string1 = "=INXrZ<U v[{j,o0~u(";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "      ";
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string2);
      String string3 = TextNode.normaliseWhitespace(textNode0.TEXT_KEY);
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string4 = "";
      TextNode textNode2 = new TextNode(string3, textNode0.TEXT_KEY);
      String string5 = "";
      TextNode.TEXT_KEY = string5;
      // Undeclared exception!
      try { 
        textNode1.text();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "";
      Document document0 = Document.createShell(string1);
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.appendText(textNode0.TEXT_KEY);
      textNode0.parentNode = (Node) element1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      TextNode textNode1 = textNode0.splitText(int0);
      document0.setParentNode(textNode1);
      List<Node> list0 = textNode1.siblingNodes();
      String string2 = "#comment";
      boolean boolean0 = textNode0.isBlank();
      String string3 = textNode1.text();
      int int1 = 51;
      textNode1.siblingIndex = int1;
      String string4 = element1.data();
      String string5 = textNode1.text();
      String string6 = "#%s";
      TextNode textNode2 = textNode0.text(string6);
      String string7 = "";
      Node node0 = textNode1.attr(string5, string7);
      // Undeclared exception!
      try { 
        textNode2.toString();
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "RFybpc|4I";
      Document document0 = Document.createShell(string1);
      Document document1 = new Document(string1);
      textNode0.parentNode = (Node) document1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "object";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = "";
      Document document0 = Document.createShell(string1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      List<TextNode> list0 = document1.textNodes();
      Element element0 = document1.appendChild(document0);
      Element element1 = element0.appendText(textNode0.TEXT_KEY);
      textNode0.parentNode = (Node) element1;
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      TextNode textNode1 = textNode0.splitText(int0);
      List<Node> list1 = textNode1.siblingNodes();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      String string2 = "#comment";
      boolean boolean0 = textNode0.isBlank();
      String string3 = textNode1.text();
      int int1 = (-1235);
      textNode1.siblingIndex = int1;
      String string4 = textNode1.text();
      String string5 = "#%s";
      textNode1.childNodes = list1;
      TextNode textNode2 = textNode0.text(string5);
      String string6 = "";
      String string7 = TextNode.TEXT_KEY;
      Node node0 = textNode1.attr(string4, string6);
      // Undeclared exception!
      textNode1.toString();
  }
}
