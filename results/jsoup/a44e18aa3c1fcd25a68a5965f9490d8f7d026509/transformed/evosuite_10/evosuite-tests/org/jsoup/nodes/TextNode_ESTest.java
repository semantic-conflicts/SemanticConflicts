/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 17:53:50 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.absUrl(textNode0.TEXT_KEY);
      String string2 = textNode0.text();
      String string3 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = " 44Wa%K?)D\"GRf.o*";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = textNode0.splitText(int0);
      // Undeclared exception!
      try { 
        textNode1.removeChild(textNode0);
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = (-422);
      String string0 = ";Nnx";
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "DF%vgPI/R'G4>3";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      char char0 = '\u008A';
      char char1 = ']';
      char char2 = 'p';
      int int0 = (-1498);
      StringBuilder stringBuilder0 = new StringBuilder(char0);
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      Element element0 = document0.prependText(textNode0.TEXT_KEY);
      Elements elements0 = element0.getElementsContainingText(string0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) document0);
      boolean boolean0 = textNode0.isBlank();
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueContaining";
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "Entities";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 9;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 5;
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      // Undeclared exception!
      try { 
        textNode0.attr(textNode0.TEXT_KEY, textNode0.TEXT_KEY);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "v*p-6I";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode();
      String string2 = TextNode.TEXT_KEY;
      TextNode textNode1 = textNode0.text(string0);
      String string3 = TextNode.stripLeadingWhitespace(string2);
      Node node0 = textNode0.attr(string0, string0);
      boolean boolean0 = textNode1.isBlank();
      Node node1 = textNode0.removeAttr(string1);
      TextNode textNode2 = textNode0.text(textNode0.TEXT_KEY);
      String string4 = null;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = ">Az>";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      textNode0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        textNode0.splitText(textNode0.siblingIndex);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-460);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = "!&exBDNa@";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 2;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "|*%Iq~9";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "u";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string0);
      String string2 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = ";'z{";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      boolean boolean0 = textNode0.hasAttr(string2);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 52;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "lt$\"^76QeOt]aQyIc";
      String string1 = "$VALUES";
      TextNode textNode0 = new TextNode(string0, string1);
      List<Node> list0 = textNode0.childNodes();
      Attributes attributes0 = textNode0.attributes();
      String string2 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string2, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "|";
      String string1 = ")KN{5?It(E4n}";
      TextNode textNode0 = new TextNode(string0, string1);
      StringBuilder stringBuilder0 = null;
      int int0 = (-2121);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "embed";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = null;
      TextNode textNode1 = textNode0.text(string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode1.hasAttr(string2);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "-P1^W*O3N/Zvi%E}";
      String string1 = TextNode.normaliseWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "b%Z0q*lq7Whd$#k";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.attr(string0);
      textNode0.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode();
      String string2 = "map";
      // Undeclared exception!
      try { 
        textNode0.attr(string2, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "1p*d";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      StringBuilder stringBuilder1 = stringBuilder0.append(int0);
      int int1 = 4545;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings0.prettyPrint(boolean1);
      textNode0.outerHtmlTail(stringBuilder1, int1, document_OutputSettings3);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int0, document_OutputSettings3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      StringBuilder stringBuilder0 = null;
      int int0 = (-2886);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.charset(charset0);
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings2);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      String string0 = "#D";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "^5X";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "fFu&T$e4UJ5";
      Node node0 = textNode0.removeAttr(string2);
      boolean boolean0 = textNode0.isBlank();
      String string3 = textNode0.toString();
      String string4 = "03n2<,<*8E!|K>7(pEl";
      Node node1 = textNode0.removeAttr(string4);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      String string1 = "Lddf$yq|=1j40Eh";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string2 = null;
      boolean boolean0 = textNode0.hasAttr(string0);
      String string3 = "(*J7c\\iF;Yf#rfZ2)7?";
      Node node0 = textNode0.attr(string3, string1);
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string2);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = textNode0.getWholeText();
      String string1 = "4s82an\"|C7B c~3";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "^\\s+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = null;
      TextNode textNode1 = TextNode.createFromEncoded(textNode0.TEXT_KEY, string1);
      String string2 = textNode0.getWholeText();
      String string3 = textNode0.toString();
      String string4 = textNode0.text();
      boolean boolean0 = textNode1.isBlank();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = "?S_|-?&[gEBi>3-i+";
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = (-762);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 5683;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      Node[] nodeArray0 = textNode0.childNodesAsArray();
      String string0 = "&Z(8RSq'j+d~yV4S";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "select";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = null;
      textNode0.attributes = attributes0;
      String string1 = textNode0.toString();
      String string2 = textNode0.getWholeText();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, int0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) string1);
      char char0 = ')';
      StringBuilder stringBuilder3 = stringBuilder1.append(char0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string1);
      Node node0 = textNode0.doClone(textNode1);
      Node node1 = textNode1.removeAttr(textNode0.TEXT_KEY);
      textNode1.ensureAttributes();
      String string2 = "";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      Attributes attributes0 = textNode1.attributes();
      String string4 = textNode0.nodeName();
      String string5 = null;
      // Undeclared exception!
      try { 
        textNode1.removeAttr(string5);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "#7(qrf";
      String string1 = "3tJMJ;lP_";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      String string2 = textNode1.attr(textNode0.TEXT_KEY);
      boolean boolean0 = textNode1.isBlank();
      String string3 = textNode0.attr(textNode1.TEXT_KEY);
      String string4 = textNode1.outerHtml();
      String string5 = textNode1.getWholeText();
      Attributes attributes0 = textNode0.attributes();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "&6N<v`*WC1s";
      String string1 = "jL.";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 4;
      TextNode textNode1 = TextNode.createFromEncoded(string1, string0);
      TextNode textNode2 = textNode0.splitText(int0);
      String string2 = textNode2.absUrl(textNode0.TEXT_KEY);
      textNode2.ensureAttributes();
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "";
      textNode0.baseUri = string1;
      String string2 = textNode0.nodeName();
      String string3 = "#text";
      String string4 = textNode0.absUrl(string3);
      String string5 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "[%s$=%s]";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = textNode0.attributes();
      int int0 = 29;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        Charset.forName(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      String string0 = TextNode.stripLeadingWhitespace(textNode0.TEXT_KEY);
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "\"";
      String string1 = "]b&";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      List<Node> list0 = textNode0.childNodes();
      textNode0.childNodes = list0;
      boolean boolean0 = textNode0.hasAttr(string2);
      TextNode textNode1 = textNode0.text(string1);
      String string3 = "UJOOPzA|h1";
      String string4 = TextNode.normaliseWhitespace(string3);
      String string5 = textNode1.text();
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "?";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.nodeName();
      String string3 = textNode0.attr(string0);
      boolean boolean0 = textNode0.hasAttr(string0);
      String string4 = "40&J7";
      TextNode textNode1 = textNode0.text(string4);
      String string5 = "$:E)<!bh?B3$iaM>";
      StringBuilder stringBuilder0 = new StringBuilder(string5);
      float float0 = 5.91F;
      StringBuilder stringBuilder1 = stringBuilder0.append(float0);
      long long0 = 1670L;
      StringBuilder stringBuilder2 = stringBuilder1.append(long0);
      int int0 = (-2123);
      char char0 = 'a';
      // Undeclared exception!
      try { 
        stringBuilder2.insert(int0, char0);
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = null;
      TextNode textNode1 = textNode0.text(string1);
      // Undeclared exception!
      try { 
        textNode1.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = " 44Wa%K?)D\"GRf.o*";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      Node node0 = textNode0.previousSibling();
      TextNode textNode1 = textNode0.splitText(int0);
      boolean boolean0 = textNode1.hasAttr(textNode0.TEXT_KEY);
      String string1 = textNode1.attr(textNode0.TEXT_KEY);
      String string2 = textNode1.getWholeText();
      Attributes attributes0 = textNode1.attributes();
      String string3 = textNode0.getWholeText();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      TextNode textNode0 = new TextNode();
      int int0 = 344;
      // Undeclared exception!
      try { 
        textNode0.ensureAttributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "DF%vgPI/R'G4>3";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.text();
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      Attributes attributes0 = textNode1.attributes();
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string1);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.TEXT_KEY);
      int int0 = 1915;
      String string2 = "";
      String string3 = "";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(int0);
      textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "qRz=.y1G~SLMJ,\".bu";
      boolean boolean0 = textNode0.hasAttr(string2);
      String string3 = "org.jsoup.nodes.TextNode";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      int int0 = (-217);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      textNode0.outerHtmlHead(stringBuilder1, int0, document_OutputSettings1);
      // Undeclared exception!
      try { 
        textNode0.text(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = TextNode.TEXT_KEY;
      String string2 = "Qgfp)cW:\"k-ab/@";
      TextNode textNode1 = textNode0.text(string0);
      String string3 = textNode0.getWholeText();
      textNode0.setParentNode(textNode1);
      String string4 = "";
      boolean boolean0 = textNode0.hasAttr(string4);
      String string5 = "aZ)W";
      Node node0 = textNode0.attr(string5, string5);
      String string6 = textNode1.absUrl(((TextNode) node0).TEXT_KEY);
      List<Node> list0 = node0.childNodesCopy();
      String string7 = textNode0.text();
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      int int1 = 2336;
      StringBuilder stringBuilder0 = new StringBuilder(int1);
      String string0 = "\n\n";
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      int int2 = (-2312);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "DF%vgPI/R'G4>3";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      char[] charArray0 = new char[9];
      char char0 = '5';
      charArray0[0] = char0;
      char char1 = 'd';
      char char2 = ']';
      charArray0[2] = char2;
      char char3 = '*';
      charArray0[4] = char3;
      char char4 = '9';
      charArray0[6] = charArray0[1];
      char char5 = 'I';
      charArray0[7] = char5;
      char char6 = 'p';
      charArray0[8] = char6;
      int int0 = (-1498);
      int int1 = 1207;
      int int2 = 3;
      int int3 = 2017;
      StringBuilder stringBuilder0 = new StringBuilder(int1);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int2);
      String string1 = "a8";
      Document document0 = new Document(string1);
      Element element0 = document0.prependText(textNode0.TEXT_KEY);
      Set<String> set0 = element0.classNames();
      Element element1 = element0.classNames(set0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) element1);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder2);
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "map";
      String string3 = "";
      TextNode textNode0 = new TextNode(string1, string3);
      int int0 = (-3321);
      textNode0.siblingIndex = int0;
      String string4 = "N'[jvYgPoR~5I";
      TextNode textNode1 = textNode0.text(string4);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string4);
      int int1 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      int int2 = 366;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int2);
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(boolean0);
      textNode1.outerHtmlHead(stringBuilder0, int1, document_OutputSettings4);
      StringBuilder stringBuilder1 = null;
      int int3 = 1153;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder1, int3, document_OutputSettings4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = TextNode.TEXT_KEY;
      String string2 = "Qgfp)cW:\"k-ab/@";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      String string3 = "";
      String string4 = "aZ)W";
      Node node0 = textNode0.attr(string4, string4);
      String string5 = textNode1.absUrl(((TextNode) node0).TEXT_KEY);
      int int0 = 32;
      String string6 = textNode1.outerHtml();
      textNode1.siblingIndex = int0;
      List<Node> list0 = node0.childNodesCopy();
      String string7 = textNode0.text();
      String string8 = textNode1.toString();
      int int1 = (-3321);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      String string0 = "Entities";
      String string1 = "%)Qz\\{:X:`@HF6<E";
      TextNode textNode0 = new TextNode(string1, string1);
      String string2 = textNode0.attr(string0);
      String string3 = "h-#*O\\X";
      TextNode textNode1 = textNode0.text(string3);
      String string4 = "F4[oU\\f.7QiJ-@Q";
      TextNode textNode2 = TextNode.createFromEncoded(string4, string1);
      String string5 = "";
      TextNode.TEXT_KEY = string5;
      // Undeclared exception!
      try { 
        textNode0.isBlank();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "DF%vgPI/R'G4>3";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      char[] charArray0 = new char[9];
      char char0 = 'x';
      char char1 = ']';
      charArray0[2] = char1;
      char char2 = '*';
      charArray0[4] = char2;
      char char3 = '9';
      char char4 = 'I';
      charArray0[7] = char4;
      char char5 = 'p';
      charArray0[8] = char0;
      int int0 = (-1498);
      int int1 = 1207;
      int int2 = 3;
      int int3 = 2017;
      StringBuilder stringBuilder0 = new StringBuilder(int1);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) int2);
      String string1 = "a8";
      Document document0 = Document.createShell(textNode0.TEXT_KEY);
      Element element0 = document0.prependText(textNode0.TEXT_KEY);
      Elements elements0 = element0.getElementsContainingText(string0);
      Set<String> set0 = new LinkedHashSet<String>();
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) document0);
      boolean boolean0 = textNode0.isBlank();
      String string2 = "org.jsoup.select.Evaluator$AttributeWithValueContaining";
      TextNode textNode1 = new TextNode(string0, string2);
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = ">Az>";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "9Q{A.*zd(Z,mAt+9";
      Attributes attributes0 = textNode0.attributes();
      int int0 = (-115);
      textNode0.siblingIndex = int0;
      TextNode textNode1 = textNode0.text(string1);
      textNode1.setParentNode(textNode0);
      String string2 = textNode1.text();
      int int1 = 12;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.absUrl(textNode0.TEXT_KEY);
      String string2 = null;
      TextNode.TEXT_KEY = string2;
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
