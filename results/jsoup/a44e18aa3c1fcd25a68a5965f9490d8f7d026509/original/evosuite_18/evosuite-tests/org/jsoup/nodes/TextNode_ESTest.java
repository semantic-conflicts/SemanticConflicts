/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:27:29 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "BuLxO";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.absUrl(string0);
      Attributes attributes0 = textNode0.attributes();
      boolean boolean0 = textNode0.isBlank();
      Node node0 = textNode0.removeAttr(string0);
      node0.setBaseUri(string0);
      String string2 = "";
      String string3 = TextNode.normaliseWhitespace(string2);
      // Undeclared exception!
      try { 
        textNode0.attr(string1, string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "UAH0T~7eJ&RJ?";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "^\\s+";
      Node node0 = textNode0.attr(string0, string1);
      textNode0.setParentNode(node0);
      int int0 = 0;
      String string2 = textNode0.text();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "UAH0T~7eJ&RJ?";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      String string1 = textNode0.text();
      TextNode textNode1 = textNode0.splitText(int0);
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "O&w^'|vJzpBL ";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "hs&";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = TextNode.normaliseWhitespace(string1);
      String string3 = TextNode.stripLeadingWhitespace(string0);
      Document document0 = new Document(string1);
      textNode0.parentNode = (Node) document0;
      String string4 = textNode0.toString();
      String string5 = textNode0.absUrl(string4);
      TextNode textNode1 = textNode0.text(string1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "3JyEPJ";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 97;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int1 = 368;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      Charset charset0 = Charset.defaultCharset();
      textNode0.outerHtmlTail(stringBuilder1, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = ";EXJWlwD'.";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "\n * ";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "Is@C,4tpZSn+F;IF4-";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string2);
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "gGWCqqolw_1b{,y#g";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "var";
      String string1 = "KNfD6$^CJ";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string1);
      Node node0 = textNode1.removeAttr(string1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "$tX_ue-UI1Hmv";
      String string1 = "\"<I|<Z";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.getWholeText();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = "r{:[Q}>1xZ%w-v";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 0;
      textNode1.setSiblingIndex(int0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "U+D#*`eSIl$T";
      String string1 = "db3iWE=0feWAR\"Q";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string2);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "qq!V.3~>@}?Dx";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "";
      TextNode textNode1 = textNode0.text(string1);
      Node[] nodeArray0 = textNode1.childNodesAsArray();
      boolean boolean0 = textNode1.isBlank();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string0);
      Attributes attributes0 = textNode0.attributes();
      String string2 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 1573;
      Node node0 = textNode0.attr(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.attr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "^}J,Y2phvK(> 5g6/";
      String string1 = " <%s>";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "gzi\\s*<\\";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-386);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "J2a8U4JP22cn lh5";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.absUrl(string0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      String string1 = "OzUw;9VMKi";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.nodeName();
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string2);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "n-4Iqd'\"L";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "";
      Node node0 = textNode0.previousSibling();
      String string2 = textNode0.attr(string1);
      String string3 = TextNode.normaliseWhitespace(string0);
      // Undeclared exception!
      try { 
        textNode0.after(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      int int0 = 0;
      char[] charArray0 = new char[2];
      char char0 = '7';
      charArray0[0] = char0;
      char char1 = '_';
      charArray0[1] = char1;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, charArray0);
      double double0 = (-1311.0);
      StringBuilder stringBuilder2 = stringBuilder1.append(double0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(int0, (Object) string0);
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder4);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "^\\s+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      boolean boolean0 = textNode0.hasAttr(string0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = "}*8=XV%";
      TextNode textNode0 = new TextNode(string0, string1);
      boolean boolean0 = textNode0.isBlank();
      String string2 = textNode0.toString();
      String string3 = null;
      String string4 = "`b49r3.n-#O$y%R";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "_9((#XF";
      TextNode textNode0 = new TextNode(string0, string0);
      boolean boolean0 = textNode0.isBlank();
      StringBuilder stringBuilder0 = null;
      int int0 = 33;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "Q|24";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "s?!5zx)lV:3 WaB2t";
      TextNode textNode1 = textNode0.text(string2);
      int int0 = 1;
      TextNode textNode2 = textNode1.splitText(int0);
      CharSequence charSequence0 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder(charSequence0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = null;
      Node node0 = textNode0.clone();
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.attr(string1);
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = ".~Ns_9Y4Y63 Bj9";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      boolean boolean0 = textNode0.hasAttr(string0);
      Attributes attributes0 = textNode0.attributes();
      TextNode textNode1 = textNode0.splitText(int0);
      String string1 = "li";
      // Undeclared exception!
      try { 
        textNode1.replaceChild(textNode0, textNode0);
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "0Xrnk";
      String string1 = "text";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.nodeName();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      Node node1 = textNode0.doClone(node0);
      textNode0.parentNode = node1;
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "hs&";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      List<Node> list0 = textNode0.childNodes;
      Node node0 = textNode0.nextSibling();
      String string1 = "org.jsoup.parser.Tag";
      String string2 = TextNode.stripLeadingWhitespace(string1);
      textNode0.childNodes = list0;
      TextNode textNode1 = textNode0.text(string0);
      String string3 = textNode0.text();
      String string4 = textNode0.toString();
      Attributes attributes0 = textNode0.attributes();
      String string5 = textNode1.toString();
      String string6 = textNode0.absUrl(string5);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node1 = textNode0.traverse(nodeVisitor0);
      String string7 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string7);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = null;
      String string1 = "select";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.getWholeText();
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "EndTag";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "ScriptDataEscapedEndTagOpen";
      TextNode textNode1 = textNode0.text(string1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      int int0 = 2863;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode1.outerHtmlTail(stringBuilder1, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "V";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 16;
      TextNode textNode1 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      String string1 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string1);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.append((float) int0);
      StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(boolean0);
      textNode0.outerHtmlHead(stringBuilder4, int0, document_OutputSettings1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = null;
      String string1 = "gb";
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = ";EPXgJWlwD'.";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      char[] charArray0 = new char[23];
      char char0 = '.';
      charArray0[0] = char0;
      char char1 = ';';
      charArray0[1] = char1;
      char char2 = 'r';
      charArray0[2] = char2;
      char char3 = '3';
      charArray0[3] = char3;
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      String string1 = "D/Nz&)[z&)*-`I_h";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = null;
      TextNode textNode1 = textNode0.text(string1);
      String string2 = "audio";
      String string3 = TextNode.stripLeadingWhitespace(string0);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "BuLxO";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Attributes attributes0 = textNode0.attributes();
      String string2 = textNode0.absUrl(string0);
      String string3 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string3);
      float float0 = 106.94147F;
      StringBuilder stringBuilder1 = stringBuilder0.append(float0);
      Attributes attributes1 = textNode0.attributes();
      StringBuilder stringBuilder2 = stringBuilder0.append(float0);
      boolean boolean0 = false;
      StringBuilder stringBuilder3 = stringBuilder2.append(boolean0);
      textNode0.outerHtml(stringBuilder2);
      boolean boolean1 = textNode0.isBlank();
      Node node0 = textNode0.removeAttr(string0);
      node0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      String string1 = "O9&^w'|vJ#zpBL ";
      String string2 = TextNode.stripLeadingWhitespace(string1);
      String string3 = "data";
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "BuLxO";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.absUrl(string0);
      int int0 = 5488;
      textNode0.siblingIndex = int0;
      String string3 = "";
      float float0 = 106.94147F;
      Attributes attributes0 = textNode0.attributes();
      boolean boolean0 = textNode0.isBlank();
      Node node0 = textNode0.removeAttr(string0);
      node0.setBaseUri(string0);
      String string4 = textNode0.toString();
      String string5 = TextNode.normaliseWhitespace(string2);
      String string6 = "";
      String string7 = TextNode.normaliseWhitespace(string6);
      String string8 = null;
      // Undeclared exception!
      try { 
        textNode0.attr(string2, string8);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "hs&";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = TextNode.normaliseWhitespace(string1);
      String string3 = TextNode.stripLeadingWhitespace(string0);
      Document document0 = new Document(string1);
      String string4 = "/*6s[IC+d *9:0Wg[~m";
      Element element0 = document0.appendElement(string4);
      textNode0.parentNode = (Node) element0;
      String string5 = textNode0.toString();
      String string6 = textNode0.absUrl(string5);
      TextNode textNode1 = textNode0.text(string1);
      int int0 = 8;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "BuLxO";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "";
      boolean boolean0 = textNode0.isBlank();
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      textNode1.setBaseUri(string0);
      String string3 = "";
      String string4 = TextNode.normaliseWhitespace(string3);
      String string5 = textNode0.attr(string2);
      int int0 = 32;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      Charset charset0 = Charset.defaultCharset();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string2);
      int int1 = 3554;
      Tag tag0 = Tag.valueOf(string0);
      Element element0 = new Element(tag0, string2);
      String string6 = "keygen";
      Element element1 = element0.appendText(string6);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int1, (Object) element1);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3554
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }
}
