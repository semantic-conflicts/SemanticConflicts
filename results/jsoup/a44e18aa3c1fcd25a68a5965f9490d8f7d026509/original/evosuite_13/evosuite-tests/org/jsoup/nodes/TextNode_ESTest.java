/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:13:26 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = ":2+";
      String string1 = TextNode.normaliseWhitespace(string0);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      String string2 = TextNode.normaliseWhitespace(string0);
      String string3 = TextNode.stripLeadingWhitespace(string2);
      TextNode textNode1 = textNode0.splitText(int0);
      String string4 = textNode1.attr(string2);
      String string5 = textNode0.absUrl(string0);
      String string6 = textNode0.nodeName();
      TextNode textNode2 = textNode1.text(string4);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "{ee+)XEGB";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string0);
      int int0 = (-2399);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "j`'S$7'jKe~FC_%T;*l";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = " PUBLIC \"";
      textNode0.baseUri = string1;
      boolean boolean0 = textNode0.hasAttr(string0);
      String string2 = textNode0.text();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.baseUri);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "S";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Node node0 = textNode0.removeAttr(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "d[";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "org.soup.nodes.TextNode";
      Tag tag0 = Tag.valueOf(string1);
      Attributes attributes0 = textNode0.attributes();
      Element element0 = new Element(tag0, string0, attributes0);
      textNode0.parentNode = (Node) element0;
      String string2 = textNode0.toString();
      TextNode textNode1 = textNode0.text(string0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueStarting";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = (-278);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "'x9L2zEsclT.}L:T";
      String string1 = TextNode.stripLeadingWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "T^'eK>%10";
      String string1 = "SH3ZM(k|c?S";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Attributes attributes0 = textNode0.attributes();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "G";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      String string1 = "Hm<8p9";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "KV![XiR1[";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      // Undeclared exception!
      try { 
        textNode0.before((Node) textNode1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "org.jsoup.nodes.TextNode";
      TextNode textNode1 = textNode0.text(string1);
      List<Node> list0 = textNode0.childNodes();
      textNode1.childNodes = list0;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(string1);
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode1.outerHtmlTail(stringBuilder1, int0, document_OutputSettings0);
      boolean boolean0 = textNode0.hasAttr(string1);
      TextNode textNode2 = textNode0.text(string1);
      String string2 = textNode0.nodeName();
      String string3 = "P6P)s] _vCp0";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      TextNode textNode3 = textNode0.text(string0);
      Attributes attributes0 = textNode3.attributes();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "Split offset must be not be negative";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "{c5o/";
      String string3 = "t";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string3);
      Attributes attributes0 = textNode0.attributes();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = ",TmZuG!`NH,/UG^F";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "ggr'.5";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = textNode1.getWholeText();
      String string4 = textNode0.nodeName();
      Node node0 = textNode1.attr(string4, string3);
      String string5 = textNode1.text();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "'ql73Gl1,d*mj]s";
      String string1 = "$5p;|z**bveQ/A9Mr";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Node node0 = textNode0.nextSibling();
      String string2 = "";
      boolean boolean0 = textNode0.hasAttr(string2);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "0L";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 33;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "cWa";
      String string1 = TextNode.normaliseWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string0);
      int int0 = (-3060);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "";
      String string2 = textNode1.attr(string1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$AttributeWithValueEnding";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string2);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      String string1 = "+ q.F7]{hyI.NQC-2";
      TextNode textNode0 = new TextNode(string0, string1);
      Attributes attributes0 = null;
      textNode0.attributes = attributes0;
      String string2 = textNode0.absUrl(string1);
      Attributes attributes1 = textNode0.attributes();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "Z{M%\\Q5o:j{4H0I";
      String string1 = "w8Bhch>{Ejq%H8e";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string2);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "=6%2v<iZo>D";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.text();
      boolean boolean0 = textNode0.isBlank();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "xzEF'`dfT";
      String string2 = TextNode.stripLeadingWhitespace(string1);
      boolean boolean0 = textNode0.isBlank();
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = " $RH/GOMv";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
      String string2 = "\n * ";
      Node node0 = textNode1.removeAttr(string2);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      CharSequence charSequence0 = null;
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, charSequence0);
      int int1 = 0;
      int int2 = 1083;
      String string0 = "";
      StringBuilder stringBuilder2 = stringBuilder0.replace(int1, int2, string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string1 = "s9t";
      TextNode textNode0 = new TextNode(string1, string1);
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = "L5}TQS@RK@Yn";
      String string4 = textNode1.attr(string3);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "+]:Zi:";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.nodeName();
      String string3 = "";
      String string4 = "_31Hz0BS";
      String string5 = "!eE";
      textNode0.text = string5;
      TextNode textNode1 = TextNode.createFromEncoded(string4, string3);
      String string6 = "pXg[5J:'ymn3gi";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string6);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "6F&?||G4wB!0}2L";
      String string1 = "\n";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "#text";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      TextNode textNode1 = textNode0.text(string2);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = ":2+";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "%Pza};";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      String string3 = "small";
      TextNode textNode1 = textNode0.text(string3);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode1.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      String string4 = textNode1.attr(string0);
      String string5 = textNode1.getWholeText();
      String string6 = textNode1.nodeName();
      String string7 = textNode0.getWholeText();
      int int1 = 0;
      TextNode textNode2 = textNode0.splitText(int1);
      String string8 = textNode2.getWholeText();
      String string9 = "";
      String string10 = textNode2.attr(string9);
      int int2 = 0;
      TextNode textNode3 = textNode2.splitText(int2);
      String string11 = textNode1.absUrl(string3);
      String string12 = textNode2.getWholeText();
      String string13 = "";
      TextNode textNode4 = textNode3.text(string13);
      int int3 = 2495;
      textNode4.outerHtmlHead(stringBuilder0, int3, document_OutputSettings0);
      String string14 = textNode1.nodeName();
      String string15 = "S0,E>.$&";
      String string16 = textNode4.attr(string15);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "Split offset must not be greater than current text length";
      String string1 = "^\\s+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      StringBuilder stringBuilder0 = null;
      int int0 = 1576;
      boolean boolean0 = textNode0.isBlank();
      textNode0.siblingIndex = int0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      String string2 = textNode0.outerHtml();
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(boolean1);
      String string3 = null;
      // Undeclared exception!
      try { 
        Charset.forName(string3);
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "As}x80a&v\\f(fC|K{B";
      String string1 = "@G";
      TextNode textNode0 = new TextNode(string0, string1);
      textNode0.baseUri = string0;
      TextNode textNode1 = textNode0.text(string1);
      int int0 = 0;
      TextNode textNode2 = textNode1.splitText(int0);
      Node node0 = textNode2.removeAttr(string1);
      TextNode textNode3 = textNode0.text(string0);
      StringBuilder stringBuilder0 = new StringBuilder(textNode0.baseUri);
      char char0 = '3';
      StringBuilder stringBuilder1 = stringBuilder0.insert(int0, char0);
      String string2 = "bodq&tXCm:MK";
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, string2);
      long long0 = 3373L;
      StringBuilder stringBuilder3 = stringBuilder2.append(long0);
      char[] charArray0 = new char[7];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      StringBuilder stringBuilder4 = stringBuilder3.append(charArray0, int0, int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder4);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "IU}!y";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = null;
      String string3 = "thead";
      TextNode textNode0 = new TextNode(string2, string3);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = null;
      String string1 = "E joRk%3FtES@*";
      TextNode textNode0 = new TextNode(string0, string1);
      Attributes attributes0 = textNode0.attributes;
      textNode0.attributes = attributes0;
      String string2 = "-`X%MN9A=";
      // Undeclared exception!
      try { 
        textNode0.attr(string2);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "0L";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 33;
      TextNode textNode1 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = null;
      int int1 = 1441;
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int1, document_OutputSettings0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = ",q34LDz@4:$<<+K#";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      long long0 = (-629L);
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      char[] charArray0 = new char[8];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = '%';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      char char4 = '8';
      charArray0[4] = char4;
      char char5 = '0';
      charArray0[5] = char5;
      char char6 = 'U';
      charArray0[6] = char6;
      char char7 = '3';
      charArray0[7] = char7;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder1.append((double) long0);
      textNode0.outerHtml(stringBuilder3);
      boolean boolean0 = textNode0.hasAttr(string0);
      String string1 = "r";
      Node node0 = textNode0.removeAttr(string1);
      String string2 = "nnYSrj6eq?RY";
      String string3 = TextNode.stripLeadingWhitespace(string2);
      boolean boolean1 = textNode0.hasAttr(string1);
      String string4 = "^\\s+";
      String string5 = textNode0.absUrl(string4);
      String string6 = "samp";
      String string7 = textNode0.absUrl(string6);
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder3);
      String string8 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string8);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = ",q34LDz@4:$<<+K#";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      long long0 = (-629L);
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      char[] charArray0 = new char[8];
      char char0 = 'q';
      charArray0[0] = char0;
      char char1 = ']';
      charArray0[1] = char1;
      char char2 = '%';
      charArray0[2] = char2;
      char char3 = ')';
      charArray0[3] = char3;
      char char4 = '8';
      charArray0[4] = char4;
      char char5 = '0';
      charArray0[5] = char5;
      char char6 = 'U';
      charArray0[6] = char6;
      char char7 = '3';
      charArray0[7] = char7;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder1.append((double) long0);
      textNode0.outerHtml(stringBuilder3);
      String string1 = null;
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = ":2+";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "%Pza};";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string2);
      String string3 = "small";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      String string4 = textNode0.getWholeText();
      String string5 = textNode0.nodeName();
      String string6 = textNode0.getWholeText();
      int int1 = 0;
      TextNode textNode1 = textNode0.splitText(int1);
      String string7 = textNode1.getWholeText();
      String string8 = "";
      String string9 = textNode1.attr(string8);
      int int2 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int1);
      TextNode textNode2 = textNode1.splitText(int2);
      String string10 = textNode0.absUrl(string3);
      String string11 = "";
      TextNode textNode3 = textNode2.text(string11);
      int int3 = 2495;
      textNode3.outerHtmlHead(stringBuilder0, int3, document_OutputSettings0);
      String string12 = textNode0.nodeName();
      String string13 = "S0,E>.$&";
      String string14 = textNode3.attr(string13);
      textNode0.outerHtmlHead(stringBuilder0, int3, document_OutputSettings0);
      TextNode textNode4 = textNode2.text(string9);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = " PUBLIC \"";
      textNode0.baseUri = string2;
      TextNode textNode1 = textNode0.text(string1);
      String string3 = "#text";
      TextNode textNode2 = TextNode.createFromEncoded(string3, textNode0.baseUri);
      boolean boolean0 = textNode1.isBlank();
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = ",q34LDz@4:$<<+K#";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      long long0 = (-629L);
      StringBuilder stringBuilder1 = stringBuilder0.append(long0);
      int int0 = (-567);
      textNode0.siblingIndex = int0;
      char[] charArray0 = new char[8];
      char char0 = 'q';
      char char1 = ']';
      char char2 = '%';
      charArray0[2] = char2;
      charArray0[3] = char1;
      char char3 = '8';
      charArray0[4] = char3;
      char char4 = '0';
      charArray0[5] = char4;
      char char5 = 'U';
      charArray0[6] = char5;
      char char6 = '3';
      charArray0[7] = char6;
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      StringBuilder stringBuilder3 = stringBuilder1.append((double) long0);
      textNode0.outerHtml(stringBuilder3);
      boolean boolean0 = textNode0.hasAttr(string0);
      String string1 = "r";
      Node node0 = textNode0.removeAttr(string1);
      String string2 = "nnYSrj6eq?RY";
      boolean boolean1 = textNode0.hasAttr(string1);
      String string3 = "^\\s+";
      String string4 = textNode0.absUrl(string3);
      String string5 = "samp";
      String string6 = textNode0.absUrl(string5);
      boolean boolean2 = TextNode.lastCharIsWhitespace(stringBuilder3);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "j`'S$7'jKe~FC_T;*l";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "~kAfU?w";
      String string2 = " PUBLIC \"";
      textNode0.baseUri = string2;
      TextNode textNode1 = textNode0.text(string1);
      String string3 = "#text";
      TextNode textNode2 = TextNode.createFromEncoded(string3, textNode0.baseUri);
      boolean boolean0 = textNode1.isBlank();
      String string4 = textNode0.text();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) textNode0.baseUri);
      Attributes attributes0 = textNode1.attributes();
      IntStream intStream0 = stringBuilder0.chars();
      int int0 = 572;
      int int1 = 1495;
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = new StringBuilder();
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      String string1 = "o|-;MB51TQ";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "CommentEnd";
      TextNode textNode1 = textNode0.text(string2);
      textNode0.parentNode = (Node) textNode1;
      int int0 = 16;
      // Undeclared exception!
      try { 
        textNode1.toString();
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "org.jsoup.nodes.TextNode";
      Tag tag0 = Tag.valueOf(string1);
      String string2 = ">";
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Element element0 = new Element(tag0, string2, attributes1);
      textNode0.parentNode = (Node) element0;
      String string3 = textNode0.toString();
      String string4 = TextNode.stripLeadingWhitespace(string3);
      String string5 = "#text";
      StringBuilder stringBuilder0 = new StringBuilder(string5);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      int int0 = 38;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "'Q;YCWZe#W<;>%[ TJH";
      String string1 = "^\\s+";
      String string2 = null;
      TextNode textNode0 = new TextNode(string2, string1);
      List<Node> list0 = textNode0.childNodes();
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "]p";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "org.jsoup.nodes.TextNode";
      Tag tag0 = Tag.valueOf(string1);
      String string2 = ">";
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Element element0 = new Element(tag0, string2, attributes1);
      attributes0.addAll(attributes1);
      textNode0.parentNode = (Node) element0;
      String string3 = textNode0.toString();
      String string4 = TextNode.stripLeadingWhitespace(string3);
      String string5 = "#text";
      StringBuilder stringBuilder0 = new StringBuilder(string5);
      boolean boolean0 = false;
      StringBuilder stringBuilder1 = stringBuilder0.append(boolean0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      int int0 = 38;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings0);
      TextNode textNode1 = textNode0.text(string5);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "]p";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "org.soup.nodes.TextNode";
      Tag tag0 = Tag.valueOf(string1);
      String string2 = ">";
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Element element0 = new Element(tag0, string2, attributes1);
      attributes0.addAll(attributes1);
      textNode0.parentNode = (Node) element0;
      String string3 = textNode0.toString();
      String string4 = TextNode.normaliseWhitespace(string2);
      String string5 = "txt";
      boolean boolean0 = false;
      int int0 = 38;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      TextNode textNode1 = textNode0.text(string5);
      int int1 = 1;
      // Undeclared exception!
      try { 
        textNode1.splitText(int1);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
