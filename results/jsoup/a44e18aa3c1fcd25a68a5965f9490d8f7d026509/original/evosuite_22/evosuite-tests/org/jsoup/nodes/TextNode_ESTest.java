/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:40:05 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.List;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "\\B[k}Tgsj{";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      boolean boolean0 = textNode0.isBlank();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) attributes0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = (-243);
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "gS^?JHYdK";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "org.jsoup.select.Evaluator$IndexEquals";
      String string2 = textNode0.absUrl(string1);
      TextNode textNode1 = TextNode.createFromEncoded(string2, string2);
      Node node0 = textNode0.removeAttr(string0);
      String string3 = TextNode.stripLeadingWhitespace(string0);
      String string4 = textNode1.toString();
      node0.parentNode = (Node) textNode1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-1414);
      String string0 = "V@J";
      TextNode textNode0 = new TextNode(string0, string0);
      int int1 = 0;
      TextNode textNode1 = textNode0.splitText(int1);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "c='8X_9";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = null;
      int int0 = 1299;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "c='8X_9";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.text();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "+$NewW_f";
      TextNode textNode1 = (TextNode)textNode0.attr(string1, string0);
      TextNode textNode2 = textNode1.text(string1);
      String string2 = "*W:CF";
      textNode0.text = string2;
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      int int0 = 32;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      int int1 = 1;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode0 = new TextNode(string0, string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      String string1 = textNode1.nodeName();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = " \"";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "";
      String string2 = "Split offset must not be greater than current text length";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = textNode0.attr(string1);
      int int0 = 32;
      TextNode textNode2 = textNode0.splitText(int0);
      String string4 = "";
      // Undeclared exception!
      try { 
        textNode1.absUrl(string4);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "cp";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string1);
      Attributes attributes0 = textNode1.attributes();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "`!/rF??`,B{Kx";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "'vBS";
      String string1 = "dZMII5Gej|^j*+";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.nodeName();
      Node node0 = textNode0.attr(string1, string1);
      String string3 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "org.jsoup.examples.HtmlToPlainText$FormattingVisitor";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "*";
      String string2 = textNode0.absUrl(string1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "!1wp!=BS";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 1617;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      String string1 = "u_@bsU=n?q\"y";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "XT$u{VA#E7dc`>";
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string2);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "wXw&.fp";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = (-1627);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "soJyr";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "id";
      String string2 = textNode0.attr(string1);
      Attributes attributes0 = textNode0.attributes();
      String string3 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "5l";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Node node0 = textNode0.removeAttr(string0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "trbkjpn44_T:igiS+e.";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      boolean boolean0 = textNode0.isBlank();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      String string1 = "samp";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.getWholeText();
      String string3 = "#text";
      Node node0 = textNode0.removeAttr(string3);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "button";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string2, string2);
      TextNode textNode1 = textNode0.text(string2);
      String string3 = "U{]~Wn~QKKAR%tTg";
      Node node0 = textNode1.attr(string3, string2);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = textNode0.getWholeText();
      boolean boolean0 = textNode0.isBlank();
      String string2 = null;
      TextNode textNode1 = textNode0.text(string2);
      String string3 = "N*zR#";
      textNode1.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "BRZ_$(%9NDn";
      String string1 = "form";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = TextNode.normaliseWhitespace(string1);
      int int0 = (-326);
      textNode0.setSiblingIndex(int0);
      textNode0.setBaseUri(string0);
      TextNode textNode1 = textNode0.text(string1);
      String string3 = "j<lji\"z.s";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      int int1 = 1;
      textNode1.setSiblingIndex(int1);
      String string5 = "q;79TfV8B ";
      boolean boolean0 = textNode1.hasAttr(string5);
      int int2 = (-378);
      String string6 = textNode1.toString();
      textNode0.siblingIndex = int2;
      // Undeclared exception!
      try { 
        textNode1.replaceChild(textNode0, textNode0);
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "device";
      TextNode textNode1 = textNode0.text(string1);
      textNode1.parentNode = (Node) textNode0;
      Node node0 = textNode0.nextSibling();
      int int0 = 0;
      String string2 = textNode1.absUrl(string1);
      textNode1.siblingIndex = int0;
      String string3 = "S7D}]XC2wD'^_";
      Node node1 = textNode1.removeAttr(string3);
      textNode1.setSiblingIndex(int0);
      String string4 = "";
      boolean boolean0 = textNode0.hasAttr(string4);
      textNode1.parentNode = node0;
      String string5 = TextNode.normaliseWhitespace(string3);
      TextNode textNode2 = textNode1.text(string1);
      String string6 = textNode0.absUrl(string1);
      textNode2.parentNode = (Node) textNode0;
      String string7 = textNode0.attr(string0);
      boolean boolean1 = textNode1.hasAttr(string7);
      String string8 = textNode0.attr(string7);
      String string9 = textNode1.absUrl(string1);
      Attributes attributes0 = textNode1.attributes();
      // Undeclared exception!
      textNode1.toString();
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "*=&3@iX,@\\|\"CGe\"iz";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.attr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      String string1 = TextNode.normaliseWhitespace(string0);
      String string2 = "/kiY_CNc4(|N mDLP";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string1);
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      int int1 = 0;
      String string0 = "#text";
      StringBuilder stringBuilder1 = stringBuilder0.replace(int1, int1, string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 405;
      List<Node> list0 = textNode0.childNodesCopy();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "j_5_";
      TextNode textNode0 = new TextNode(string0, string0);
      List<Node> list0 = textNode0.siblingNodes();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "='8X_9T9";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = null;
      int int0 = 1299;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "J";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "M*i@+o-.\\M`";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      char char0 = 'H';
      StringBuilder stringBuilder1 = stringBuilder0.append(char0);
      int int0 = 0;
      String string1 = "^\\s+";
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, string1);
      int int1 = 3;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      List<Node> list0 = textNode1.childNodes();
      StringBuilder stringBuilder3 = stringBuilder2.insert(int1, char0);
      Object object0 = new Object();
      StringBuilder stringBuilder4 = stringBuilder2.append(object0);
      StringBuilder stringBuilder5 = stringBuilder1.append((float) int0);
      StringBuilder stringBuilder6 = stringBuilder4.insert(int0, (double) int0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode1.outerHtmlHead(stringBuilder6, int0, document_OutputSettings0);
      Node node0 = textNode0.removeAttr(string1);
      String string2 = textNode1.text();
      String string3 = textNode0.getWholeText();
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      String string1 = "Wh^\"9D";
      TextNode textNode0 = new TextNode(string0, string1);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Entities", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = "Fs>diV?";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int1 = (-1428);
      // Undeclared exception!
      try { 
        textNode0.splitText(int1);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder();
      int int1 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int1);
      String string0 = "#text";
      StringBuilder stringBuilder2 = stringBuilder0.replace(int1, int1, string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "\\B[k}Tgsj{";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = (-1704);
      textNode0.setSiblingIndex(int0);
      String string1 = textNode0.toString();
      Attributes attributes0 = textNode0.attributes();
      String string2 = textNode0.getWholeText();
      String string3 = "+E";
      String string4 = TextNode.stripLeadingWhitespace(string3);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "org.jsoup.nodes.TextNode";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "";
      String string2 = textNode0.attr(string0);
      TextNode textNode1 = textNode0.text(string1);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      String string3 = null;
      Node node1 = textNode1.doClone(textNode0);
      int int0 = 224;
      textNode0.setSiblingIndex(int0);
      // Undeclared exception!
      try { 
        textNode1.text(string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "+$NewW_f";
      Node node0 = textNode0.attr(string1, string0);
      String string2 = "*W:CF";
      textNode0.text = string2;
      int int0 = 4;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "+$NewW_f";
      TextNode textNode1 = (TextNode)textNode0.attr(string1, string0);
      String string2 = "5:@";
      TextNode textNode2 = textNode1.text(string2);
      String string3 = "*W:CF";
      textNode0.text = string3;
      String string4 = "";
      StringBuilder stringBuilder0 = new StringBuilder(string4);
      int int0 = 32;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      StringBuilder stringBuilder2 = new StringBuilder();
      char char0 = 'I';
      StringBuilder stringBuilder3 = stringBuilder2.append(char0);
      int int1 = (-1651);
      // Undeclared exception!
      try { 
        stringBuilder3.appendCodePoint(int1);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "gS^?JHYdK";
      String string1 = "sJ_";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "org.jsoup.select.Evaluator$IndexEquals";
      String string3 = textNode0.absUrl(string2);
      String string4 = TextNode.normaliseWhitespace(string0);
      TextNode textNode1 = TextNode.createFromEncoded(string4, string3);
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string0);
      String string5 = TextNode.stripLeadingWhitespace(string0);
      String string6 = textNode1.toString();
      textNode2.parentNode = (Node) textNode1;
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "gS^?JHYdK";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "org.jsoup.select.Evaluator$IndexEquals";
      String string2 = textNode0.absUrl(string1);
      TextNode textNode1 = (TextNode)textNode0.removeAttr(string0);
      String string3 = TextNode.stripLeadingWhitespace(string0);
      String string4 = textNode0.toString();
      textNode1.parentNode = (Node) textNode0;
      int int0 = 0;
      TextNode textNode2 = TextNode.createFromEncoded(string1, string0);
      String string5 = "A'q8~";
      String string6 = TextNode.normaliseWhitespace(string5);
      String string7 = textNode1.text();
      // Undeclared exception!
      textNode0.toString();
  }
}
