/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:38:20 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "'SLbI!^{V'bi=E<EDeP";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = null;
      int int0 = (-40);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      String string1 = "u";
      TextNode textNode0 = new TextNode(string0, string1);
      TextNode textNode1 = textNode0.text(string1);
      String string2 = textNode1.toString();
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      int int0 = 0;
      char char0 = 'R';
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      boolean boolean1 = textNode0.isBlank();
      boolean boolean2 = textNode0.hasAttr(string1);
      String string3 = ".yT@p^aw`=";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      textNode1.setParentNode(textNode0);
      String string5 = textNode1.absUrl(string1);
      String string6 = "IT_di-n\\^g&";
      String string7 = textNode0.attr(string6);
      Attributes attributes0 = textNode1.attributes();
      String string8 = textNode0.text();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "i+,#@)/. nmPY";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      int int0 = (-1);
      Tag tag0 = Tag.valueOf(string0);
      String string1 = ")m6UK!>!*.BS(^Eq-z";
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, string1, attributes0);
      Element element1 = element0.html(string0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int0, (Object) element1);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "n`Q";
      int int0 = (-13);
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "&9h ";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 46;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "/S`c{+%-//>bB%o";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Node node0 = textNode0.removeAttr(string0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "BbKq~R}@Zg";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string0);
      int int0 = 15;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int1 = 1;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int1);
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      textNode0.indent(stringBuilder1, int0, document_OutputSettings2);
      int int2 = 0;
      TextNode textNode1 = textNode0.splitText(int2);
      String string1 = "";
      String string2 = "";
      TextNode textNode2 = textNode1.text(string2);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder1);
      TextNode textNode3 = textNode1.text(string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "ZS'}h>4@MIc]MPTX^";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Attributes attributes0 = null;
      textNode0.attributes = attributes0;
      TextNode textNode1 = textNode0.text(string1);
      String string2 = TextNode.normaliseWhitespace(string1);
      // Undeclared exception!
      try { 
        textNode1.attr(string1, string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "del";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      boolean boolean0 = textNode0.isBlank();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "img";
      TextNode textNode0 = new TextNode(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      TextNode textNode2 = textNode1.text(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "<H)|\\";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 2752;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "h6";
      String string1 = TextNode.normaliseWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "C{_B:C";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      TextNode textNode2 = textNode1.text(string0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "_WX:47jl*ei`o";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.getWholeText();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      int int0 = (-2553);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = textNode0.attributes();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "v^VY|03{\"uOEeum";
      String string2 = textNode0.attr(string1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      String string1 = "Y'+";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.nodeName();
      boolean boolean0 = textNode0.hasAttr(string2);
      String string3 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "`P8q";
      String string1 = TextNode.stripLeadingWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "|Ae:Xf6c*l";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "c24$-C>eA_#0ioCcN";
      String string2 = "";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      String string3 = textNode0.text();
      String string4 = "Split offset must be not be negative";
      Node node0 = textNode0.nextSibling();
      TextNode textNode2 = textNode1.text(string4);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string2);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string4);
      int int0 = 194;
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) string0, int0, int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // start 194, end 194, s.length() 10
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "/S`c{+%-//>bB%o";
      String string1 = "fh`L^|y R*&S>Hb~_";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "7Q`;@%ojNt";
      Node node0 = textNode0.removeAttr(string2);
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string3);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "M`";
      String string1 = "*";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "Y3xuxd):?";
      Node node0 = textNode0.attr(string2, string1);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "g,";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "LbVP|J'#[v@w#dSO*l";
      TextNode textNode1 = textNode0.text(string1);
      String string2 = textNode1.absUrl(string0);
      Node node0 = textNode1.doClone(textNode0);
      String string3 = textNode1.attr(string0);
      String string4 = textNode0.text();
      String string5 = "?,2)4^[:Fk\"";
      boolean boolean0 = textNode1.hasAttr(string5);
      StringBuilder stringBuilder0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int0);
      // Undeclared exception!
      try { 
        textNode1.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = textNode0.traverse(nodeVisitor0);
      String string1 = "";
      String string2 = TextNode.normaliseWhitespace(string1);
      String string3 = "noframes";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string3);
      textNode1.text = string1;
      String string4 = "";
      // Undeclared exception!
      try { 
        textNode1.absUrl(string4);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 2246;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "T#|G?{>riI2i%";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      Attributes attributes0 = null;
      textNode0.attributes = attributes0;
      TextNode textNode1 = textNode0.text(string1);
      String string2 = "o";
      String string3 = TextNode.normaliseWhitespace(string2);
      // Undeclared exception!
      try { 
        textNode1.attr(string1, string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      String string1 = "x[<7'";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.absUrl(string1);
      String string3 = "";
      TextNode textNode1 = textNode0.text(string3);
      String string4 = "text";
      String string5 = textNode0.absUrl(string4);
      Attributes attributes0 = textNode0.attributes();
      boolean boolean0 = textNode1.hasAttr(string0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "4G1K_";
      String string1 = TextNode.normaliseWhitespace(string0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string1);
      StringBuilder stringBuilder0 = new StringBuilder(charBuffer0);
      int int0 = 1;
      StringBuilder stringBuilder1 = stringBuilder0.delete(int0, int0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, (CharSequence) charBuffer0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      String string2 = "X#vwaZ*%";
      String string3 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string3);
      Attributes attributes0 = textNode0.attributes();
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder2);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = null;
      TextNode textNode1 = textNode0.text(string2);
      // Undeclared exception!
      try { 
        textNode1.attr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "t";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.text();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "header";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      boolean boolean0 = textNode0.hasAttr(string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.text();
      String string3 = "";
      // Undeclared exception!
      try { 
        textNode0.attr(string3, string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder2 = stringBuilder1.append(charArray0);
      int int0 = 2685;
      StringBuilder stringBuilder3 = stringBuilder2.append(int0);
      int int1 = 0;
      float float0 = 0.0F;
      StringBuilder stringBuilder4 = stringBuilder3.insert(int1, float0);
      int int2 = 0;
      Document.OutputSettings document_OutputSettings0 = null;
      textNode0.outerHtmlTail(stringBuilder4, int2, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "7e=sBwK]xu";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      TextNode textNode1 = textNode0.splitText(int0);
      TextNode textNode2 = textNode1.text(string0);
      String string2 = textNode2.text();
      Node node0 = textNode0.clone();
      textNode1.baseUri = string0;
      int int1 = 0;
      TextNode textNode3 = textNode2.splitText(int1);
      TextNode textNode4 = textNode3.text(string0);
      String string3 = "f6/5(|y";
      TextNode textNode5 = TextNode.createFromEncoded(string3, string1);
      String string4 = "";
      boolean boolean0 = textNode1.hasAttr(string4);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string3);
      int int2 = 0;
      StringBuffer stringBuffer0 = new StringBuffer(int2);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(int2, (long) int2);
      String string5 = "\"lSTRd\"";
      StringBuilder stringBuilder4 = stringBuilder3.insert(int0, string5);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      Attributes attributes0 = textNode3.attributes();
      String string6 = null;
      // Undeclared exception!
      try { 
        textNode4.removeAttr(string6);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "0hymfNMZ,";
      String string1 = TextNode.normaliseWhitespace(string0);
      TextNode textNode0 = new TextNode(string0, string0);
      String string2 = textNode0.toString();
      List<Node> list0 = textNode0.siblingNodes();
      String string3 = "";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      String string5 = TextNode.normaliseWhitespace(string0);
      boolean boolean0 = textNode0.hasAttr(string4);
      String string6 = textNode0.nodeName();
      String string7 = textNode0.getWholeText();
      String string8 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string8);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "G%c}&3X*:%#AL0i";
      String string1 = TextNode.normaliseWhitespace(string0);
      TextNode textNode0 = new TextNode(string1, string1);
      String string2 = textNode0.toString();
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "2Ce%g$A;TY1RlPh";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = (-3817);
      textNode0.siblingIndex = int0;
      String string2 = textNode0.toString();
      boolean boolean0 = textNode0.hasAttr(string2);
      String string3 = textNode0.nodeName();
      // Undeclared exception!
      try { 
        textNode0.remove();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      textNode0.text = string1;
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = TextNode.normaliseWhitespace(string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string1);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string2 = "";
      TextNode textNode0 = new TextNode(string2, string1);
      int int0 = 811;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings2);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "A";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "4G1K_";
      String string1 = TextNode.normaliseWhitespace(string0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string1);
      StringBuilder stringBuilder0 = new StringBuilder(string1);
      int int0 = 1;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, (CharSequence) charBuffer0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      String string2 = "X#vwaZ*%";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string1);
      Attributes attributes0 = textNode0.attributes();
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder2);
      String string3 = "";
      TextNode textNode1 = textNode0.text(string3);
      // Undeclared exception!
      try { 
        textNode1.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "A}\\J";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Node node0 = textNode0.previousSibling();
      TextNode textNode1 = (TextNode)textNode0.attr(string0, string0);
      String string1 = textNode0.outerHtml();
      String string2 = "%";
      String string3 = "lYa,aXMQW+un";
      String string4 = " PUBLIC \"";
      TextNode textNode2 = textNode0.text(string4);
      TextNode textNode3 = textNode2.text(string0);
      TextNode textNode4 = textNode3.text(string1);
      String string5 = null;
      // Undeclared exception!
      try { 
        textNode1.text(string5);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      String string1 = "u";
      TextNode textNode0 = new TextNode(string0, string1);
      Node node0 = textNode0.previousSibling();
      TextNode textNode1 = textNode0.text(string1);
      String string2 = textNode1.toString();
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) string1);
      int int0 = 0;
      char char0 = 'R';
      StringBuilder stringBuilder2 = stringBuilder1.insert(int0, char0);
      boolean boolean0 = true;
      StringBuilder stringBuilder3 = stringBuilder0.insert(int0, boolean0);
      StringBuilder stringBuilder4 = stringBuilder2.append(string0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder4);
      String string3 = "op0b\"+\"6`ZMdK0_";
      String string4 = textNode0.absUrl(string3);
      boolean boolean2 = textNode0.isBlank();
      String string5 = "org.jsoup.select.Evaluator$ContainsText";
      boolean boolean3 = textNode0.hasAttr(string5);
      String string6 = ".yT@p^aw`=";
      String string7 = TextNode.stripLeadingWhitespace(string6);
      TextNode textNode2 = (TextNode)textNode0.removeAttr(string3);
      textNode2.setParentNode(textNode0);
      String string8 = textNode1.absUrl(string5);
      boolean boolean4 = textNode1.isBlank();
      String string9 = "IT_di-n\\@O&";
      String string10 = textNode0.attr(string9);
      Attributes attributes0 = textNode1.attributes();
      String string11 = textNode0.text();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "\n * ";
      TextNode textNode0 = new TextNode(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) string0);
      int int0 = 49;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      boolean boolean1 = false;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(boolean1);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(int0);
      textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings3);
      char[] charArray0 = new char[6];
      char char0 = '#';
      charArray0[0] = char0;
      char char1 = 'T';
      charArray0[1] = char1;
      char char2 = 'a';
      charArray0[2] = char2;
      char char3 = '2';
      charArray0[3] = char3;
      char char4 = 'w';
      charArray0[4] = char4;
      char char5 = 'T';
      charArray0[5] = char5;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(int0, charArray0);
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 49
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "/S`c{+%-//>bB%o";
      String string1 = "fh`L^|y R*&S>Hb~_";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "7Q`;@%ojNt";
      Node node0 = textNode0.removeAttr(string2);
      String string3 = null;
      // Undeclared exception!
      try { 
        node0.hasAttr(string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "/S`c{+%-//>bB%o";
      String string1 = "fhL^|y R*)S~Hb~_";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "7Q`;@%ojNt";
      int int0 = 952;
      textNode0.siblingIndex = int0;
      Node node0 = textNode0.removeAttr(string2);
      String string3 = node0.toString();
      String string4 = textNode0.absUrl(string1);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "";
      String string1 = "u";
      TextNode textNode0 = new TextNode(string0, string1);
      TextNode textNode1 = textNode0.text(string1);
      String string2 = textNode1.toString();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      textNode0.childNodes = (List<Node>) linkedList0;
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      int int0 = 0;
      char char0 = 'R';
      StringBuilder stringBuilder1 = stringBuilder0.append(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
      boolean boolean1 = textNode0.isBlank();
      boolean boolean2 = textNode0.hasAttr(string1);
      String string3 = ".yT@p^aw`=";
      String string4 = TextNode.stripLeadingWhitespace(string3);
      textNode1.setParentNode(textNode0);
      String string5 = textNode1.absUrl(string1);
      String string6 = "IT_di-n\\^g&";
      String string7 = textNode0.attr(string6);
      Attributes attributes0 = textNode1.attributes();
      String string8 = textNode0.text();
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
