/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:25:58 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextNode_ESTest extends TextNode_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "G~&Oead";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 2054;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "T=is is a searchable nndex. Enter search keywords: ";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 23;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = "ScriptDataEscapedEndTagName";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "(o$7^pBkX[d18P";
      textNode0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "~2N|tgKO";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      Node node0 = textNode0.removeAttr(string0);
      String string1 = "D47sO&TiLE*(e)X";
      TextNode textNode1 = textNode0.text(string1);
      String string2 = TextNode.normaliseWhitespace(string0);
      String string3 = textNode0.text();
      String string4 = TextNode.normaliseWhitespace(string0);
      boolean boolean0 = textNode1.isBlank();
      String string5 = textNode1.absUrl(string1);
      String string6 = TextNode.stripLeadingWhitespace(string2);
      Node node1 = textNode1.attr(string3, string5);
      String string7 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "=";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = (-988);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-2348);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "<':P4=:0w;>p";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 1;
      TextNode textNode1 = textNode0.splitText(int0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "/]P8mjB;[I@Qy";
      TextNode textNode0 = new TextNode(string0, string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "!_x>";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 876;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "^%)9!8L8D?k";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.attr(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "text";
      TextNode textNode0 = new TextNode(string0, string1);
      TextNode textNode1 = textNode0.text(string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "c4j4B0L\"";
      String string1 = "g+]kbsqcgrkm_";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = textNode0.text();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      boolean boolean0 = textNode0.isBlank();
      String string1 = textNode0.nodeName();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "\"cR>h?fnW_>P0Uyb-";
      String string1 = "figcaption";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 14;
      TextNode textNode1 = textNode0.splitText(int0);
      boolean boolean0 = textNode1.isBlank();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = ":IGhucGQ*";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      TextNode textNode1 = textNode0.text(string0);
      String string1 = "summary";
      String string2 = textNode1.absUrl(string1);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "text";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      int int0 = 930;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      String string1 = "srDyYW@@iJ(<";
      TextNode textNode0 = new TextNode(string0, string1);
      Attributes attributes0 = textNode0.attributes;
      List<Node> list0 = textNode0.childNodes();
      String string2 = "";
      // Undeclared exception!
      try { 
        textNode0.absUrl(string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "yYK%rY\"%M\"$>'QEN\\";
      String string1 = TextNode.stripLeadingWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "u";
      String string1 = "^FDEJ-";
      TextNode textNode0 = new TextNode(string0, string1);
      textNode0.setBaseUri(string0);
      String string2 = textNode0.attr(string1);
      String string3 = textNode0.toString();
      String string4 = textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "0J~5C[";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "`oY}I:";
      Attributes attributes0 = textNode0.attributes();
      textNode0.attributes = attributes0;
      TextNode textNode1 = textNode0.text(string1);
      String string2 = textNode1.absUrl(string0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "P[#uVg`2H";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = (-204);
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must be not be negative
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "^\\s+";
      String string1 = "1,~L-ewn%9uF";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = textNode0.getWholeText();
      boolean boolean0 = textNode0.isBlank();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$Class";
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = ";";
      TextNode textNode1 = textNode0.text(string1);
      Node node0 = textNode1.removeAttr(string0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "eA';MJ:KX0Gj";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder1);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "+z.tna?CeJ(k-$*18DF";
      // Undeclared exception!
      try { 
        textNode0.hasAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(int0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.attr(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = new TextNode(string0, string0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(IllegalArgumentException e) {
         //
         // Split offset must not be greater than current text length
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "object";
      String string1 = "";
      TextNode textNode0 = new TextNode(string1, string0);
      String string2 = "Ve+6";
      TextNode textNode1 = TextNode.createFromEncoded(string1, string2);
      String string3 = "9X7<0'5NA|MpEoAA";
      String string4 = TextNode.normaliseWhitespace(string0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "Z&ua";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        textNode0.removeAttr(string1);
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "QkUNbOg1fNz+";
      String string1 = "9&C}Pj8";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      String string2 = "Ug7nukoa#0b;_\\1";
      TextNode textNode1 = textNode0.text(string2);
      String string3 = null;
      // Undeclared exception!
      try { 
        textNode1.attr(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "LJMp";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "__*X|";
      TextNode textNode0 = TextNode.createFromEncoded(string2, string0);
      String string3 = "org.jsoup.nodes.TextNode";
      textNode0.baseUri = string3;
      Node node0 = textNode0.attr(string0, string0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = ">HEXe!A e<>Vex1rsY";
      String string1 = "org.jsoup.select.Evaluator$Id";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "z\"";
      boolean boolean0 = textNode0.hasAttr(string2);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-2348);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      textNode0.outerHtmlTail(stringBuilder0, int0, document_OutputSettings0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = null;
      TextNode textNode0 = new TextNode(string0, string0);
      // Undeclared exception!
      try { 
        textNode0.attr(string0);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "~2N|tgKO";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      String string1 = textNode0.getWholeText();
      int int0 = (-1557);
      textNode0.setSiblingIndex(int0);
      boolean boolean0 = textNode0.isBlank();
      String string2 = textNode0.toString();
      String string3 = "m7+Ok|";
      String string4 = textNode0.text();
      Node node0 = textNode0.removeAttr(string3);
      String string5 = TextNode.normaliseWhitespace(string2);
      String string6 = "D47sO&TiLE*(e)X";
      TextNode textNode1 = textNode0.text(string6);
      // Undeclared exception!
      try { 
        textNode1.unwrap();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        TextNode.normaliseWhitespace(string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 0;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "code";
      String string1 = "!UYx-";
      TextNode textNode0 = new TextNode(string0, string1);
      StringBuilder stringBuilder0 = null;
      int int0 = 2449;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      int int1 = 2;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(int1);
      boolean boolean0 = true;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings1.prettyPrint(boolean0);
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings3.prettyPrint(boolean0);
      // Undeclared exception!
      try { 
        textNode0.outerHtmlHead(stringBuilder0, int0, document_OutputSettings6);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "AlnlTjr(Y,'";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = "";
      TextNode textNode0 = new TextNode(string2, string0);
      Node node0 = textNode0.attr(string1, string2);
      List<Node> list0 = textNode0.childNodes();
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        TextNode.lastCharIsWhitespace(stringBuilder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "<";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      String string2 = null;
      TextNode textNode0 = new TextNode(string2, string0);
      // Undeclared exception!
      try { 
        textNode0.attributes();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "X1'X}npf>dh,";
      String string1 = null;
      TextNode textNode0 = TextNode.createFromEncoded(string0, string1);
      textNode0.text = string1;
      // Undeclared exception!
      try { 
        textNode0.text();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.StringUtil", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = null;
      // Undeclared exception!
      try { 
        TextNode.stripLeadingWhitespace(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.TextNode", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append(object0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      String string0 = "";
      StringBuilder stringBuilder3 = stringBuilder2.append(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder3);
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      int int0 = 23;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(boolean0);
      textNode0.outerHtmlHead(stringBuilder2, int0, document_OutputSettings4);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = null;
      String string1 = "k-Pv:`v>8 M/6~";
      TextNode textNode0 = new TextNode(string0, string1);
      int int0 = 3348;
      // Undeclared exception!
      try { 
        textNode0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "Split offset must not be greater thanKcurrent text leIgth";
      String string1 = TextNode.stripLeadingWhitespace(string0);
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = "";
      Node node0 = textNode0.attr(string1, string2);
      String string3 = textNode0.absUrl(string0);
      boolean boolean0 = textNode0.hasAttr(string3);
      String string4 = TextNode.normaliseWhitespace(string1);
      Attributes attributes0 = new Attributes();
      int int0 = (-1367);
      String string5 = "gihlPsWN;1J5b8 ";
      int int1 = 0;
      textNode0.attributes = attributes0;
      List<Attribute> list0 = attributes0.asList();
      String string6 = textNode0.text();
      int int2 = 12;
      // Undeclared exception!
      try { 
        textNode0.splitText(int2);
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "mark";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      String string1 = textNode0.toString();
      Attributes attributes0 = textNode0.attributes();
      String string2 = "bU#vtp6sL:q%WP";
      StringBuilder stringBuilder0 = new StringBuilder(string2);
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.deleteCharAt(int0);
      boolean boolean0 = false;
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append(boolean0);
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) stringBuilder1, int0, int0);
      double double0 = 15.73512451;
      StringBuilder stringBuilder5 = stringBuilder4.insert(int0, double0);
      String string3 = "";
      StringBuilder stringBuilder6 = stringBuilder5.insert(int0, (Object) string3);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder5);
      String string4 = "text";
      String string5 = TextNode.stripLeadingWhitespace(string4);
      String string6 = null;
      // Undeclared exception!
      try { 
        textNode0.text(string6);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      String string0 = "9KL1498=oN";
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      int int0 = 9;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(int0);
      IntStream intStream0 = stringBuilder0.codePoints();
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      boolean boolean1 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string1 = "org.jsoup.nodes.TextNode";
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      String string2 = "org.jsoup.nodes.TextNode";
      TextNode textNode0 = new TextNode(string1, string2);
      Node node0 = textNode0.clone();
      List<Node> list0 = textNode0.siblingNodes();
      TextNode textNode1 = textNode0.text(string0);
      // Undeclared exception!
      try { 
        textNode1.unwrap();
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "This is a searchable index. Enter search keywords: ";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      int int0 = 9;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(int0);
      int int1 = 0;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(int1);
      StringBuilder stringBuilder0 = new StringBuilder(string0);
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "~2N|tgKO";
      TextNode textNode0 = new TextNode(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      String string1 = TextNode.stripLeadingWhitespace(string0);
      int int0 = 588;
      textNode0.setSiblingIndex(int0);
      boolean boolean0 = textNode0.hasAttr(string1);
      String string2 = TextNode.normaliseWhitespace(string0);
      String string3 = "m7+Ok|";
      String string4 = TextNode.normaliseWhitespace(string1);
      Node node0 = textNode0.removeAttr(string3);
      String string5 = "D47sO&TiLE*(e)X";
      TextNode textNode1 = textNode0.text(string5);
      Node node1 = textNode1.nextSibling();
      String string6 = textNode0.toString();
      String string7 = textNode0.text();
      String string8 = null;
      // Undeclared exception!
      try { 
        textNode1.attr(string8);
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "~2N|tgKO";
      TextNode textNode0 = TextNode.createFromEncoded(string0, string0);
      Attributes attributes0 = textNode0.attributes();
      String string1 = "m7+Ok|";
      Node node0 = textNode0.removeAttr(string1);
      Node node1 = node0.nextSibling();
      String string2 = "D47sO&TiLE*(e)X";
      TextNode textNode1 = textNode0.text(string2);
      textNode0.parentNode = (Node) textNode1;
      Node node2 = textNode1.nextSibling();
      // Undeclared exception!
      textNode0.toString();
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = 23;
      boolean boolean0 = TextNode.lastCharIsWhitespace(stringBuilder0);
      String string0 = "ScriptDataEscapedEndTagName";
      IntStream intStream0 = stringBuilder0.codePoints();
      TextNode textNode0 = new TextNode(string0, string0);
      String string1 = "(o$7^pBkX[d18P";
      TextNode textNode1 = new TextNode(string1, string1);
      textNode0.parentNode = (Node) textNode1;
      // Undeclared exception!
      try { 
        textNode0.splitText(int0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }
}
