/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 12:36:16 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.net.HttpURLConnection;
import java.util.List;
import java.util.Map;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 62;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string0, (InputStream) mockFileInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[7];
      String string0 = "t@ h49!LL4x_T1bM";
      stringArray0[0] = string0;
      String string1 = HttpConnection.encodeMimeName(stringArray0[0]);
      stringArray0[1] = httpConnection0.CONTENT_TYPE;
      stringArray0[2] = httpConnection0.CONTENT_ENCODING;
      stringArray0[3] = httpConnection0.CONTENT_ENCODING;
      stringArray0[4] = httpConnection0.MULTIPART_FORM_DATA;
      String string2 = "1P`7UY[&g";
      stringArray0[5] = string2;
      stringArray0[6] = httpConnection0.CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      Connection connection0 = httpConnection0.referrer(string0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string1 = "";
      HttpConnection.CONTENT_ENCODING = string1;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, httpConnection0.CONTENT_ENCODING);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      String string0 = "F.J";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string2 = "";
      String string3 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "M-N";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: M-N
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "L> MF!";
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string0);
      String string1 = httpConnection_Response0.charset();
      String string2 = "org.jsoup.helper.HttpConnection";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "org.jsoup.select.Evaluator$Attribute";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = 172;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request0.parser);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request0.cookie(string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal1.key(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1941;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
