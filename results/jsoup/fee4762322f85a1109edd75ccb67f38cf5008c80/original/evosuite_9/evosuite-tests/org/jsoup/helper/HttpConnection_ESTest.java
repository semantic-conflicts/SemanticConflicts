/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:05:20 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.headers = map0;
      httpConnection_Response0.cookies = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Dgvo~?IaEHz";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      String string1 = "Referer";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string1);
      int int0 = httpConnection_Response0.statusCode();
      String string2 = "";
      String string3 = "";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(int0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string2, string3, (InputStream) sequenceInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Dgvo~?IaEHz";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      String string1 = "Referer";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string1);
      int int0 = httpConnection_Response0.statusCode();
      String string2 = "";
      String string3 = "";
      boolean boolean0 = true;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      String string1 = "=?UDE";
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      Connection.Request connection_Request0 = null;
      String string1 = httpConnection_Response0.statusMessage();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = " <%s>";
      String string1 = "th";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) dataInputStream0);
      String string2 = "B${_@F(J6>'yBqi}^B";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string2);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: B${_@F(J6>'yBqi}^B
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "!e`Bk'/`Afk^/R^._=";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL0);
      String string1 = httpConnection_Response0.contentType();
      String string2 = httpConnection_Response0.statusMessage();
      String string3 = "YwXnio<.M^yp`K3$E";
      String string4 = "org.jsoup.helper.HttpConnection";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string3, string4);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string4);
      String string5 = httpConnection_KeyVal1.toString();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "`$'8{5_x";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)96;
      byteArray0[0] = byte0;
      byte byte1 = (byte)94;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)2;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-35);
      byteArray0[4] = byte4;
      int int0 = (-2314);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte2, int0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      String string1 = "8^^%Oxc4yjHE~r7xV";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(string1);
      InputStream inputStream0 = httpConnection_KeyVal2.inputStream();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string2 = "!=DTAqp*'V!|";
      Document document0 = Document.createShell(string2);
      Map<String, String> map0 = document0.dataset();
      httpConnection_Response0.headers = map0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "nB.DlmZK?0gTT}";
      String string1 = "5lMNO\"`Y>[PwmMlUg]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "HE|78XrcQ]P";
      String string3 = "|$~WZl";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string3, string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      String string4 = httpConnection_KeyVal2.value();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Document";
      String string1 = "BU$hs4~r`ZT";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "yk";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "dir";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = "hv ";
      String string3 = "A30}g^ThvQ%u?.b24";
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string4 = "?";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.ROOT;
      String string5 = locale0.getDisplayScript(locale1);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      List<String> list1 = hashMap0.put(string4, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "!e`Bk'/`Ak^\"/R^D._=";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      // Undeclared exception!
      try { 
        MockURI.create(string0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in path at index 2: !e`Bk'/`Ak^\"/R^D._=
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "K@E/Y/\"FdU|<P^>\\%_";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = "%22";
      String string2 = "";
      Connection.Response connection_Response1 = httpConnection_Response0.cookie(string1, string2);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "limitedQuirks";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "7A0NYP$QMa";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
      String string2 = httpConnection_KeyVal0.key();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.key(string1);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal2.inputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal2.inputStream(inputStream0);
      String string3 = httpConnection_KeyVal1.toString();
      String string4 = httpConnection_KeyVal2.value();
      // Undeclared exception!
      try { 
        HttpConnection.connect(string4);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 7A0NYP$QMa
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "Tb0XLQd_";
      String string1 = "cQ_}>VAfyS )4qOm5d";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "&j``TpU!]}Q)";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-55);
      byteArray0[1] = byte1;
      byte byte2 = (byte)38;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)4;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-1);
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-125);
      byteArray0[6] = byte6;
      byte byte7 = (byte)45;
      byteArray0[7] = byte7;
      byte byte8 = (byte)0;
      byteArray0[8] = byte8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string0, string2, (InputStream) byteArrayInputStream0);
      boolean boolean0 = httpConnection_KeyVal1.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = null;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string1 = "";
      Pattern pattern0 = Pattern.compile(string1);
      Predicate<String> predicate0 = pattern0.asPredicate();
      int int0 = (-1260);
      Integer integer0 = new Integer(int0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) integer0);
      Predicate<String> predicate2 = predicate0.or(predicate1);
      boolean boolean0 = linkedList0.removeIf(predicate2);
      List<String> list0 = hashMap0.put(string0, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string0, list0);
      String string1 = "1cX_M&8";
      LinkedList<String> linkedList2 = new LinkedList<String>();
      String string2 = "h3";
      boolean boolean0 = linkedList2.add(string2);
      Stream<String> stream0 = linkedList2.stream();
      List<String> list2 = hashMap0.put(string1, linkedList2);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.url(uRL0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Parser parser0 = Parser.htmlParser();
      Connection connection1 = connection0.parser(parser0);
      String string0 = "";
      String string1 = "cAwR}F{&w7w.E-C/";
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) pushbackInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Document document0 = Parser.parseBodyFragmentRelaxed(((HttpConnection) connection0).CONTENT_ENCODING, ((HttpConnection) connection0).CONTENT_ENCODING);
      boolean boolean0 = true;
      Connection connection1 = connection0.followRedirects(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = "cAwR}F{&w7w.E-C/";
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) pushbackInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key value pairs must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
