/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 05:07:24 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "\"";
      String string1 = "v";
      int int0 = 160;
      String string2 = ">$\"a8aa}>|m)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = "B$AKKkUp=Tb6Z";
      Connection connection1 = connection0.data(string3, string3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      stringArray0[3] = string2;
      String string4 = "caption";
      stringArray0[4] = string4;
      stringArray0[5] = ((HttpConnection) connection0).CONTENT_ENCODING;
      Connection connection2 = connection0.data(stringArray0);
      Connection connection3 = connection1.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "\r\n\r\n";
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)22;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) byteArrayInputStream0);
      String string1 = "ReIerrer must not be7null";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) byteArrayInputStream0);
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "TF%b\\o<!";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "Must supply a valid URL";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string0);
      String string3 = "|Nx`2VmA-Z";
      String string4 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string3);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.POST;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = null;
      List<String> list0 = hashMap0.put(string0, linkedList0);
      List<String> list1 = hashMap0.getOrDefault(connection_Method0, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      Map<String, String> map0 = httpConnection_Response0.headers;
      String string1 = "-^GFa?hdL~TtK2kdf";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string1, string1);
      httpConnection_Response0.headers = map0;
      httpConnection_Response0.method = connection_Method0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      int int0 = 74;
      Connection connection1 = connection0.timeout(int0);
      boolean boolean0 = true;
      Connection connection2 = connection0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "Data key value pairs must not be null";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Data key value pairs must not be null
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "j1%m:SA";
      String string1 = "org.jsoup.helper.HttpConnection$Base";
      InputStream inputStream0 = null;
      String string2 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string2, inputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "K2EGGGn9D4";
      String string1 = "fk#=,&9v";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string1);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean1);
      boolean boolean4 = FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean5 = true;
      boolean boolean6 = true;
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "truespeed";
      boolean boolean7 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      boolean boolean8 = true;
      boolean boolean9 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean5, boolean6, boolean8);
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "s1M<q#02S$[siq";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "tmJfKrNu Xo_+kZ~A";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream(inputStream0);
      InputStream inputStream1 = httpConnection_KeyVal0.inputStream();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "\r\n\r\n";
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)22;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) byteArrayInputStream0);
      String string1 = "Referrer must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) byteArrayInputStream0);
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Timeout milliseconds must be 0 (infinite) or greater";
      String string1 = "(a60fl|;";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "iframe";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "frame";
      String string1 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "_dF}[G)>";
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) bufferedInputStream0);
      String string1 = "5\"C@ ";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      String string1 = "l\"W^i.S! 5=!M]D6a";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "User agent must not be null";
      String string1 = "?SdMbo&>gSCO<kG";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, inputStream0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Response0.cookies = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "#text";
      String string1 = ":zuT07Q_$qWwj*6$s";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.toString();
      String string3 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      String string1 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string1);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "R?Hk<0*";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string0);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      URL uRL0 = MockURL.getHttpExample();
      Connection.Response connection_Response2 = httpConnection_Response0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "ZYFdE0";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      int int0 = 61;
      String string1 = "#data";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string1);
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      String string2 = httpConnection_KeyVal3.value();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Z<B:_3HZgeLg^&i";
      String string1 = "MQSx+R@)~t0%rvSI";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string1);
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      String string0 = "(1`PofAy&-";
      String string1 = "i6Ibk<` B{FPmeq2/c";
      Enumeration<ObjectInputStream> enumeration0 = null;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream(enumeration0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "_Dg302Qmc}TRMn~M@wq";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string0, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string1 = httpConnection_Response0.charset();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "5";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 839;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pushbackInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal0.value();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string2 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      Set<String> set0 = hashMap0.keySet();
      Map<String, String> map0 = httpConnection_Response0.cookies;
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.cookies = map0;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string1 = "N$t.ZK@";
      boolean boolean0 = linkedList0.add(string0);
      List<String> list0 = hashMap0.put(string1, linkedList0);
      boolean boolean1 = hashMap0.replace(string0, (List<String>) linkedList0, (List<String>) linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "\"";
      String string1 = "v";
      int int0 = 160;
      String string2 = ">$\"a8aa}>|m)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = "set-cookie";
      Connection connection1 = connection0.data(string3, string3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      stringArray0[3] = string2;
      String string4 = "caption";
      stringArray0[4] = string4;
      stringArray0[5] = ((HttpConnection) connection0).CONTENT_ENCODING;
      Connection connection2 = connection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection1 = connection0.response((Connection.Response) httpConnection_Response0);
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response1 = null;
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response2.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "\"";
      String string1 = "v";
      int int0 = 160;
      String string2 = ">$\"a8aa}>|m)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = "set-cookie";
      Connection connection1 = connection0.data(string3, string3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      Connection connection2 = connection0.url(uRL0);
      stringArray0[1] = string1;
      stringArray0[2] = string2;
      stringArray0[3] = string2;
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = ((HttpConnection) connection0).CONTENT_ENCODING;
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "\"";
      String string1 = "v";
      int int0 = 160;
      String string2 = ">$\"a8aa}>|m)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = "set-cookie";
      Connection connection1 = connection0.data(string3, string3);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string1;
      stringArray0[1] = string1;
      stringArray0[4] = string2;
      stringArray0[3] = string2;
      String string4 = "captin";
      stringArray0[4] = string4;
      stringArray0[5] = ((HttpConnection) connection0).CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      int int0 = 74;
      Connection connection1 = connection0.timeout(int0);
      boolean boolean0 = true;
      Connection connection2 = connection1.followRedirects(boolean0);
      boolean boolean1 = true;
      Connection connection3 = connection0.followRedirects(boolean1);
      Connection connection4 = connection0.referrer(((HttpConnection) connection1).CONTENT_ENCODING);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      int int0 = 74;
      Connection connection1 = connection0.timeout(int0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean0 = true;
      Connection connection2 = connection0.followRedirects(boolean0);
      Connection connection3 = connection0.request(connection_Request0);
      Connection.Response connection_Response0 = connection1.response();
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "\"";
      String string1 = "v";
      int int0 = 160;
      String string2 = ">$\"a8aa}>|m)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string3 = "set-cookie";
      Connection connection1 = connection0.data(string3, string3);
      // Undeclared exception!
      try { 
        connection1.url(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: v
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      int int0 = 74;
      Connection connection1 = connection0.timeout(int0);
      boolean boolean0 = true;
      Connection connection2 = connection0.followRedirects(boolean0);
      String string0 = "\\s+";
      String string1 = "Lky";
      Connection connection3 = connection0.data(string0, string1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = null;
      int int0 = 74;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      boolean boolean0 = true;
      Connection connection1 = connection0.followRedirects(boolean0);
      Connection connection2 = connection0.request(connection_Request0);
      // Undeclared exception!
      try { 
        connection2.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }
}
