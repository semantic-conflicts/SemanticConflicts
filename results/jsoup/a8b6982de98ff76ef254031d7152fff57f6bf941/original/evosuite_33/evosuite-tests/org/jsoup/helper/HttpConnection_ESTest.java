/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 04:40:19 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.net.URL;
import java.nio.channels.FileChannel;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "feTd}VIXMqdsIQm";
      Document document0 = Parser.parseBodyFragment(string0, string0);
      Element element0 = document0.body();
      Map<String, String> map0 = element0.dataset();
      httpConnection_Response0.cookies = map0;
      String string1 = "1VX8/OA";
      MockFile mockFile0 = new MockFile(string1);
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string1);
      URL uRL0 = mockFile0.toURL();
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "_ V%0k=CcB4mh";
      String string1 = "O6.R[E;R@";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "fv.}1nt]h\"yi m<rW6w";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string1);
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String string2 = "fmi1*\\";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(string2, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "z!0?";
      String string1 = "mmo$~?aMq$C";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) sequenceInputStream0);
      String string2 = httpConnection_KeyVal0.toString();
      InputStream inputStream0 = null;
      String string3 = ")5.JQ6+G!C-==;erX\"R";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string3);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.inputStream(inputStream0);
      String string4 = "X<=?Z];^)>w";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string2, string4, inputStream0);
      try { 
        sequenceInputStream0.reset();
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "yeZu$T&QQcBe;VN;]q#";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string1, (InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "async";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "Set-Cookie";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Set-Cookie
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PUT;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = httpConnection_Response0.contentType();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeHeader(string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.clear();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "&t";
      String string1 = "| G%'";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string1, string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string2);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      httpConnection_Response0.method = connection_Method0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string0, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "&wL\"Y0OH-&@|kz";
      String string1 = "";
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) bufferedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string2 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "tos^ndQ0@&(";
      String string1 = "|kgOYuCdmUWLW3.oZ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string2);
      String string3 = httpConnection_KeyVal0.toString();
      String string4 = "%<QXc";
      MockFile mockFile0 = new MockFile(string4);
      URL uRL0 = mockFile0.toURL();
      URL uRL1 = MockURL.URL(uRL0, string2);
      Connection connection0 = HttpConnection.connect(uRL1);
      String string5 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string5);
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URI uRI1 = MockURI.parseServerAuthority(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      String string0 = ", currentElement=";
      URL uRL1 = MockURL.URL(uRL0, string0);
      Connection connection0 = HttpConnection.connect(uRL1);
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: , currentElement=
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "bgsound";
      String string1 = "";
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)103;
      byteArray0[0] = byte0;
      byte byte1 = (byte)7;
      byteArray0[1] = byte1;
      int int0 = 1242;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte1, int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      boolean boolean0 = httpConnection_KeyVal1.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "u ~2D(% ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "a}/";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "P|W+X]e)Ab:(R";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = "CP2zzsdf dI gA8&ZqE";
      // Undeclared exception!
      try { 
        httpConnection_Response0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "pa[/czL;";
      String string1 = "Tag name must not be empty.";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
