/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 04:42:22 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies;
      Connection connection1 = connection0.cookies(map0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, ((HttpConnection) connection1).CONTENT_ENCODING);
      int int0 = 6;
      String string2 = ".";
      String string3 = httpConnection_Response1.contentType();
      Connection connection2 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string4 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string4);
      String string5 = httpConnection_KeyVal1.value();
      try { 
        connection2.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "nohref";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string1 = "\" '.}16";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string2 = "A64~O`7l*4HwG7Sh";
      String string3 = "gzip";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string2, string3);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "diUr";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string1 = "GLrVO.";
      Connection connection1 = connection0.referrer(string0);
      String string2 = "BNgvEY3/1.2L$";
      Connection connection2 = connection1.header(string1, string2);
      try { 
        MockURL.openStream(uRL0);
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      String string0 = "?\"jd/z";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ?\"jd/z
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte) (-62);
      byteArray0[0] = byte0;
      byte byte1 = (byte)83;
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "<cy[e@9$t2yt\"n;=b";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string0);
      byteArray0[1] = byte1;
      byte byte2 = (byte)107;
      byteArray0[2] = byte2;
      byte byte3 = (byte)81;
      byteArray0[3] = byte3;
      byte byte4 = (byte)41;
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean3);
      byteArray0[4] = byte4;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      boolean boolean5 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = null;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.clear();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>(hashMap0);
      String string2 = "https";
      List<String> list0 = null;
      List<String> list1 = hashMap1.replace(string2, list0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list2 = hashMap1.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap1);
      String string3 = "R7?$WPGp4";
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string1, string3);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)124;
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-107);
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-13);
      byteArray0[3] = byte3;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "cookie value must not be null";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(string0, string1);
      Element element0 = document0.body();
      Map<String, String> map0 = element0.dataset();
      httpConnection_Response0.headers = map0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) bufferedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "content";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "multipart/form-data; boundary=";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, inputStream0);
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "Bzrp$dy]7^SX";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = "charset=";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = HttpConnection.connect(uRL0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "Pattern syntax error: ";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "YQC\\<5nq";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "Jx*f WsAYS BT/";
      String string1 = ";";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) pipedInputStream0);
      try { 
        pipedInputStream0.read();
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = ">Xs7_<m";
      String string1 = "br";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "H-)FPJl8JN4ngs3-rm-";
      int int0 = (-457);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) sequenceInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      String string3 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "r %?j[|K";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "x?Pd8KZj,Ol6AHR0*";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: x?Pd8KZj,Ol6AHR0*
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "T";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: T
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "cP+9ORB~-7&M6uNdI_";
      Document document0 = Parser.parseBodyFragment(string0, string0);
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PUT;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "7DY|)Gw";
      String string1 = "%";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string1);
      String string2 = "<CY[e@9$T2Yt\"n;=B";
      Connection.Response connection_Response2 = httpConnection_Response0.header(string2, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "on";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string0);
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string0);
      String string1 = httpConnection_Response0.contentType();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = ">}]a<<~`Q*[";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      httpConnection_Response0.method = connection_Method0;
      String string0 = "vRFAZ`H&UgR4O|<";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "maxSize must be 0 (unlimited) or larger";
      byte[] byteArray0 = new byte[1];
      String string1 = "uV$`djqN%2J`.lk=O";
      String string2 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string1, string2);
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, byteArray0[0]);
      try { 
        pushbackInputStream0.reset();
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Response0.method = connection_Method0;
      String string0 = httpConnection_Response0.charset();
      String string1 = " F['5Orn#$W*<9Vp";
      String string2 = "!fhxsZ)L-";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string2);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = ":.l";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string1 = "Cookie value must not be null";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Document document0 = Parser.parseBodyFragment(string0, string1);
      Document document1 = document0.normalise();
      Set<String> set0 = document1.classNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string1, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = "noscript";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)26;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-22);
      byteArray0[1] = byte1;
      byte byte2 = (byte)35;
      byteArray0[2] = byte2;
      byte byte3 = (byte)87;
      byteArray0[3] = byte3;
      byte byte4 = (byte)75;
      byteArray0[4] = byte4;
      int int0 = (-1);
      int int1 = 34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) byteArrayInputStream0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = ":matches(%s";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "org.jsoup.helper.HttpConnection$Request";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      String string2 = httpConnection_KeyVal0.toString();
      String string3 = "UODwi`^+*sQ.W.";
      String string4 = httpConnection_KeyVal1.toString();
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string3);
      String string5 = "";
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string0, string5);
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
      String string6 = httpConnection_KeyVal2.toString();
      String string7 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string7, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PUT;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      httpConnection_Response0.method = connection_Method0;
      int int0 = httpConnection_Response0.statusCode();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      String string0 = "Kd55[\"9<%)BYV1.8`j@";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-62);
      byteArray0[0] = byte0;
      byte byte1 = (byte)83;
      EvoSuiteFile evoSuiteFile1 = null;
      String string0 = "<cy[e@9$t2yt\"n;=b";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile1, string0);
      byteArray0[1] = byte1;
      byte byte2 = (byte)107;
      byteArray0[2] = byte2;
      byte byte3 = (byte)81;
      byteArray0[3] = byte3;
      byte byte4 = (byte)41;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean3);
      byteArray0[4] = byte4;
      byte byte5 = (byte)60;
      byteArray0[5] = byte5;
      boolean boolean5 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = null;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>(hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap1.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap1);
      String string2 = "R7?$WPGp4";
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Ov)8E";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      String string1 = "m4m291a4?\";%";
      String string2 = "meta[name=charset]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string2);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string3 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string3);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string1, string2);
      String string4 = httpConnection_KeyVal3.toString();
      String string5 = "Cookie name must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.value(string5);
      String string6 = httpConnection_KeyVal3.toString();
      String string7 = "#D( .iz";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string7, string7);
      String string8 = httpConnection_KeyVal0.key();
      String string9 = "qOK{";
      Connection connection1 = connection0.cookie(string9, string7);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "9aQ P@*'q6*B@";
      String string1 = "7dy|)gw";
      Connection connection1 = connection0.data(string0, string1);
      String string2 = "ey;EXi$}xt`*";
      String string3 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection2 = connection0.response((Connection.Response) httpConnection_Response0);
      String string4 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string2, string4);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      boolean boolean0 = true;
      Connection connection1 = connection0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.connect(((HttpConnection) connection0).CONTENT_ENCODING);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Content-Encoding
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String[] stringArray0 = new String[5];
      Connection.Response connection_Response0 = connection0.response();
      stringArray0[0] = string0;
      stringArray0[1] = ((HttpConnection) connection0).CONTENT_ENCODING;
      stringArray0[2] = ((HttpConnection) connection0).CONTENT_ENCODING;
      stringArray0[3] = ((HttpConnection) connection0).CONTENT_ENCODING;
      stringArray0[4] = string0;
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "/";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "diUr";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string1 = "GLrVO.";
      Connection connection1 = connection0.referrer(string0);
      Connection connection2 = connection0.data(string1, string1);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 6;
      String string2 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string2, uRLStreamHandler0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL1);
      String string3 = httpConnection_Response0.contentType();
      Connection connection1 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string4 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string4);
      String string5 = httpConnection_KeyVal1.value();
      try { 
        connection1.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = 785;
      Connection connection1 = connection0.cookie(string0, string0);
      Connection connection2 = connection0.maxBodySize(int0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        connection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "m4m291a4?\";%";
      String string1 = "meta[name=charset]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string2 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string0, string1);
      String string3 = HttpConnection.CONTENT_ENCODING;
      String string4 = "Cookie name must not be empty";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.value(string4);
      String string5 = httpConnection_KeyVal3.toString();
      String string6 = "GD( .iz";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(string6, string6);
      String string7 = httpConnection_KeyVal0.key();
      boolean boolean0 = true;
      Connection connection1 = connection0.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      // Undeclared exception!
      try { 
        connection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: dir
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      Connection connection1 = connection0.method(connection_Method0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.url(uRL0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection connection1 = connection0.cookie(string0, string0);
      String string1 = "<8@nLAV?mt";
      // Undeclared exception!
      try { 
        connection1.postDataCharset(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // <8@nLAV?mt
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      String string0 = "diUr";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string1 = "GLrVO.";
      Connection connection1 = connection0.referrer(string0);
      String string2 = "BNgvEY3/1.2L$";
      Connection connection2 = connection1.header(string1, string2);
      try { 
        MockURL.openStream(uRL0);
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string2 = "set-cookie";
      int int0 = (-1);
      // Undeclared exception!
      try { 
        connection0.proxy(string2, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies;
      Connection connection1 = connection0.cookies(map0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      int int0 = 6;
      String string2 = ".";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string2, uRLStreamHandler0);
      Connection.Response connection_Response1 = httpConnection_Response1.url(uRL1);
      String string3 = httpConnection_Response1.contentType();
      Connection connection2 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string4 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string4);
      String string5 = httpConnection_KeyVal1.value();
      try { 
        connection2.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = 785;
      Connection connection1 = connection0.cookie(string0, string0);
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection2 = connection1.proxy(proxy0);
      Connection connection3 = connection0.maxBodySize(int0);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = 785;
      Connection connection1 = connection0.cookie(string0, string0);
      Connection connection2 = connection0.maxBodySize(int0);
      Connection connection3 = connection2.proxy(((HttpConnection) connection0).CONTENT_ENCODING, int0);
      Connection.Request connection_Request0 = connection1.request();
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = 785;
      Connection.Request connection_Request0 = null;
      Connection connection1 = connection0.request(connection_Request0);
      // Undeclared exception!
      try { 
        connection0.cookie(string0, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      int int0 = (-2897);
      Connection connection1 = connection0.cookie(string0, string0);
      String string1 = "7R3!\"KxT?2L)i1\\";
      int int1 = 785;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection2 = connection1.proxy(string1, int1);
      // Undeclared exception!
      try { 
        connection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 6;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string1, uRLStreamHandler0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL1);
      String string2 = httpConnection_Response0.contentType();
      Connection connection1 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string3 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string3);
      String string4 = httpConnection_KeyVal1.toString();
      String string5 = httpConnection_KeyVal1.value();
      Document document0 = Parser.parse(string5, string0);
      String string6 = "https";
      Connection connection2 = connection1.data(string6, string1, inputStream0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 6;
      String string2 = "";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string2, uRLStreamHandler0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL1);
      String string3 = httpConnection_Response0.contentType();
      Connection connection1 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      Connection connection2 = connection1.userAgent(string0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string4 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string4);
      String string5 = httpConnection_KeyVal1.value();
      try { 
        connection1.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      String string0 = "URL must not be null";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      String string1 = "dir";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Response connection_Response0 = connection0.execute();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 6;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string1, uRLStreamHandler0);
      Connection.Response connection_Response1 = httpConnection_Response0.url(uRL1);
      String string2 = httpConnection_Response0.contentType();
      Connection connection1 = HttpConnection.connect(uRL0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1, inputStream0);
      String string3 = "ZcuXRSgnDW}";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string3);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(((HttpConnection) connection1).CONTENT_ENCODING);
      String string4 = httpConnection_KeyVal1.value();
      String string5 = connection_Response0.body();
      try { 
        connection1.post();
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      String string0 = "diUr";
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string1 = "GLrVO.";
      Connection connection1 = connection0.referrer(string0);
      String string2 = "BNgvEY3/1.2L$";
      Connection connection2 = connection1.header(string1, string2);
      boolean boolean0 = false;
      Connection connection3 = connection2.ignoreContentType(boolean0);
      try { 
        MockURL.openStream(uRL0);
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }
}
