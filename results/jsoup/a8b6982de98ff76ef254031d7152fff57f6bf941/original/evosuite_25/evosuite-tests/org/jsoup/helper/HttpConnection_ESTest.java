/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 04:10:07 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      String string1 = "Data map must not be null";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      String string1 = "Content-Type";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "audio";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: audio
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "o )$Vzu$:?EZzy7";
      // Undeclared exception!
      try { 
        MockURI.create(string0);
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 1: o )$Vzu$:?EZzy7
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "tQ]\\N.3#~S<wvG}";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "S|}K?G'";
      int int0 = 492;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "code";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = mockFile0.mkdir();
      String string1 = "X!3c<%/ZUeL";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      File file0 = mockFile1.getCanonicalFile();
      boolean boolean1 = mockFile1.mkdirs();
      File file1 = mockFile0.getAbsoluteFile();
      String string2 = mockFile1.getAbsolutePath();
      boolean boolean2 = false;
      boolean boolean3 = mockFile1.setWritable(boolean2);
      String string3 = null;
      File file2 = MockFile.createTempFile(string1, string3);
      URL uRL0 = mockFile1.toURL();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = httpConnection_Response0.contentType();
      String string5 = "  ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string5);
      String string6 = "declaration";
      String string7 = "action";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string7);
      int int0 = 278;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-74);
      byteArray0[0] = byte0;
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Response0.method = connection_Method0;
      try { 
        pipedInputStream0.read(byteArray0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "meta[http-equiv=content-type], meta[charset]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 3725;
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "~xssk`W6";
      String string1 = hashMap0.put(string0, string0);
      String string2 = hashMap0.replace(string0, string0);
      String string3 = "<";
      String string4 = "i|%{#1DfPUVT";
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header(string4, string0);
      String string5 = "Method must not be null";
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string5, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "\\ro90j}wS/y-_r";
      String string1 = "m[7clddr|NAdH/K";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string1);
      String string2 = "b*";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      String string3 = "XEnuxnL|";
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.key(string3);
      String string4 = "}6LG#v}xP{pv%Y";
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create(string4, string4);
      String string5 = "4o{DW??8*,9#\\";
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.key(string4);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal0.value(string5);
      String string6 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "FpDTu";
      File file0 = MockFile.createTempFile(string0, string0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) mockFileInputStream0);
      String string1 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "noframes";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: noframes
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      String string1 = "=k!qKWE_<69DI";
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, inputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "; ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "(WW";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, string1, inputStream0);
      String string2 = null;
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.inputStream(inputStream0);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.value(string2);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteFile evoSuiteFile0 = null;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string0 = "x<nCh}K4[57}$oF";
      String string1 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeCookie(string2);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "9ET;Q!";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string0 = "J";
      Connection.Response connection_Response1 = httpConnection_Response0.cookie(string0, string0);
      String string1 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "ascii";
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) pushbackInputStream0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "9= ,Rb(</@A{|)S";
      String string1 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      String string1 = "org.jsoup.helper.HttpConnection$Response$2";
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "caption";
      String string1 = ">|M<=L?u?O^$*?:8GkL";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "C*vC?=OWVyVl\\#x";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      String string3 = "#;:Imq>QMv@FALR";
      String string4 = "Method must not be null";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string3, string4, (InputStream) pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal5 = httpConnection_KeyVal0.value(string1);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      String string5 = "";
      String string6 = "org.jsoup.select.Evaluator$AttributeWithValueMatching";
      int int0 = 0;
      try { 
        MockURL.URL(string5, string6, int0, string5);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "HN[6v|X";
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(string0);
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection.Response connection_Response1 = httpConnection_Response0.method(connection_Method0);
      String string1 = "<fB.?~t(:r;uW%C{U";
      String string2 = "9j{_Yw[+xCRlv4";
      Connection.Response connection_Response2 = httpConnection_Response0.cookie(string1, string2);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string3 = "^?T>8$PsI+";
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Response0.url = uRL0;
      Connection.Response connection_Response3 = httpConnection_Response0.removeHeader(string3);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream(inputStream0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Set<String> set0 = hashMap0.keySet();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string4 = "";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string4);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "!@";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream(inputStream0);
      String string1 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      String string0 = "=DN`SGW{o`|nCUB+J";
      int int0 = (-543);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) pipedInputStream0);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "HTTP rror fetching URL";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 349;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, int0);
      boolean boolean0 = false;
      Connection connection1 = connection0.ignoreContentType(boolean0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = null;
      httpConnection_Response0.cookies = map0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>(hashMap0);
      String string0 = "";
      String string1 = "N,YISf:";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string1);
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      httpConnection_Response0.cookies = (Map<String, String>) hashMap1;
      String string2 = "_3bgle,s|tz&x_p";
      Object object0 = hashMap1.clone();
      String string3 = hashMap1.put(string2, string2);
      URL uRL0 = null;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      httpConnection_Response0.url = uRL0;
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>();
      String string4 = "X6g*V|M14h')";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      List<String> list2 = hashMap2.put(string4, list1);
      HashMap<String, List<String>> hashMap3 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String string5 = ";t.(by(=-3DwrCF(";
      boolean boolean4 = linkedList1.add(string5);
      List<String> list3 = hashMap3.put(string3, linkedList1);
      hashMap2.putAll(hashMap3);
      httpConnection_Response0.processResponseHeaders(hashMap2);
  }
}
