/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 04:12:07 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.net.URL;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = ")F*F[JB";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      linkedList1.addLast(string0);
      String string1 = "autofocus";
      List<String> list1 = hashMap0.put(string1, linkedList1);
      String string2 = "";
      List<String> list2 = hashMap0.put(string2, list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = linkedList1.add(string0);
      List<String> list3 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      List<String> list4 = hashMap0.put(string0, list3);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string3 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string3);
      String string4 = httpConnection_Response0.contentType();
      String string5 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      int int0 = 47;
      PipedInputStream pipedInputStream0 = new PipedInputStream(int0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "=Y%5)4m@H'[nQI6";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: =Y%5)4m@H'[nQI6
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      httpConnection_Response0.method = connection_Method0;
      Connection.Method connection_Method1 = Connection.Method.PATCH;
      Connection.Method connection_Method2 = Connection.Method.TRACE;
      httpConnection_Response0.method = connection_Method2;
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "User agent must not be null";
      String string1 = "";
      TextNode textNode0 = new TextNode(string0, string1);
      String string2 = ":O?PpX]7(ea}2v";
      boolean boolean0 = textNode0.hasAttr(string2);
      Attributes attributes0 = textNode0.attributes();
      Map<String, String> map0 = attributes0.dataset();
      Map<String, String> map1 = attributes0.dataset();
      httpConnection_Response0.cookies = map0;
      httpConnection_Response0.url = uRL0;
      httpConnection_Response0.method = connection_Method1;
      String string3 = httpConnection_Response0.charset();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-31);
      byteArray0[1] = byte1;
      byte byte2 = (byte)100;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      int int0 = 26;
      int int1 = 712;
      int int2 = sequenceInputStream0.read(byteArray0, int0, int1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string0, (InputStream) dataInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeCookie(string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "; ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "W;ZAb";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Tag tag0 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.inputStream(inputStream0);
      Attributes attributes1 = attributes0.clone();
      String string2 = attributes1.get(string1);
      Element element0 = new Element(tag0, string1, attributes1);
      Map<String, String> map0 = element0.dataset();
      Elements elements0 = element0.children();
      httpConnection_Response0.cookies = map0;
      String string3 = httpConnection_KeyVal0.toString();
      String string4 = httpConnection_Response0.statusMessage();
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal0.inputStream(inputStream0);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string5 = httpConnection_Response0.statusMessage();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "OT3W";
      String string1 = "plaintext";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream(inputStream0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "version";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string0 = "";
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Response0.url = uRL0;
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "Q0=`y";
      Connection.Response connection_Response0 = httpConnection_Response0.removeHeader(string0);
      String string1 = "limitedQuirks";
      Connection.Response connection_Response1 = httpConnection_Response0.header(string1, string0);
      String string2 = "8#dVUIecL";
      Connection.Method connection_Method0 = Connection.Method.PUT;
      Connection.Response connection_Response2 = httpConnection_Response0.method(connection_Method0);
      Connection.Response connection_Response3 = httpConnection_Response0.removeHeader(string2);
      String string3 = null;
      MockFile mockFile0 = new MockFile(string3, string0);
      URL uRL0 = mockFile0.toURL();
      boolean boolean0 = false;
      File file0 = mockFile0.getCanonicalFile();
      boolean boolean1 = mockFile0.setWritable(boolean0);
      httpConnection_Response0.url = uRL0;
      boolean boolean2 = mockFile0.mkdirs();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = null;
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      String string1 = "N~}UmxW_MG)";
      Connection.Response connection_Response1 = httpConnection_Response0.removeHeader(string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      String string0 = "Ir</=]g*@V:Y_c|9N8";
      String string1 = "org.jsoup.nodes.XmlDeclaration";
      Connection.Response connection_Response0 = httpConnection_Response0.cookie(string0, string1);
      Connection.Response connection_Response1 = httpConnection_Response0.removeCookie(string1);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.removeHeader(string2);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "]%r2utZ0LJ";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "menuitem";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "faIu2[0\\cC`SibW|";
      String string1 = "24c|8l5Kq#[Q;y<Z2";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      int int0 = httpConnection_Response0.statusCode();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.headers = map0;
      String string0 = "I";
      String string1 = "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.";
      Connection.Response connection_Response0 = httpConnection_Response0.header(string0, string1);
      Connection.Response connection_Response1 = httpConnection_Response0.header(string0, string0);
      String string2 = null;
      String string3 = "6xMN#w*";
      URL uRL0 = MockURL.getHttpExample();
      String string4 = "";
      URL uRL1 = MockURL.URL(uRL0, string4);
      httpConnection_Response0.url = uRL1;
      // Undeclared exception!
      try { 
        httpConnection_Response0.cookie(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
