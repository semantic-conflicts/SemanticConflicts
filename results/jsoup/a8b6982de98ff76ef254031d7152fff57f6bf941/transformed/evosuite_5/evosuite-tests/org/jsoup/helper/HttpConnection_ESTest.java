/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:16:38 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.channels.FileChannel;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.regex.Pattern;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "; boundary=";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(httpConnection_Request0.parserDefined);
      Connection connection0 = httpConnection0.validateTLSCertificates(httpConnection_Request1.parserDefined);
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      Connection.Request connection_Request1 = connection_Request0.method(connection_Method0);
      boolean boolean1 = false;
      boolean boolean2 = false;
      httpConnection_Request1.parserDefined = boolean2;
      Connection.Request connection_Request2 = httpConnection_Request1.ignoreContentType(boolean1);
      Connection connection1 = httpConnection0.request(connection_Request0);
      Connection connection2 = httpConnection0.timeout(httpConnection_Request0.timeoutMilliseconds);
      Parser parser0 = httpConnection_Request1.parser.setTrackErrors(int0);
      Document document0 = Parser.parseBodyFragment(httpConnection0.MULTIPART_FORM_DATA, string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      Connection connection3 = httpConnection0.parser(parser0);
      boolean boolean3 = false;
      Connection.Request connection_Request3 = httpConnection_Request0.followRedirects(boolean3);
      String string2 = "nC";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string2);
      String[] stringArray0 = new String[1];
      stringArray0[0] = ((HttpConnection) connection2).MULTIPART_FORM_DATA;
      // Undeclared exception!
      try { 
        connection3.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      Parser parser0 = Parser.xmlParser();
      String[] stringArray0 = new String[6];
      stringArray0[4] = httpConnection0.FORM_URL_ENCODED;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1230;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      String string0 = "0M:8z_:&'k7|~tMo";
      String string1 = httpConnection_Request1.cookie(string0);
      Connection.KeyVal connection_KeyVal0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request2.data(connection_KeyVal0);
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      Connection connection1 = httpConnection0.ignoreContentType(boolean2);
      Connection connection2 = httpConnection0.ignoreHttpErrors(boolean1);
      boolean boolean3 = false;
      Connection connection3 = httpConnection0.ignoreHttpErrors(boolean3);
      String string0 = "-r+2s<h*Vg$FN";
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: -r+2s<h*Vg$FN
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.initUnSecureTSL();
      int int0 = (-1277);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.cookies(hashMap0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "*";
      HttpConnection.MULTIPART_FORM_DATA = httpConnection0.CONTENT_ENCODING;
      String string1 = "";
      Connection connection0 = httpConnection0.cookie(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(httpConnection_KeyVal0.stream);
      httpConnection_KeyVal0.stream = (InputStream) bufferedInputStream0;
      String string2 = httpConnection_KeyVal0.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(httpConnection0.FORM_URL_ENCODED);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request1.postDataCharset, httpConnection_Request0.postDataCharset, inputStream0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(httpConnection_Request0.postDataCharset, httpConnection_Request2.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset(httpConnection_Request4.postDataCharset);
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = HttpConnection.Response.setOutputContentType(httpConnection_Request0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-27);
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      byteArray0[2] = byte0;
      byte byte2 = (byte)60;
      byteArray0[3] = byte2;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = ".SiA";
      httpConnection_Request0.postDataCharset = string0;
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize((int) byteArray0[2]);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "`L5guc=?1saFp,";
      String string1 = "";
      Connection connection0 = httpConnection0.data(string0, string1);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(httpConnection_Request1.postDataCharset);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request2.followRedirects(httpConnection_Request0.validateTSLCertificates);
      String string0 = HttpConnection.Response.getRequestCookieString(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "V?BPAf36r|}I%j)]";
      String string1 = null;
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1, inputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "u&9/z|]";
      PipedInputStream pipedInputStream0 = new PipedInputStream(httpConnection_Request0.maxBodySizeBytes);
      int int0 = 782;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) bufferedInputStream0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      Connection.KeyVal connection_KeyVal0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request1.data(connection_KeyVal0);
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Pattern pattern0 = Pattern.compile(httpConnection0.MULTIPART_FORM_DATA);
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "/]}>\"7";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      int int0 = (-870);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ")WGr";
      int int0 = 955;
      Connection connection0 = httpConnection0.proxy(string0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection0.CONTENT_ENCODING);
      String string1 = "ODXDA'^8HgAXH";
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, httpConnection0.CONTENT_ENCODING, httpConnection_KeyVal1.stream);
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = httpConnection_KeyVal2.toString();
      String string3 = httpConnection_KeyVal1.value();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 47;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int1 = httpConnection_Request2.maxBodySize();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      int int0 = (-1206);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 50;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      String string0 = "";
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string0, httpConnection_Request1.timeoutMilliseconds);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(proxy0);
      int int1 = 5943;
      Connection.Request connection_Request0 = httpConnection_Request5.maxBodySize(int1);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      Connection connection0 = httpConnection0.cookies(map0);
      String string0 = "x7E\\|ym";
      // Undeclared exception!
      try { 
        httpConnection0.header(httpConnection_Response0.statusMessage, string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "P]g<G";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string1);
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection0.header(httpConnection_Response0.LOCATION, httpConnection_Response0.contentType);
      } catch(IllegalArgumentException e) {
         //
         // Header value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = httpConnection_Request2.postDataCharset();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = Parser.xmlParser();
      Connection connection1 = httpConnection0.parser(parser0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      String string0 = "D";
      String string1 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(httpConnection_Request0.postDataCharset, string1);
      Document document1 = parser0.parseInput(string0, string0);
      String string2 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string2);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string3 = httpConnection_Request1.cookie(httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(httpConnection_Request1.timeoutMilliseconds);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 1463;
      String string0 = "_";
      Connection connection0 = httpConnection0.referrer(string0);
      Connection connection1 = httpConnection0.maxBodySize(int0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request1.postDataCharset, httpConnection_Request0.postDataCharset, inputStream0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string0 = "label";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(string0, httpConnection_Request2.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[1];
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      stringArray0[0] = httpConnection0.CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection connection0 = httpConnection0.method(connection_Method0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 47;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      int int1 = 4153;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection0.FORM_URL_ENCODED, int1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request4.data();
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "b6";
      int int0 = 541;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      boolean boolean0 = httpConnection_Request2.followRedirects();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(httpConnection_Request0.postDataCharset, int0);
      String string0 = mockInetSocketAddress0.getHostName();
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.timeout(int1);
      int int2 = 38;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.postDataCharset, int2);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      httpConnection_Request4.proxy = proxy0;
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(httpConnection_Request3.proxy);
      Connection.Request connection_Request0 = httpConnection_Request5.postDataCharset(httpConnection_Request2.postDataCharset);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "jE\\|l=o<D";
      httpConnection_KeyVal0.key = string0;
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(httpConnection_KeyVal0.key);
      } catch(IllegalCharsetNameException e) {
         //
         // jE\\|l=o<D
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "?";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ?
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "span";
      String string1 = "*h`}fOwo&z`^+1W[J]";
      String string2 = HttpConnection.encodeMimeName(string1);
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // span
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Node$OuterHtmlVisitor";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: org.jsoup.nodes.Node$OuterHtmlVisitor
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.timeout();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.statusMessage();
      String string1 = "A9*&?pZ4[JC.!_}J";
      String string2 = "JaaB";
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = "Cookie";
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // Cookie
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      String string0 = "p";
      int int1 = (-1771);
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy(string0, int1);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1771
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 2904;
      boolean boolean0 = true;
      URL uRL0 = null;
      httpConnection_Request0.url = uRL0;
      httpConnection_Request0.validateTLSCertificates(boolean0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      boolean boolean1 = true;
      httpConnection_Request1.validateTLSCertificates(boolean1);
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      boolean boolean0 = true;
      httpConnection_Request0.validateTLSCertificates(boolean0);
      String string0 = "UTF-8";
      String string1 = "gou>,b2MXq";
      Document document0 = Parser.parseBodyFragmentRelaxed(string1, httpConnection_Request0.postDataCharset);
      String string2 = "";
      List<Node> list0 = Parser.parseFragment(string0, document0, string2);
      String string3 = "";
      Attributes attributes0 = document0.attributes();
      String string4 = "Cookie";
      String string5 = httpConnection_Request0.header(string4);
      String string6 = "om,gCs[Dj,X6$m*c";
      List<Node> list1 = Parser.parseFragment(string3, document0, string6);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.parser(parser0);
      String string7 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request1.removeCookie(string7);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$IndexLessThan";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Request1.cookies = map0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      Connection.Request connection_Request0 = httpConnection_Request3.maxBodySize(httpConnection_Request1.maxBodySizeBytes);
      String string1 = HttpConnection.Response.setOutputContentType(connection_Request0);
      String string2 = HttpConnection.encodeUrl(httpConnection_Request0.postDataCharset);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data(httpConnection_Request4.postDataCharset, httpConnection_KeyVal0.value, inputStream0);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.FORM_URL_ENCODED = httpConnection0.FORM_URL_ENCODED;
      String string0 = "|";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // |
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createHeaderMap(httpURLConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "#%s";
      String string1 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)78;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-72);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-114);
      byteArray0[3] = byte3;
      byte byte4 = (byte)74;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte)20;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-32);
      byteArray0[7] = byte7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      int int0 = byteArrayInputStream0.read();
      boolean boolean0 = bufferedInputStream0.markSupported();
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1, (InputStream) bufferedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(httpConnection_Request1.postDataCharset, httpConnection_Request1.timeoutMilliseconds);
      Proxy proxy0 = httpConnection_Request1.proxy();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      String string0 = "";
      String string1 = "";
      Document document0 = Parser.parse(string0, string1);
      Map<String, String> map0 = document0.dataset();
      Connection connection1 = httpConnection0.data(map0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-777);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Q\\W";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setExecutable(boolean0, boolean1);
      boolean boolean3 = true;
      boolean boolean4 = mockFile0.setWritable(boolean0, boolean3);
      URL uRL0 = mockFile0.toURL();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection.Response connection_Response0 = httpConnection0.response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 39;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string0, int1);
      int int2 = 1839;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(int2);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = "org.jsoup.nodes.Attribute";
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(httpConnection_Request1.timeoutMilliseconds);
      Parser parser0 = httpConnection_Request4.parser();
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 400;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(httpConnection_Request0.postDataCharset, int0);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(httpConnection_Request0.proxy);
      HttpConnection httpConnection0 = new HttpConnection();
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreContentType);
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "_^wmL";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.postDataCharset, httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request1.maxBodySizeBytes);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request3.data;
      Connection connection0 = httpConnection0.data(collection0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = "SaejQz=m6V@";
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int0);
      boolean boolean0 = httpConnection_Request3.ignoreHttpErrors();
      String string1 = "?#z";
      boolean boolean1 = true;
      httpConnection_Request3.validateTLSCertificates(boolean1);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, httpConnection_Request3.postDataCharset, (InputStream) bufferedInputStream0);
      Connection.Request connection_Request0 = httpConnection0.request();
      String string2 = HttpConnection.Response.setOutputContentType(connection_Request0);
      Connection connection0 = httpConnection0.data(httpConnection_Request3.data);
      String string3 = httpConnection_KeyVal0.key();
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(httpConnection_Request2.postDataCharset);
      try { 
        HttpConnection.Response.writePost(httpConnection_Request1, mockPrintStream0, httpConnection0.MULTIPART_FORM_DATA);
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.CONTENT_ENCODING = httpConnection0.CONTENT_TYPE;
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string0 = "ZAegh>~zosoWwocCl_,";
      int int0 = 2186;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string0, int0);
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      Connection.Request connection_Request0 = httpConnection_Request2.removeCookie(httpConnection_Request1.postDataCharset);
      boolean boolean1 = httpConnection_Request2.ignoreContentType();
      Connection connection1 = httpConnection0.ignoreContentType(httpConnection_Request0.parserDefined);
      boolean boolean2 = httpConnection_Request0.ignoreHttpErrors();
      Connection connection2 = httpConnection0.validateTLSCertificates(boolean1);
      Parser parser1 = httpConnection_Request2.parser();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.parser(parser1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "b@67hU";
      Connection.Method connection_Method0 = Connection.Method.PUT;
      Connection connection0 = httpConnection0.method(connection_Method0);
      int int0 = (-2300);
      // Undeclared exception!
      try { 
        httpConnection0.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2300
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 2660;
      Connection connection0 = httpConnection0.timeout(int0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "HTTP error fetching URL";
      Connection connection0 = httpConnection0.header(string0, string0);
      Parser parser0 = Parser.xmlParser();
      int int0 = (-2167);
      Parser parser1 = parser0.setTrackErrors(int0);
      int int1 = 1041;
      Parser parser2 = parser0.setTrackErrors(int1);
      Parser parser3 = parser2.setTrackErrors(int1);
      Connection connection1 = httpConnection0.parser(parser2);
      int int2 = 38;
      Connection connection2 = httpConnection0.timeout(int2);
      String string1 = "f,!QuuQef\\16O_IbRz";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(string1);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-103);
      byteArray0[1] = byte1;
      mockFileOutputStream0.write(byteArray0);
      int int3 = 0;
      mockFileOutputStream0.write(int3);
      String string2 = "org.jsoup.select.Evaluator$Attribute";
      HttpConnection.Response.writePost(httpConnection0.req, mockFileOutputStream0, string2);
      String string3 = "</";
      String string4 = "$VALUES";
      HttpConnection.MULTIPART_FORM_DATA = string4;
      byte[] byteArray1 = new byte[0];
      int int4 = 904;
      int int5 = (-637);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, int4, int5);
      byteArrayInputStream0.close();
      int int6 = byteArrayInputStream0.read();
      Connection connection3 = httpConnection0.data(string1, string3, (InputStream) byteArrayInputStream0);
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: f,!QuuQef\\16O_IbRz
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      Connection.Response connection_Response0 = httpConnection0.response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 973;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "org.jsoup.helper.HttpConnection$Response";
      boolean boolean1 = httpConnection_Request1.hasHeaderWithValue(((HttpConnection) connection0).CONTENT_TYPE, string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int1 = 1426;
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpConnection.MULTIPART_FORM_DATA = httpConnection0.FORM_URL_ENCODED;
      boolean boolean1 = hashMap0.remove((Object) httpConnection0, (Object) httpConnection0.FORM_URL_ENCODED);
      String string0 = HttpConnection.encodeUrl(httpConnection0.CONTENT_ENCODING);
      String string1 = "";
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string2 = hashMap0.computeIfPresent(string1, biFunction0);
      String string3 = "fieldset";
      String string4 = "";
      int int0 = 814;
      Connection connection1 = httpConnection0.timeout(int0);
      String string5 = hashMap0.put(string3, string4);
      String string6 = hashMap0.put(httpConnection0.MULTIPART_FORM_DATA, httpConnection0.FORM_URL_ENCODED);
      Connection connection2 = httpConnection0.data((Map<String, String>) hashMap0);
      String string7 = null;
      int int1 = 0;
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      Connection connection3 = httpConnection0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.proxy(string7, int1);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(httpConnection_Request1.postDataCharset);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Request0.method = connection_Method0;
      int int0 = httpConnection_Request1.maxBodySize();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(httpConnection_Request1.proxy);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      String string0 = "GV7";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent(string0);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.cookies;
      Connection connection1 = httpConnection0.cookies(map0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string0);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      String string0 = "V+DeXy";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string2 = "bz.vi1lArHLFK";
      int int0 = 6;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string2, httpConnection0.CONTENT_TYPE, int0, httpConnection0.CONTENT_TYPE, uRLStreamHandler0);
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = "`0\"}Ok*}jViy`U+3/";
      int int0 = 2382;
      int int1 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.timeout(int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.proxy(string0, int0);
      Connection.Request connection_Request1 = httpConnection_Request4.maxBodySize(httpConnection_Request0.timeoutMilliseconds);
      String string1 = HttpConnection.Response.setOutputContentType(connection_Request1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(httpConnection_KeyVal0.stream);
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.inputStream((InputStream) pushbackInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data input stream must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      String string0 = "UnQ]*_]yZRJ;Q-j0e";
      String string1 = "[G#Pz/q";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "bxF)k0";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.inputStream(httpConnection_KeyVal0.stream);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = httpConnection_Request1.timeout();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection1 = httpConnection0.response(connection_Response0);
      Connection.Request connection_Request0 = null;
      Connection connection2 = httpConnection0.request(connection_Request0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection0.proxy(httpConnection_Request0.postDataCharset, httpConnection_Request0.timeoutMilliseconds);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "f^t{CGRSbF;seRJJW[";
      int int0 = 61;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(httpConnection_Request1.followRedirects);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-707);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "9o$(V!.t%$Hp";
      HttpConnection.MULTIPART_FORM_DATA = string0;
      Connection.Response connection_Response0 = null;
      Connection connection0 = httpConnection0.response(connection_Response0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = "&Jt&r1 Zt:/b";
      URL uRL0 = httpConnection_Response0.url();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL(uRL0, httpConnection0.MULTIPART_FORM_DATA, uRLStreamHandler0);
      } catch(MalformedURLException e) {
         //
         // no protocol: 9o$(V!.t%$Hp
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      String string0 = "GV7";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "kg5zGb4W5:/]";
      Connection connection0 = httpConnection0.userAgent(string1);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Map<String, String> map0 = httpConnection_Response1.cookies;
      Connection connection1 = httpConnection0.cookies(map0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      int int0 = 16;
      int int1 = (-169);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int1);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.FORM_URL_ENCODED = httpConnection0.CONTENT_ENCODING;
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(HttpConnection.FORM_URL_ENCODED, HttpConnection.FORM_URL_ENCODED, int0, httpConnection0.FORM_URL_ENCODED, uRLStreamHandler0);
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      String string0 = "sortable";
      String string1 = "_=if9`4hs]1L";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.initUnSecureTSL();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string2);
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string0);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      int int0 = 66;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection0.CONTENT_TYPE, int0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      int int1 = 814;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(httpConnection_Request3.maxBodySizeBytes);
      httpConnection_Request1.data = httpConnection_Request3.data;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(int1);
      Connection connection1 = httpConnection0.request((Connection.Request) httpConnection_Request4);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      int int2 = httpConnection_Request2.maxBodySize();
      String string1 = "b ~3iicV*";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: b ~3iicV*
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "<OHFkAHQ";
      Connection connection0 = httpConnection0.cookie(string0, string0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection1 = httpConnection0.request(((HttpConnection.Response) connection_Response0).req);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      httpConnection_Request0.data = httpConnection_Request1.data;
      int int0 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      int int1 = 37;
      String string1 = "<D";
      Document document0 = Parser.parseBodyFragmentRelaxed(string1, string0);
      boolean boolean0 = false;
      httpConnection_Request2.ignoreContentType = boolean0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.CONTENT_TYPE, httpConnection0.CONTENT_TYPE);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Parser parser1 = parser0.setTrackErrors(int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.timeout(httpConnection_Request1.maxBodySizeBytes);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        httpConnection0.ignoreContentType(boolean1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 0;
      Parser parser1 = parser0.setTrackErrors(httpConnection_Request0.timeoutMilliseconds);
      String string0 = HttpConnection.Response.getRequestCookieString(httpConnection_Request0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(httpConnection_Request1.ignoreHttpErrors).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string1 = httpConnection_Response1.statusMessage();
      String string2 = "";
      Connection.Request connection_Request1 = httpConnection_Request0.followRedirects(httpConnection_Response1.executed);
      String string3 = "N(Y%w[";
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection.Request connection_Request2 = httpConnection_Request0.maxBodySize(httpConnection_Response0.statusCode);
      httpConnection0.req = connection_Request2;
      Connection connection0 = httpConnection0.method(connection_Method0);
      int int1 = httpConnection_Response1.statusCode();
      String string4 = HttpConnection.encodeMimeName(httpConnection0.CONTENT_TYPE);
      boolean boolean0 = true;
      httpConnection_Request0.validateTLSCertificates(boolean0);
      Connection connection1 = httpConnection0.validateTLSCertificates(httpConnection_Request0.validateTSLCertificates);
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.contentType();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string2 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy(string2, httpConnection_Response0.numRedirects);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getFileExample();
      String string0 = "tX|$GfO,GCo";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "org.jsoup.select.Elements";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.url = uRL0;
      boolean boolean2 = httpConnection_Request0.validateTLSCertificates();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      SocketAddress socketAddress0 = null;
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, socketAddress0);
      } catch(IllegalArgumentException e) {
         //
         // type HTTP is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request1.postDataCharset, httpConnection_Request0.postDataCharset, inputStream0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_KeyVal0.value, httpConnection_Request0.timeoutMilliseconds);
      String string0 = "lel";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(string0, httpConnection_Request2.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = Document.createShell(httpConnection_Request1.postDataCharset);
      Connection connection0 = httpConnection0.postDataCharset(httpConnection_Request4.postDataCharset);
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request3);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection1 = httpConnection0.response(connection_Response0);
      Connection.Request connection_Request0 = null;
      Connection connection2 = httpConnection0.request(connection_Request0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        connection1.data(((HttpConnection) connection1).MULTIPART_FORM_DATA, ((HttpConnection) connection0).CONTENT_ENCODING);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      String string0 = "; boundary=";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(httpConnection_Request0.parserDefined);
      String string2 = httpConnection_Request1.getHeaderCaseInsensitive(httpConnection0.FORM_URL_ENCODED);
      Connection connection0 = httpConnection0.validateTLSCertificates(httpConnection_Request1.parserDefined);
      boolean boolean1 = true;
      boolean boolean2 = false;
      httpConnection_Request1.parserDefined = boolean2;
      Connection.Request connection_Request1 = httpConnection_Request1.ignoreContentType(boolean1);
      Connection connection1 = httpConnection0.request(connection_Request0);
      Connection connection2 = httpConnection0.timeout(httpConnection_Request0.timeoutMilliseconds);
      Parser parser0 = httpConnection_Request1.parser.setTrackErrors(int0);
      Document document0 = Parser.parseBodyFragment(httpConnection0.MULTIPART_FORM_DATA, string0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      HttpConnection httpConnection1 = new HttpConnection();
      boolean boolean3 = false;
      Connection.Request connection_Request2 = httpConnection_Request0.followRedirects(boolean3);
      String string3 = "nC";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string3);
      String string4 = "Oe=(]$%[;^x";
      boolean boolean4 = connection_Request2.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection_Request0.method = connection_Method0;
      URL uRL0 = MockURL.getHttpExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test93()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      int int0 = 0;
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      httpConnection_Request0.headers = map0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test94()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)22;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-122);
      byteArray0[1] = byte1;
      byte byte2 = (byte)97;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-113);
      byteArray0[3] = byte3;
      byte byte4 = (byte)125;
      byteArray0[4] = byte4;
      byte byte5 = (byte)67;
      byteArray0[5] = byte5;
      byte byte6 = (byte)38;
      byteArray0[6] = byte6;
      byte byte7 = (byte)103;
      byteArray0[7] = byte7;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
