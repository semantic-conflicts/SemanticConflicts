/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:31:33 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      String string0 = "HEAD";
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string1 = "u.s:H?Hflk[<R7";
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.header(httpConnection_Request1.postDataCharset, string1);
      int int0 = (-1317);
      httpConnection_Request2.maxBodySizeBytes = int0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      boolean boolean1 = true;
      httpConnection_Request0.parserDefined = boolean1;
      String string2 = "";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.proxy(httpConnection_Request3.proxy);
      HttpConnection.Request httpConnection_Request5 = (HttpConnection.Request)httpConnection_Request1.ignoreContentType(httpConnection_Request0.validateTSLCertificates);
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request3.proxy(string2, httpConnection_Request0.timeoutMilliseconds);
      boolean boolean2 = false;
      HttpConnection.Request httpConnection_Request7 = (HttpConnection.Request)httpConnection_Request6.ignoreHttpErrors(boolean2);
      int int1 = 73;
      HttpConnection.Request httpConnection_Request8 = (HttpConnection.Request)httpConnection_Request6.maxBodySize(int1);
      boolean boolean3 = true;
      httpConnection_Request0.validateTLSCertificates(boolean3);
      int int2 = httpConnection_Request1.maxBodySize();
      String string3 = "gWQD";
      // Undeclared exception!
      try { 
        httpConnection_Request2.postDataCharset(string3);
      } catch(IllegalCharsetNameException e) {
         //
         // gWQD
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      HttpConnection.FORM_URL_ENCODED = httpConnection0.CONTENT_TYPE;
      String string1 = "u> Po|:&w*x~'G";
      HttpConnection.CONTENT_TYPE = string1;
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      HttpConnection.MULTIPART_FORM_DATA = string0;
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection1 = httpConnection0.method(connection_Method0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 56;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      int int1 = (-2863);
      // Undeclared exception!
      try { 
        httpConnection_Request1.timeout(int1);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer(httpConnection_Request0.postDataCharset);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection httpConnection1 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      String string1 = httpConnection_Response0.charset();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      String string2 = "gQ33lh.'#nX8RZb}1";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string2, int0);
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      String string0 = ".$=ZAc+%fkTQ%;5r\".b";
      boolean boolean0 = true;
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, ((HttpConnection) connection0).FORM_URL_ENCODED);
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(httpConnection0.req);
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      String string1 = httpConnection_Response1.contentType();
      LinkedHashMap<String, List<String>> linkedHashMap0 = HttpConnection.Response.createHeaderMap(httpURLConnection0);
      Document document0 = httpConnection0.get();
      LinkedHashMap<String, List<String>> linkedHashMap1 = HttpConnection.Response.createHeaderMap(httpURLConnection0);
      int int1 = (-2069);
      HttpConnection.Response httpConnection_Response2 = HttpConnection.Response.execute(httpConnection0.req);
      MockPrintStream mockPrintStream0 = new MockPrintStream(httpConnection0.MULTIPART_FORM_DATA);
      HttpConnection.Response.writePost(connection_Request0, mockPrintStream0, httpConnection_Response2.charset);
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "svg";
      String string1 = "Gz_|(v+]\"& jC";
      InputStream inputStream0 = null;
      Connection connection0 = httpConnection0.data(string0, string1, inputStream0);
      try { 
        MockURL.URL(string0);
      } catch(MalformedURLException e) {
         //
         // no protocol: svg
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      String string1 = HttpConnection.Response.setOutputContentType(httpConnection_Request0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header(httpConnection_Request2.postDataCharset, httpConnection_Request1.postDataCharset);
      Connection connection1 = httpConnection0.referrer(httpConnection_Request1.postDataCharset);
      boolean boolean0 = httpConnection_Request0.followRedirects();
      String string2 = "data input stream must not be null";
      File file0 = MockFile.createTempFile(string2, httpConnection0.CONTENT_ENCODING);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      File file1 = file0.getAbsoluteFile();
      char char0 = 'L';
      PrintStream printStream0 = mockPrintStream0.append(char0);
      HttpConnection.Response.writePost(httpConnection_Request0, printStream0, ((HttpConnection) connection1).MULTIPART_FORM_DATA);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = HttpConnection.encodeUrl(httpConnection0.CONTENT_ENCODING);
      URI uRI0 = MockURL.toURI(uRL0);
      String string1 = "maxSize must be 0 (unlimited) or larger";
      URL uRL1 = MockURI.toURL(uRI0);
      Connection connection0 = HttpConnection.connect(uRL1);
      String string2 = "Data key value pairs must not be null";
      Connection connection1 = httpConnection0.userAgent(string2);
      int int0 = 1048576;
      Connection connection2 = httpConnection0.timeout(int0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string3 = "#x\\mSi:\"";
      Connection.Request connection_Request0 = httpConnection_Request0.cookie(httpConnection_Request1.postDataCharset, string3);
      boolean boolean0 = false;
      Connection.Request connection_Request1 = httpConnection_Request1.ignoreContentType(boolean0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      String string4 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request2.cookie(string4);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      HttpConnection.Response.initUnSecureTSL();
      String string0 = "P2\\(Z\\QBrUC";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      httpConnection_KeyVal0.value = string0;
      String string2 = "!!43Uhd[[&w";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(httpConnection_KeyVal0.value);
      // Undeclared exception!
      try { 
        HttpConnection.connect(httpConnection_KeyVal2.value);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: P2\\(Z\\QBrUC
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = null;
      String string1 = "set-cookie";
      String string2 = hashMap0.put(string0, httpConnection0.CONTENT_TYPE);
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = httpConnection0.FORM_URL_ENCODED;
      stringArray0[2] = httpConnection0.CONTENT_TYPE;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 47;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data();
      String string0 = HttpConnection.encodeMimeName(httpConnection0.CONTENT_TYPE);
      Proxy proxy0 = httpConnection_Request2.proxy();
      String string1 = "";
      String string2 = "J3rv|97vO\\>^=?S]\"";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      int int0 = 5512;
      HttpConnection.Response.MAX_REDIRECTS = int0;
      // Undeclared exception!
      try { 
        HttpConnection.connect(httpConnection_Response1.LOCATION);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Location
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = null;
      Connection connection0 = httpConnection0.request(connection_Request0);
      int int0 = 1762;
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "_$v0(&JGV<Vu@;ltl";
      String string1 = HttpConnection.encodeUrl(string0);
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      String string0 = "ol";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      URL uRL0 = MockURL.getFileExample();
      Connection connection1 = httpConnection0.url(uRL0);
      Connection connection2 = httpConnection0.validateTLSCertificates(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "h5";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string1 = "o#+?mP7G1OTeuGiz7YF";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string1);
      String string2 = HttpConnection.Response.setOutputContentType(((HttpConnection) connection2).req);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(((HttpConnection) connection0).req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer(httpConnection_Request0.postDataCharset);
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection1 = httpConnection0.proxy(proxy0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      String string1 = httpConnection_Response0.charset();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      String string2 = "";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string2, int0);
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "hK~C>[<2<`BI99Q.&Su";
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = HttpConnection.encodeUrl(httpConnection0.FORM_URL_ENCODED);
      String string1 = "{>ZGxFL:1-&C";
      int int0 = (-875);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      String string0 = "address";
      Tag tag0 = Tag.valueOf(string0);
      String string1 = ":Q+4 %";
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, string1, attributes0);
      List<Connection.KeyVal> list0 = formElement0.formData();
      httpConnection_Request0.data = (Collection<Connection.KeyVal>) list0;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      String string0 = "IHOV;M!xhH-r _;=_^_";
      String string1 = "c~')y5RN\"EhOBm!F";
      File file0 = MockFile.createTempFile(string0, string1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, (InputStream) mockFileInputStream0);
      String string2 = httpConnection_KeyVal0.value();
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = httpConnection0.CONTENT_ENCODING;
      stringArray0[1] = string2;
      stringArray0[2] = httpConnection0.CONTENT_TYPE;
      stringArray0[3] = httpConnection_KeyVal0.value;
      stringArray0[4] = string0;
      stringArray0[5] = string0;
      Connection connection0 = httpConnection0.data(stringArray0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      stringArray0[0] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[1] = httpConnection0.CONTENT_TYPE;
      Connection connection0 = httpConnection0.data(stringArray0);
      boolean boolean0 = false;
      Connection connection1 = httpConnection0.validateTLSCertificates(boolean0);
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data input stream must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 161;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      httpConnection_Request3.timeoutMilliseconds = httpConnection_Request1.maxBodySizeBytes;
      String string1 = HttpConnection.Response.setOutputContentType(httpConnection_Request3);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header(httpConnection_Request2.postDataCharset, httpConnection_Request1.postDataCharset);
      Connection connection1 = httpConnection0.referrer(httpConnection_Request1.postDataCharset);
      boolean boolean0 = httpConnection_Request0.followRedirects();
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.initUnSecureTSL();
      String string0 = "lQk!5Qsx9~{*{Pjgdj";
      Connection connection0 = httpConnection0.userAgent(string0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      httpConnection_Response0.cookies = map0;
      int int0 = httpConnection_Response0.statusCode();
      // Undeclared exception!
      try { 
        httpConnection0.url(httpConnection_Response0.contentType);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      String string0 = "\n";
      String string1 = "UdW @[*?5";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      Connection connection1 = httpConnection0.data(stringArray0);
      String string0 = "4fPU3-x-YG";
      HttpConnection.Response.LOCATION = string0;
      String string1 = "";
      Connection connection2 = httpConnection0.userAgent(string1);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      int int0 = 0;
      Connection.Request connection_Request1 = httpConnection_Request0.maxBodySize(int0);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Request0.method = connection_Method0;
      HttpConnection.Response httpConnection_Response0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      boolean boolean0 = httpConnection_Request3.validateTLSCertificates();
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.KeyVal connection_KeyVal0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request0.data(connection_KeyVal0);
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(httpConnection_Request3, outputStream0, httpConnection_Request3.postDataCharset);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "org.jsoup.helper.HttpConnection$Base";
      int int0 = 61;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      String string1 = httpConnection_Request0.header(string0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(httpConnection_Request0.maxBodySizeBytes);
      String string2 = "";
      int int1 = 1062;
      String string3 = "org.jsoup.helper.HttpConnection$Response";
      httpConnection_Request1.proxy = httpConnection_Request0.proxy;
      try { 
        MockURL.URL(httpConnection_Request1.postDataCharset, string2, int1, string3);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: utf-8
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      Connection.Request connection_Request0 = null;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.parserDefined = boolean0;
      String string0 = "8_H-W%Nc$\\";
      String string1 = "`D/Q/I-No";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string2 = "vg:D";
      boolean boolean1 = true;
      Connection.Request connection_Request0 = httpConnection_Request1.followRedirects(boolean1);
      String string3 = ". Mimetype=";
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.removeCookie(string3);
      String string4 = "";
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request1.cookie(string2, string4);
      Parser parser0 = httpConnection_Request1.parser();
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request0.followRedirects(httpConnection_Request1.ignoreHttpErrors);
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "W(=?M6o!;@5xR;?";
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data(string5, string1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = "v14}=Y`*\"6 MRU";
      String string2 = HttpConnection.encodeUrl(string1);
      String string3 = "hidden";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "frame";
      Connection connection0 = httpConnection0.cookie(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "$6\"";
      Connection connection0 = httpConnection0.data(string0, string0);
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "map";
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response.LOCATION = httpConnection_Response0.statusMessage;
      String string0 = "$T\\@:1Z";
      String string1 = httpConnection_Response0.cookie(string0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Response0.executed);
      int int0 = httpConnection_Response0.statusCode();
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection1 = httpConnection0.proxy(proxy0);
      int int1 = httpConnection_Response0.statusCode();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string2 = "5&xYyhG.Uup{~";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string2, httpConnection0.FORM_URL_ENCODED);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Proxy proxy1 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      // Undeclared exception!
      try { 
        httpConnection_Request3.proxy(httpConnection0.FORM_URL_ENCODED, httpConnection_Request0.maxBodySizeBytes);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:1048576
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection0 = httpConnection0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.getHeaderCaseInsensitive(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 584;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      String string1 = "!Y=_08c+tT#3sk;]KM";
      String string2 = httpConnection_Request1.getHeaderCaseInsensitive(string1);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = "";
      String string4 = "xk";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string3, string4);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ")3lGh";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // )3lGh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ">Yi";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // >Yi
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      int int0 = 36;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.postDataCharset, int0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request3.followRedirects(boolean0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(httpConnection_Request2.postDataCharset);
      Locale locale0 = Locale.US;
      Object[] objectArray0 = new Object[3];
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)64;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      mockPrintStream0.write(byteArray0);
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) httpConnection_Request3;
      objectArray0[2] = (Object) httpConnection_Request3;
      PrintStream printStream0 = mockPrintStream0.format(locale0, httpConnection_Request0.postDataCharset, objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, httpConnection_Request2.parserDefined);
      String string0 = "org.jsoup.helper.HttpConnection$Response";
      PrintStream printStream1 = mockPrintStream1.format(string0, objectArray0);
      HttpConnection.Response.writePost(connection_Request0, printStream1, httpConnection_Request1.postDataCharset);
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      Connection connection0 = httpConnection0.data(map0);
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-1217);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "*4y_@dD1rGwX9zZ)E2";
      String string1 = null;
      int int0 = 645;
      Connection connection0 = httpConnection0.timeout(int0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1, inputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 2391;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreContentType(httpConnection_Request1.followRedirects);
      String string0 = HttpConnection.Response.getRequestCookieString(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>(httpConnection_Response0.numRedirects);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      String string1 = httpConnection_KeyVal0.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-673);
      httpConnection_Response0.statusCode = httpConnection_Request0.maxBodySizeBytes;
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy(httpConnection_Response0.LOCATION, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-673
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      String string0 = "; boundary=";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "&86??Lqp9YEM=ck";
      String string2 = ";W";
      httpConnection_KeyVal0.value = string2;
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string0, string1, httpConnection_KeyVal0.stream);
      String string3 = "]bs@e3";
      httpConnection_KeyVal0.value = string3;
      String string4 = "figure";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key(string4);
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "d29)|w\"";
      // Undeclared exception!
      try { 
        httpConnection0.url(string5);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: d29)|w\"
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies();
      Connection connection0 = httpConnection0.cookies(map0);
      boolean boolean0 = httpConnection_Response0.hasCookie(httpConnection0.CONTENT_ENCODING);
      Connection.Request connection_Request0 = httpConnection0.request();
      Connection connection1 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      String string0 = "";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(httpConnection0.CONTENT_TYPE);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      boolean boolean1 = false;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-1380);
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy(httpConnection0.CONTENT_TYPE, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1380
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createHeaderMap(httpURLConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[7];
      stringArray0[0] = httpConnection0.FORM_URL_ENCODED;
      stringArray0[1] = httpConnection0.CONTENT_ENCODING;
      stringArray0[2] = httpConnection0.FORM_URL_ENCODED;
      stringArray0[3] = httpConnection0.CONTENT_ENCODING;
      stringArray0[4] = httpConnection0.CONTENT_ENCODING;
      stringArray0[5] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[6] = httpConnection0.CONTENT_TYPE;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "%22";
      boolean boolean0 = httpConnection_Request0.hasCookie(string0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      int int0 = httpConnection_Request1.timeout();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      String string0 = "0jk!NHP#]_>V";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1333;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(int0);
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      String string0 = "[yxMeD5E7z`u<d";
      int int0 = 0;
      Connection connection1 = httpConnection0.proxy(string0, int0);
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      int int1 = 1496;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int1);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      String string2 = mockInetSocketAddress0.getHostName();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      Connection connection2 = httpConnection0.request((Connection.Request) httpConnection_Request1);
      Connection.Response connection_Response0 = httpConnection0.response();
      String string3 = HttpConnection.Response.setOutputContentType(httpConnection0.req);
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection connection3 = httpConnection0.method(connection_Method0);
      int int2 = (-4833);
      // Undeclared exception!
      try { 
        httpConnection_Request1.maxBodySize(int2);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      boolean boolean1 = false;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean1);
      Connection connection2 = httpConnection0.followRedirects(boolean1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      // Undeclared exception!
      try { 
        httpConnection0.proxy(httpConnection_Response0.contentType, httpConnection_Response0.MAX_REDIRECTS);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "f-e9VMSw1K_k";
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy = proxy0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request1.postDataCharset(httpConnection_KeyVal0.value);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Map.Entry<String, String> map_Entry0 = httpConnection_Request2.scanHeaders(httpConnection_Request1.postDataCharset);
      Connection.Request connection_Request0 = httpConnection_Request2.postDataCharset(httpConnection_Request1.postDataCharset);
      boolean boolean0 = false;
      Connection.Request connection_Request1 = httpConnection_Request2.followRedirects(boolean0);
      Connection.Request connection_Request2 = httpConnection_Request1.ignoreHttpErrors(httpConnection_Request2.validateTSLCertificates);
      boolean boolean1 = httpConnection_Request0.validateTLSCertificates();
      int int0 = 54;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.proxy(httpConnection_Request1.postDataCharset, int0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = Parser.parseBodyFragment(httpConnection0.MULTIPART_FORM_DATA, httpConnection0.CONTENT_ENCODING);
      Document document1 = document0.clone();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      Elements elements0 = document1.getAllElements();
      String string0 = "{4*.y5CmV:r<|@[(GM";
      boolean boolean0 = document1.hasClass(string0);
      Map<String, String> map0 = document1.dataset();
      Connection connection1 = httpConnection0.data(map0);
      String string1 = "6-0Kvp}b;%W";
      Connection connection2 = httpConnection0.userAgent(string1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(httpConnection_KeyVal0.value, string0);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      String string0 = "2,@n";
      String string1 = "Cuzmkb\\0C}";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)3;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int int0 = 56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byte0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 42;
      Connection connection0 = httpConnection0.timeout(int0);
      Parser parser0 = Parser.xmlParser();
      String string0 = ":nth-child(%d)";
      String string1 = "maxSize must be 0 (unlimited) or larger";
      Document document0 = Parser.parse(string0, string1);
      Element element0 = document0.createElement(httpConnection0.FORM_URL_ENCODED);
      String string2 = "URL must not be null";
      List<Node> list0 = Parser.parseFragment(httpConnection0.MULTIPART_FORM_DATA, element0, string2);
      boolean boolean0 = true;
      String string3 = Parser.unescapeEntities(httpConnection0.FORM_URL_ENCODED, boolean0);
      Connection connection1 = httpConnection0.parser(parser0);
      String string4 = "; filename=\"";
      String string5 = HttpConnection.encodeMimeName(string4);
      String[] stringArray0 = new String[6];
      stringArray0[0] = string4;
      stringArray0[1] = string4;
      stringArray0[2] = httpConnection0.CONTENT_ENCODING;
      String string6 = "";
      stringArray0[3] = string6;
      stringArray0[4] = string5;
      stringArray0[5] = httpConnection0.CONTENT_ENCODING;
      Connection connection2 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      Connection connection0 = httpConnection0.userAgent(string0);
      HttpConnection.Response.initUnSecureTSL();
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection0.referrer(string1);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 1156;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      boolean boolean0 = false;
      Connection connection1 = httpConnection0.followRedirects(boolean0);
      Connection connection2 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(httpConnection0.CONTENT_TYPE, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean1 = httpConnection_Request5.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Request connection_Request0 = httpConnection_Response0.req;
      HttpConnection.CONTENT_ENCODING = httpConnection0.FORM_URL_ENCODED;
      Connection connection0 = httpConnection0.request(connection_Request0);
      String string0 = "figure";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.statusMessage = httpConnection0.CONTENT_ENCODING;
      URL uRL0 = httpConnection_Response0.url();
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data;
      URL uRL0 = MockURL.getFtpExample();
      Connection.Request connection_Request0 = httpConnection_Request1.url(uRL0);
      Connection connection0 = httpConnection0.data(collection0);
      Connection connection1 = httpConnection0.proxy(httpConnection_Request0.proxy);
      String string0 = "DELETE";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string0);
      int int0 = httpConnection_Request2.timeout();
      String string1 = "";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.toString();
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      String string1 = "T {'^Ofr9|<Ys!]g.G";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: T {'^Ofr9|<Ys!]g.G
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = ">/sUAu";
      boolean boolean0 = httpConnection_Request0.hasHeader(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.validateTSLCertificates);
      boolean boolean0 = httpConnection_Request1.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      String string0 = "EWJnO}";
      String string1 = "{D+wXq;>>4Kp";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-63);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-92);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-125);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-62);
      byteArray0[3] = byte3;
      int int0 = 52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, byte0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) byteArrayInputStream0);
      String string2 = "Qkt%7";
      int int1 = 0;
      byteArrayInputStream0.mark(int1);
      int int2 = byteArrayInputStream0.read(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(string1, string2, (InputStream) byteArrayInputStream0);
      String string3 = httpConnection_KeyVal0.toString();
      String string4 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal1.toString();
      String string2 = httpConnection_KeyVal1.value();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      // Undeclared exception!
      try { 
        httpConnection_Request1.proxy(string0, httpConnection_Request0.maxBodySizeBytes);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:1048576
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, httpConnection_Request0.timeoutMilliseconds);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = httpConnection_Request1.postDataCharset();
      httpConnection_Request0.maxBodySizeBytes = httpConnection_Request1.maxBodySizeBytes;
      String string1 = "t,mI";
      String string2 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, httpConnection_Request1.maxBodySizeBytes);
      long long0 = 0L;
      long long1 = pipedInputStream0.skip(long0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string1, string2, (InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      HttpConnection.Response.initUnSecureTSL();
      int int0 = 2003;
      Random.setNextRandom(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = "a";
      String string1 = "fPP8&&}V";
      Connection.Response connection_Response0 = httpConnection_Response1.cookie(string0, string1);
      Connection.Method connection_Method0 = Connection.Method.TRACE;
      httpConnection_Response1.method = connection_Method0;
      int int1 = httpConnection_Response1.statusCode();
      HttpConnection.Response.LOCATION = httpConnection_Response0.contentType;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, httpConnection_Response0.executed, httpConnection_Response1.executed, httpConnection_Response1.executed);
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection.Response connection_Response0 = httpConnection_Response0.method(connection_Method0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "1X`)qJ8";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)44;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-25);
      byteArray0[1] = byte1;
      byte byte2 = (byte)125;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-80);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-43);
      byteArray0[4] = byte4;
      byte byte5 = (byte)18;
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      List<String> list2 = hashMap0.putIfAbsent(string0, list1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = "$";
      int int0 = (-1855445051);
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy(string1, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1855445051
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "$}R4-_2HmtL";
      int int0 = 147;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      Connection.Method connection_Method0 = Connection.Method.PUT;
      Connection.Request connection_Request0 = httpConnection_Request2.method(connection_Method0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = MockURL.URL(uRL0, httpConnection_Request0.postDataCharset);
      Connection.Request connection_Request1 = httpConnection_Request3.url(uRL1);
      HttpConnection.Response.serialiseRequestUrl(httpConnection_Request3);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = httpConnection_Response0.charset();
      boolean boolean0 = httpConnection_Request1.ignoreContentType();
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      String string0 = ".$=ZAc+%fkTQ%;5r\".b";
      boolean boolean0 = true;
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(httpConnection0.req);
      LinkedHashMap<String, List<String>> linkedHashMap0 = HttpConnection.Response.createHeaderMap(httpURLConnection0);
      try { 
        httpConnection0.get();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "referer";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // referer
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.ignoreContentType = boolean0;
      String string0 = ">/sUAu";
      boolean boolean1 = httpConnection_Request0.ignoreContentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = null;
      String string1 = "set-cookie";
      String string2 = hashMap0.getOrDefault(string0, string1);
      String string3 = hashMap0.put(string0, httpConnection0.CONTENT_TYPE);
      // Undeclared exception!
      try { 
        httpConnection0.cookies(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      httpConnection_Response0.numRedirects = httpConnection_Response1.numRedirects;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "&nbsp;";
      String string1 = "MQPh9'0JTR}s@";
      String string2 = "{-ca3";
      String string3 = "https";
      String string4 = hashMap0.put(string2, string3);
      String string5 = hashMap0.put(string0, string1);
      httpConnection_Response1.headers = (Map<String, String>) hashMap0;
      boolean boolean2 = true;
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean5 = FileSystemHandling.appendLineToFile(evoSuiteFile0, httpConnection_Response1.statusMessage);
      httpConnection_Response1.executed = boolean2;
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 25;
      String string0 = ".$=ZAc+%fkTQ%;5r\".b";
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        httpConnection0.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpURLConnection httpURLConnection0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.setupFromConnection(httpURLConnection0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      String string1 = httpConnection_Response0.charset();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      String string2 = "gQ33lh.'#nX8RZb}1";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string2, int0);
      String string3 = httpConnection_Response0.statusMessage();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer(httpConnection_Request0.postDataCharset);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection httpConnection1 = new HttpConnection();
      boolean boolean0 = httpConnection_Request0.hasHeaderWithValue(httpConnection0.CONTENT_TYPE, httpConnection1.FORM_URL_ENCODED);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      String string1 = httpConnection_Response0.charset();
      boolean boolean1 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean1);
      String string2 = "gQ33lh.'#nX8RZb}1";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string2, int0);
      Random.setNextRandom(httpConnection_Request1.timeoutMilliseconds);
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "set-cookie";
      String string1 = HttpConnection.encodeMimeName(string0);
      Connection.Request connection_Request0 = null;
      httpConnection0.req = connection_Request0;
      String string2 = "C5u";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 161;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int1);
      String string1 = "{}[PclWq/W^<~Tq&<i";
      String string2 = httpConnection_Request1.cookie(string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      httpConnection_Request3.timeoutMilliseconds = httpConnection_Request1.maxBodySizeBytes;
      String string3 = HttpConnection.Response.setOutputContentType(httpConnection_Request3);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header(httpConnection_Request2.postDataCharset, httpConnection_Request1.postDataCharset);
      Connection connection1 = httpConnection0.referrer(httpConnection_Request1.postDataCharset);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      boolean boolean1 = httpConnection_Request0.followRedirects();
      String string4 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string4, string4);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      boolean boolean0 = httpConnection_Request0.validateTLSCertificates();
      String string0 = "55)z}tR93|N-M7^v_";
      DataInputStream dataInputStream0 = new DataInputStream(httpConnection_KeyVal0.stream);
      httpConnection_KeyVal0.stream = (InputStream) dataInputStream0;
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection.Request connection_Request0 = httpConnection_Request0.method(connection_Method0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int0 = (-2146);
      // Undeclared exception!
      try { 
        httpConnection_Request1.proxy(httpConnection_KeyVal0.key, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2146
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response.xmlContentTypeRxp = httpConnection_Response0.xmlContentTypeRxp;
      String string0 = httpConnection_Response0.contentType();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      String string0 = ".$=ZAc+%fkTQ%;5r\".b";
      boolean boolean0 = true;
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      String string1 = null;
      HttpConnection.CONTENT_TYPE = string1;
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(httpConnection0.req);
      try { 
        connection0.execute();
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = null;
      String string0 = "1x`)qj8";
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      boolean boolean1 = httpConnection_Request3.ignoreHttpErrors();
      String string2 = "US17}Bn/{@7B}!,`u";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string2);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: US17}Bn/{@7B}!,`u
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      String string0 = ".$=ZAc+%fkTQ%;5r\".b";
      boolean boolean0 = true;
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean1 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, ((HttpConnection) connection0).FORM_URL_ENCODED);
      HttpURLConnection httpURLConnection0 = HttpConnection.Response.createConnection(httpConnection0.req);
      Connection.Request connection_Request0 = connection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      String string1 = httpConnection_Response1.contentType();
      LinkedHashMap<String, List<String>> linkedHashMap0 = HttpConnection.Response.createHeaderMap(httpURLConnection0);
      Document document0 = httpConnection0.get();
      LinkedHashMap<String, List<String>> linkedHashMap1 = HttpConnection.Response.createHeaderMap(httpURLConnection0);
      int int1 = (-2069);
      HttpConnection.Response httpConnection_Response2 = HttpConnection.Response.execute(((HttpConnection) connection0).req, httpConnection_Response1);
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      EvoSuiteURL evoSuiteURL0 = null;
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, httpConnection_Request0.postDataCharset);
      String string0 = "ascii";
      Connection.Request connection_Request0 = httpConnection_Request0.postDataCharset(string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
