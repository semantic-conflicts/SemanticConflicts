/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:05:13 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;
import sun.security.ssl.SSLSocketFactoryImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = "[%s]";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(httpConnection_Request1.followRedirects);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(connection_Request0, outputStream0, httpConnection_KeyVal0.key);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      boolean boolean1 = httpConnection_Request0.followRedirects();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean2 = FileSystemHandling.createFolder(evoSuiteFile0);
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      httpConnection_Request0.headers = map0;
      Connection connection0 = httpConnection0.header(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      Connection connection1 = httpConnection0.proxy(httpConnection_Request0.proxy);
      Connection connection2 = httpConnection0.postDataCharset(httpConnection_Request0.postDataCharset);
      String string0 = "&#x";
      Connection connection3 = httpConnection0.userAgent(string0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.MULTIPART_FORM_DATA, httpConnection0.CONTENT_TYPE);
      Connection connection4 = httpConnection0.proxy(httpConnection_Request0.proxy);
      Connection connection5 = httpConnection0.timeout(httpConnection_Request0.timeoutMilliseconds);
      boolean boolean3 = false;
      Connection connection6 = httpConnection0.validateTLSCertificates(boolean3);
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean1);
      String string1 = "multipart/form-data";
      String string2 = "]P53";
      Connection connection7 = httpConnection0.data(string1, string2, httpConnection_KeyVal0.stream);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      Connection.Request connection_Request0 = httpConnection_Request1.postDataCharset(httpConnection_Request0.postDataCharset);
      String string0 = HttpConnection.Response.setOutputContentType(connection_Request0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(httpConnection_Request0.timeoutMilliseconds);
      Connection connection1 = httpConnection0.parser(httpConnection_Request1.parser);
      Connection connection2 = httpConnection0.validateTLSCertificates(httpConnection_Request1.validateTSLCertificates);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      stringArray0[0] = httpConnection_Request0.postDataCharset;
      stringArray0[1] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[2] = httpConnection_Request0.postDataCharset;
      stringArray0[3] = httpConnection0.CONTENT_ENCODING;
      stringArray0[4] = httpConnection_Request0.postDataCharset;
      stringArray0[5] = httpConnection0.CONTENT_TYPE;
      String string0 = "\\$@Te+Y";
      stringArray0[6] = string0;
      stringArray0[7] = httpConnection0.CONTENT_ENCODING;
      Connection connection0 = httpConnection0.data(stringArray0);
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address /192.168.1.42:3000
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "P\\&`D/wc&TT";
      String string1 = "seamless";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      String string2 = "R2SA0qybp<;wsZJ";
      Parser parser1 = Parser.xmlParser();
      String string3 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed(string2, string3);
      Connection connection0 = httpConnection0.parser(parser0);
      String string4 = "Data collection must not be null";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string4);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Data collection must not be null
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "Content-Encoding";
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0, inputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      httpConnection_KeyVal1.key = httpConnection_KeyVal0.key;
      DataInputStream dataInputStream0 = new DataInputStream(httpConnection_KeyVal0.stream);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(httpConnection_KeyVal1.key, httpConnection_KeyVal0.key, (InputStream) dataInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.key, httpConnection_KeyVal1.key);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.inputStream(httpConnection_KeyVal0.stream);
      String string1 = httpConnection_KeyVal4.toString();
      String string2 = "td]Iih$+HyVF4 ";
      HttpConnection.KeyVal httpConnection_KeyVal5 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.key, string2, httpConnection_KeyVal4.stream);
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      boolean boolean1 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean1);
      Connection connection1 = httpConnection0.validateTLSCertificates(boolean0);
      HttpConnection.Response.initUnSecureTSL();
      boolean boolean2 = false;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(httpConnection_Request0.followRedirects);
      Connection connection2 = httpConnection0.request(connection_Request0);
      Connection connection3 = httpConnection0.ignoreContentType(boolean2);
      HttpConnection.KeyVal httpConnection_KeyVal6 = httpConnection_KeyVal3.value(httpConnection0.CONTENT_TYPE);
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Request connection_Request0 = httpConnection_Response1.req;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response1);
      } catch(IllegalArgumentException e) {
         //
         // Request must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.CONTENT_TYPE = httpConnection0.MULTIPART_FORM_DATA;
      String string0 = "(SjVmEt";
      String string1 = "";
      HttpConnection.CONTENT_ENCODING = string1;
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = HttpConnection.encodeUrl(string0);
      boolean boolean1 = true;
      Connection connection1 = httpConnection0.followRedirects(boolean1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = "b70.WHx?JG'9Is)\"";
      String string4 = httpConnection_Response0.getHeaderCaseInsensitive(httpConnection0.CONTENT_TYPE);
      boolean boolean2 = httpConnection_Response0.hasHeaderWithValue(string3, HttpConnection.CONTENT_TYPE);
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection2 = httpConnection0.cookies(map0);
      String string5 = null;
      String string6 = "rT[*L-|Baw";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string5, string6);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createHeaderMap(httpURLConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HttpConnection.Response.LOCATION = httpConnection_Response0.charset;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "%0d|_i5";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(httpConnection_Response0.charset, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Response0.numRedirects);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = null;
      String string1 = "org.jsoup.parser.htmltreebuilderstate";
      URI uRI0 = null;
      String string2 = "?";
      // Undeclared exception!
      try { 
        MockURI.resolve(uRI0, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "E9L";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer(string0);
      String string1 = ";:S2G^?#lc\"mV)";
      URL uRL0 = MockURL.getFtpExample();
      Connection connection1 = HttpConnection.connect(uRL0);
      HttpConnection.MULTIPART_FORM_DATA = string1;
      Connection.Request connection_Request0 = httpConnection0.request();
      String string2 = HttpConnection.Response.getRequestCookieString(connection_Request0);
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Request0.headers = (Map<String, String>) hashMap0;
      int int0 = 6;
      boolean boolean1 = true;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, httpConnection_Request0.parserDefined, boolean1);
      httpConnection_Request0.maxBodySizeBytes = int0;
      String string3 = "!qDtN";
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset(string3);
      } catch(IllegalCharsetNameException e) {
         //
         // !qDtN
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-2890);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      String string0 = "org.jsoup.parser.XmlTreeBuilder";
      int int0 = 736;
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      ListIterator<Connection.KeyVal> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.toString();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[5];
      stringArray0[0] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[1] = httpConnection0.FORM_URL_ENCODED;
      stringArray0[2] = httpConnection0.CONTENT_TYPE;
      stringArray0[3] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[4] = httpConnection0.CONTENT_TYPE;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      int int0 = (-1020);
      // Undeclared exception!
      try { 
        httpConnection0.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1020
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 630;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.postDataCharset, httpConnection_Request0.timeoutMilliseconds);
      String string0 = "G\\52o7-V";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(string0, httpConnection_Request2.timeoutMilliseconds);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.maxBodySizeBytes);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreHttpErrors(boolean0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "~ePK,`\"";
      int int0 = 2286;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-223);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      URL uRL0 = null;
      httpConnection_Request1.url = uRL0;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.parser(httpConnection_Request1.parser);
      int int1 = (-2107);
      // Undeclared exception!
      try { 
        httpConnection_Request1.timeout(int1);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "'~;";
      int int0 = 472;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      String string1 = "Header name must not be empty";
      Connection connection1 = httpConnection0.cookie(string0, string1);
      String string2 = "\"bCj|#;qd|9Q!6D8G=?";
      int int1 = 3385;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.cookies();
      Connection connection2 = httpConnection0.cookies(map0);
      Connection connection3 = httpConnection0.proxy(string2, int1);
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string2);
      } catch(IllegalCharsetNameException e) {
         //
         // \"bCj|#;qd|9Q!6D8G=?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      InputStream inputStream0 = null;
      String string0 = HttpConnection.encodeMimeName(httpConnection0.CONTENT_ENCODING);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.CONTENT_ENCODING, httpConnection0.FORM_URL_ENCODED, inputStream0);
      String string1 = "Content-Type";
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(httpConnection0.CONTENT_TYPE, string1);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value(httpConnection0.FORM_URL_ENCODED);
      String string2 = httpConnection_KeyVal2.toString();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      String string3 = httpConnection_Request0.postDataCharset();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = httpConnection_Request0.postDataCharset();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "";
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)39;
      byteArray0[0] = byte0;
      byte byte1 = (byte)78;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)121;
      byteArray0[3] = byte3;
      int int0 = 0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, byteArray0[0], int0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string1, (InputStream) dataInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      String string1 = httpConnection_Response0.getHeaderCaseInsensitive(string0);
      int int0 = httpConnection_Response0.statusCode();
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(httpConnection_Response0.numRedirects);
      HttpConnection httpConnection0 = new HttpConnection();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-116);
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)118;
      byteArray0[2] = byte2;
      byte byte3 = (byte)64;
      byteArray0[3] = byte3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        httpConnection0.data(httpConnection_Response0.LOCATION, httpConnection_Response0.charset, (InputStream) byteArrayInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      String string1 = "T:]I_D<b,)GZl1#";
      // Undeclared exception!
      try { 
        MockURL.URL(string0, string1, httpConnection0.CONTENT_TYPE);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "eu";
      httpConnection_Request0.postDataCharset = string0;
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      Map<String, String> map0 = null;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      String string1 = "ufeEH[7sk$ ";
      String string2 = httpConnection_Request0.cookie(string1);
      String string3 = "^8%wgMh~!s[FL]";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request0.scanHeaders(string3);
      httpConnection_Request0.headers = map0;
      boolean boolean1 = httpConnection_Request0.followRedirects();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "0";
      String string1 = "";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "r@";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value(string1);
      String string3 = httpConnection_KeyVal2.value();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      boolean boolean0 = httpConnection_Request0.followRedirects();
      String string0 = "PdV#M[yCofB:Q]p*n\"[";
      String string1 = "-,%A<";
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)111;
      byteArray0[0] = byte0;
      byte byte1 = (byte)52;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) byteArrayInputStream0);
      String string2 = httpConnection_KeyVal0.value();
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-698);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      stringArray0[0] = httpConnection0.CONTENT_ENCODING;
      stringArray0[1] = httpConnection0.CONTENT_ENCODING;
      stringArray0[2] = httpConnection0.CONTENT_ENCODING;
      stringArray0[3] = httpConnection0.CONTENT_ENCODING;
      stringArray0[4] = httpConnection0.CONTENT_ENCODING;
      String string0 = "Z_|a[s>z";
      stringArray0[5] = string0;
      stringArray0[6] = httpConnection0.CONTENT_ENCODING;
      stringArray0[7] = httpConnection0.FORM_URL_ENCODED;
      Connection connection0 = httpConnection0.data(stringArray0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "plaintext";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      String string1 = "T";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string0);
      Parser parser0 = httpConnection_Request1.parser();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection0 = httpConnection0.data(map0);
      int int0 = (-1853);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "e&w";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = null;
      Connection connection0 = httpConnection0.response(connection_Response0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(httpConnection_Response0.executed);
      int int0 = httpConnection_Request0.maxBodySize();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.parser(httpConnection_Request0.parser);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      URI uRI0 = MockURI.create(httpConnection0.CONTENT_TYPE);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int0 = httpConnection_Request2.timeout();
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      Connection connection0 = httpConnection0.response(connection_Response0);
      String string0 = "n{sbA?rM;h];]]I";
      String string1 = HttpConnection.encodeUrl(string0);
      boolean boolean0 = false;
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpConnection0.proxy(string2, int0);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.connect(httpConnection0.CONTENT_TYPE);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Content-Type
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 265;
      httpConnection_Request0.maxBodySizeBytes = int0;
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset(httpConnection_Request0.postDataCharset);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "9@@ 2!W";
      Connection connection0 = httpConnection0.userAgent(string0);
      String string1 = "p^3>`o>%ds_](lm";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // p^3>`o>%ds_](lm
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "GO!H;ISLeOg";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string1 = "";
      httpConnection_KeyVal0.key = string1;
      boolean boolean0 = true;
      httpConnection_Request1.validateTSLCertificates = boolean0;
      Proxy proxy0 = Proxy.NO_PROXY;
      boolean boolean1 = httpConnection_Request3.hasHeaderWithValue(string0, httpConnection_Request1.postDataCharset);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(proxy0);
      boolean boolean2 = false;
      Connection.Request connection_Request0 = httpConnection_Request4.followRedirects(boolean2);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string2 = httpConnection_Response1.charset();
      String string3 = "me.|O^f xKAM_J\\G:~";
      // Undeclared exception!
      try { 
        httpConnection_Response1.cookie(string3, httpConnection_Response0.charset);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string0);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = HttpConnection.encodeMimeName(string0);
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      HttpConnection httpConnection1 = new HttpConnection();
      Connection connection1 = httpConnection1.userAgent(httpConnection0.CONTENT_ENCODING);
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection1.res;
      httpConnection0.res = (Connection.Response) httpConnection_Response0;
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection0.url(string2);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      String string0 = "";
      String string1 = HttpConnection.encodeMimeName(string0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string1, (InputStream) pipedInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection connection0 = httpConnection0.method(connection_Method0);
      String string0 = "";
      String string1 = "[$#kPorU~^H?c$2<``i";
      String string2 = "";
      String string3 = ":o-Ba}8p";
      String string4 = "of-.P=%t.8>E";
      try { 
        MockURI.URI(string2, string3, httpConnection0.CONTENT_ENCODING, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://[:o-Ba}8p]Content-Encoding#of-.P=%25t.8%3EE
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      String string0 = HttpConnection.Response.getRequestCookieString(connection_Request0);
      String string1 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      String string0 = "";
      httpConnection_Request0.postDataCharset = string0;
      httpConnection_Request0.timeoutMilliseconds = int0;
      Proxy proxy0 = httpConnection_Request0.proxy();
      int int1 = 0;
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(int1);
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = "";
      Connection connection0 = httpConnection0.referrer(string1);
      SSLSocketFactoryImpl sSLSocketFactoryImpl0 = (SSLSocketFactoryImpl)HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = (SSLSocketFactory) sSLSocketFactoryImpl0;
      String string2 = "HEAD";
      MockFile mockFile0 = new MockFile(string2, string1);
      URL uRL0 = mockFile0.toURL();
      httpConnection_Request0.url = uRL0;
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection1 = httpConnection0.method(connection_Method0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = httpConnection0.CONTENT_TYPE;
      stringArray0[1] = httpConnection0.CONTENT_ENCODING;
      boolean boolean0 = false;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(boolean0);
      stringArray0[2] = httpConnection0.CONTENT_TYPE;
      stringArray0[3] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[4] = httpConnection0.CONTENT_TYPE;
      stringArray0[5] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[6] = httpConnection0.CONTENT_TYPE;
      stringArray0[7] = httpConnection0.MULTIPART_FORM_DATA;
      stringArray0[8] = httpConnection_Request0.postDataCharset;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = true;
      httpConnection_Request1.validateTLSCertificates(boolean0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      Connection connection0 = httpConnection0.data(collection0);
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      String string0 = "1NQI@g[bg?S";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy = proxy0;
      Parser parser0 = Parser.xmlParser();
      httpConnection_Request0.parser = parser0;
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Connection connection0 = httpConnection0.data(httpConnection_Request0.postDataCharset, string0, (InputStream) dataInputStream0);
      String string2 = "J f`01<1KN-?~:'J";
      String string3 = "d{@_M&%4Dq-^\\?FQR";
      boolean boolean1 = true;
      httpConnection_Request0.validateTSLCertificates = boolean1;
      try { 
        MockURL.URL(httpConnection0.CONTENT_ENCODING, string2, string3);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: content-encoding
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      httpConnection0.req = connection_Request0;
      boolean boolean0 = false;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(httpConnection0.CONTENT_ENCODING, boolean0);
      mockFileOutputStream0.release();
      mockFileOutputStream0.release();
      HttpConnection.Response.writePost(connection_Request0, mockFileOutputStream0, httpConnection0.CONTENT_TYPE);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      String string0 = " FhiQ9=_P@?+7Ao.*";
      String string1 = "Request must not be null";
      Connection connection1 = httpConnection0.header(string0, string1);
      Connection connection2 = httpConnection0.followRedirects(boolean0);
      String string2 = "v";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string2);
      } catch(IllegalCharsetNameException e) {
         //
         // v
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "8CsEGtGJk]\\'IY\\";
      String string1 = "f!wIkezCo:";
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) sequenceInputStream0);
      httpConnection_KeyVal0.stream = (InputStream) sequenceInputStream0;
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string1, httpConnection_KeyVal0.stream);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(string1, string0, httpConnection_KeyVal0.stream);
      String string2 = httpConnection_KeyVal0.toString();
      String string3 = httpConnection_KeyVal0.value();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string4 = "*`Z3";
      boolean boolean0 = httpConnection_Request0.hasCookie(string4);
      Parser parser0 = null;
      String string5 = "";
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.key(string5);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response1.processResponseHeaders(hashMap0);
      String string0 = "QVWWKakbe4C[!}A";
      httpConnection_Response1.statusMessage = string0;
      Attributes attributes0 = new Attributes();
      String string1 = attributes0.toString();
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "  ";
      HttpConnection.CONTENT_TYPE = string0;
      boolean boolean0 = true;
      String string1 = "";
      HttpConnection.Response.LOCATION = string1;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = "lLX";
      int int0 = 97;
      Connection connection1 = httpConnection0.timeout(int0);
      String string3 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(string2, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      int int0 = 0;
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(httpConnection_KeyVal0.key, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      String string0 = "Method must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream(httpConnection_KeyVal0.stream);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value(httpConnection_KeyVal1.value);
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal2.key(httpConnection_KeyVal0.value);
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal2);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      String string1 = "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.";
      String string2 = "org.jsoup.helper.HttpConnection$Request";
      String string3 = "\"\r\nContent-Type: application/octet-stream\r\n\r\n";
      String string4 = httpConnection_Request2.header(string3);
      boolean boolean0 = httpConnection_Request1.hasHeaderWithValue(string1, string2);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Request0.method = connection_Method0;
      String string5 = "";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(string5, httpConnection_Request2.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.parser(httpConnection_Request2.parser);
      Connection.Method connection_Method1 = Connection.Method.POST;
      Connection.Request connection_Request0 = httpConnection_Request2.method(connection_Method1);
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request5.proxy(httpConnection_Request0.proxy);
      int int0 = httpConnection_Request5.timeout();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request4);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "/A@i_&x";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.validateTLSCertificates();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "O rVy/F?*J";
      Connection connection0 = httpConnection0.followRedirects(httpConnection_Request0.parserDefined);
      Connection connection1 = httpConnection0.referrer(string0);
      Attributes attributes0 = new Attributes();
      String string1 = "";
      MockFile mockFile0 = new MockFile(httpConnection0.CONTENT_TYPE, string1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "|Lk";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 19;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      int int1 = 3227;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_KeyVal0.key, int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request4.data();
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      Document document0 = Parser.parseBodyFragment(httpConnection_Request2.postDataCharset, httpConnection_Request2.postDataCharset);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection.Request connection_Request0 = httpConnection_Request2.method(connection_Method0);
      String string0 = "[_/1(!LHD6g&";
      Connection.Request connection_Request1 = httpConnection_Request1.removeCookie(httpConnection_Request0.postDataCharset);
      Document document1 = Parser.parse(httpConnection_Request1.postDataCharset, string0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.postDataCharset, httpConnection_Request0.timeoutMilliseconds);
      int int0 = 0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(int0);
      boolean boolean0 = false;
      Connection.Request connection_Request2 = httpConnection_Request4.followRedirects(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      boolean boolean1 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers();
      httpConnection_Response0.headers = map0;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-3739);
      Parser parser0 = httpConnection_Request0.parser.setTrackErrors(int0);
      int int1 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int1);
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      httpConnection_Request1.method = connection_Method0;
      String string0 = "iframe";
      String string1 = "RR`D$.je0";
      Document document0 = Parser.parse(string0, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.parser(parser0);
      Connection.Request connection_Request0 = httpConnection_Request2.ignoreHttpErrors(httpConnection_Request0.ignoreContentType);
      boolean boolean0 = true;
      httpConnection_Request0.ignoreHttpErrors = boolean0;
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.MULTIPART_FORM_DATA, httpConnection0.MULTIPART_FORM_DATA);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      Connection connection1 = httpConnection0.request((Connection.Request) httpConnection_Request3);
      String string0 = httpConnection_Request2.postDataCharset();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = "";
      Map.Entry<String, String> map_Entry0 = httpConnection_Response0.scanHeaders(string1);
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-1029);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Z4F t-jd,B4*";
      int int0 = 20;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string1 = "<j_T";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(proxy0);
      boolean boolean0 = httpConnection_Request5.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "+Q}Lwp}Tl#K7l6tXM";
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      Connection connection1 = httpConnection0.data(string0, string0);
      String string1 = "audio";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.CONTENT_ENCODING, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection0.MULTIPART_FORM_DATA);
      String string2 = "";
      httpConnection_KeyVal0.value = string1;
      String string3 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string2, string3, httpConnection_KeyVal1.stream);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test77()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HttpConnection.Response.LOCATION = httpConnection_Response0.charset;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(httpConnection_Response0.charset, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = httpConnection_Request1.followRedirects();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(httpConnection_Response0.LOCATION);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test78()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "compact";
      String string1 = "";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int0);
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test79()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = 804;
      String string0 = "Content-Disposition: form-data; name=\"";
      HttpConnection.Response.LOCATION = string0;
      httpConnection_Response0.numRedirects = int0;
      HttpConnection.Response httpConnection_Response1 = null;
      try {
        httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      } catch(Throwable e) {
         //
         // Too many redirects occurred trying to load URL null
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test80()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      String string0 = "";
      String string1 = "org.jsoup.helper.HttpConnection$Base";
      TextNode textNode0 = new TextNode(string0, string1);
      TextNode textNode1 = textNode0.text(httpConnection0.MULTIPART_FORM_DATA);
      List<Node> list0 = textNode1.siblingNodes();
      Attributes attributes0 = textNode1.attributes();
      Map<String, String> map0 = attributes0.dataset();
      Connection connection0 = httpConnection0.cookies(map0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string2 = httpConnection_Response1.statusMessage();
  }

  @Test(timeout = 11000)
  public void test81()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      HttpConnection.FORM_URL_ENCODED = string0;
      boolean boolean0 = true;
      HttpConnection.Response.initUnSecureTSL();
      Connection.Request connection_Request0 = null;
      Connection connection0 = httpConnection0.request(connection_Request0);
      // Undeclared exception!
      try { 
        httpConnection0.ignoreHttpErrors(boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test82()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test83()  throws Throwable  {
      String string0 = "[%s$=%s]";
      String string1 = "%20";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      String string2 = "}NaYfjI|cV&<$\\A4E\"j";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-4703);
      byte[] byteArray0 = new byte[13];
      HttpConnection httpConnection0 = new HttpConnection();
      Collection<Connection.KeyVal> collection0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test84()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-61);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-10);
      byteArray0[1] = byte1;
      String string0 = "CommentEndDash";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      byte byte2 = (byte)20;
      byteArray0[2] = byte2;
      byte byte3 = (byte)88;
      byteArray0[3] = byte3;
      byte byte4 = (byte)100;
      byteArray0[4] = byte4;
      byte byte5 = (byte)84;
      byteArray0[5] = byte5;
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(httpConnection_KeyVal0.value, string0, httpConnection_KeyVal0.stream);
      byte byte6 = (byte) (-13);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-128);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-78);
      byteArray0[8] = byte8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      httpConnection_KeyVal0.stream = (InputStream) byteArrayInputStream0;
      String string1 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test85()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.validateTLSCertificates();
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "O rVy/F?*J";
      Connection connection0 = httpConnection0.followRedirects(httpConnection_Request0.parserDefined);
      String string1 = "jpw8t(bw00zLU1To2";
      Connection connection1 = connection0.referrer(string1);
      Connection connection2 = httpConnection0.referrer(string0);
      Attributes attributes0 = new Attributes();
      String string2 = "";
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(((HttpConnection) connection2).req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test86()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      String string0 = "|jVJ`";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "?9%&h6;";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      Document document0 = Document.createShell(string0);
      Document document1 = document0.clone();
      String string2 = ", ";
      String string3 = document1.attr(string2);
      Map<String, String> map0 = document1.dataset();
      Connection connection1 = httpConnection0.data(map0);
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = null;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string4 = "Request must be executed (with .execute(), .get(), or .post() before getting response body";
      Connection.Request connection_Request0 = httpConnection_Request3.removeCookie(string4);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(httpConnection_Request1.maxBodySizeBytes);
      boolean boolean2 = httpConnection_Request4.ignoreHttpErrors();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test87()  throws Throwable  {
      String string0 = "E\"a477[J[9*S";
      String string1 = "7foxpy6$'5U{F";
      String string2 = null;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string3 = "`#[tKoi:U7<}t`";
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test88()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      String string1 = HttpConnection.encodeMimeName(string0);
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      HttpConnection httpConnection1 = new HttpConnection();
      Connection connection1 = httpConnection1.userAgent(httpConnection0.CONTENT_ENCODING);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      URL uRL0 = httpConnection_Response0.url();
      // Undeclared exception!
      try { 
        HttpConnection.connect(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test89()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 3000;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = "(application|text)/\\w*\\+?xml.*";
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      String string1 = "; ";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string1, (InputStream) mockFileInputStream0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string2 = HttpConnection.Response.setOutputContentType(httpConnection_Request4);
  }

  @Test(timeout = 11000)
  public void test90()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = null;
      String string1 = hashMap0.put(string0, httpConnection0.CONTENT_TYPE);
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test91()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getFileExample();
      Connection.Request connection_Request0 = httpConnection_Request0.url(uRL0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreContentType(httpConnection_Request0.ignoreHttpErrors);
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response0);
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test92()  throws Throwable  {
      int int0 = 327;
      Random.setNextRandom(int0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = ":LH[gF#Notdk1Dj";
      InputStream inputStream0 = null;
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, string0, inputStream0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int1 = (-1938);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      HttpConnection httpConnection0 = new HttpConnection();
      Collection<Connection.KeyVal> collection0 = connection_Request0.data();
      Connection connection0 = httpConnection0.data(collection0);
      String string1 = "9T![+I";
      String string2 = httpConnection_Request0.header(string1);
      Connection.Request connection_Request1 = httpConnection_Request1.followRedirects(httpConnection_Request1.parserDefined);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test93()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.CONTENT_TYPE = httpConnection0.MULTIPART_FORM_DATA;
      String string0 = "(SjVmEt";
      String string1 = "";
      HttpConnection.CONTENT_ENCODING = string1;
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string2 = HttpConnection.encodeUrl(string0);
      boolean boolean1 = true;
      Connection connection1 = httpConnection0.followRedirects(boolean1);
      String string3 = "a";
      String string4 = "";
      Connection connection2 = connection1.cookie(string3, string4);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string5 = "b70.WHx?JG'9Is)\"";
      String string6 = httpConnection_Response0.getHeaderCaseInsensitive(httpConnection0.CONTENT_TYPE);
      boolean boolean2 = httpConnection_Response0.hasHeaderWithValue(string5, HttpConnection.CONTENT_TYPE);
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection3 = httpConnection0.cookies(map0);
      httpConnection0.req = httpConnection_Response0.req;
      String string7 = null;
      String string8 = "rT[*-|Baw";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string7, string8);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test94()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, httpConnection0.MULTIPART_FORM_DATA);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = null;
      String string1 = hashMap0.put(httpConnection0.FORM_URL_ENCODED, string0);
      // Undeclared exception!
      try { 
        httpConnection0.cookies(hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test95()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "";
      httpConnection_Response0.charset = string0;
      int int0 = 1347;
      httpConnection_Response0.numRedirects = int0;
      HttpConnection.Response.sslSocketFactory = httpConnection_Response0.sslSocketFactory;
      String string1 = httpConnection_Response0.charset();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test96()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "u@u";
      int int0 = 38;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request1.parser);
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreContentType(boolean0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string1 = null;
      HttpConnection.Response.writePost(connection_Request0, pipedOutputStream0, string1);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test97()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HttpConnection.Response.LOCATION = httpConnection_Response0.charset;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "%0d|_i5";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      String string1 = "User agent must not be null";
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = hashMap0.put(string1, linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      List<String> list2 = hashMap0.put(httpConnection_Response0.charset, list1);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Response0.numRedirects);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
