/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 16:29:35 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "aDI";
      HttpConnection.FORM_URL_ENCODED = string0;
      Connection connection0 = httpConnection0.url(uRL0);
      int int0 = 30;
      Connection connection1 = httpConnection0.maxBodySize(int0);
      Connection connection2 = httpConnection0.url(uRL0);
      int int1 = 671;
      Connection connection3 = httpConnection0.maxBodySize(int1);
      boolean boolean0 = false;
      Connection connection4 = httpConnection0.ignoreContentType(boolean0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>(httpConnection_Request0.data);
      String string1 = "+yA9zr&_*,a(52K|n";
      String string2 = "";
      TextNode textNode0 = new TextNode(string1, string2);
      int int2 = 987;
      Object object0 = linkedList0.clone();
      try { 
        HttpConnection.Response.execute(((HttpConnection) connection1).req);
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, String> map0 = null;
      httpConnection_Request0.headers = map0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string0 = "YTlxS(F|Emw}";
      httpConnection_KeyVal0.value = string0;
      int int0 = 55;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      stringArray0[0] = httpConnection_Request0.postDataCharset;
      stringArray0[1] = string0;
      Connection connection0 = httpConnection0.data(stringArray0);
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(httpConnection_Request1.ignoreHttpErrors);
      String string1 = httpConnection_Request0.postDataCharset();
      Connection connection1 = httpConnection0.ignoreContentType(httpConnection_Request1.parserDefined);
      String string2 = "OlOOX53}\\#Y";
      Connection connection2 = connection1.userAgent(string2);
      String string3 = "Content-Disposition: form-data; name=\"";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string3);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test002()  throws Throwable  {
      String string0 = null;
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      String string2 = "org.jsoup.helper.HttpConnection$Request";
      httpConnection_Request0.postDataCharset = string2;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection httpConnection1 = new HttpConnection();
      Connection.Request connection_Request1 = httpConnection1.request();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test003()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-106);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-112);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      String string0 = "GET";
      String string1 = httpConnection_Request0.cookie(string0);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      EvoSuiteFile evoSuiteFile0 = null;
      String string2 = "'<zyu>kJ/_XP>S 9";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      String string3 = "\n";
      int int0 = 0;
      URL uRL0 = MockURL.getFileExample();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = "O4AreICQ>[plOQ?";
      boolean boolean1 = httpConnection_Response0.hasHeader(string4);
      int int1 = httpConnection_Response0.statusCode();
      String string5 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean2 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean2);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test004()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      String string0 = "$VALUES";
      String string1 = "";
      Connection connection1 = httpConnection0.cookie(string0, string1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string2 = "";
      int int0 = (-1773);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      InetAddress inetAddress0 = null;
      int int1 = (-5019);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int1);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-5019
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "sPDwfgJaI>1rM";
      String string1 = "V6shmqD";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = "W(1~t]pER";
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(httpConnection_Request0.parserDefined);
      boolean boolean0 = true;
      Connection.Request connection_Request1 = connection_Request0.ignoreHttpErrors(boolean0);
      String string3 = HttpConnection.Response.setOutputContentType(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test006()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "sI/muM?9S|%[rFuH^mx";
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      Connection.Request connection_Request0 = httpConnection_Request3.removeHeader(httpConnection_Request1.postDataCharset);
      Parser parser0 = httpConnection_Request3.parser();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      boolean boolean0 = httpConnection_Request1.followRedirects();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection0 = httpConnection0.cookies(map0);
      HttpConnection.Response.initUnSecureTSL();
      httpConnection_Response0.req = ((HttpConnection) connection0).req;
      String string1 = "zrf'/azntw/}b51j!.a";
      // Undeclared exception!
      try { 
        connection0.url(string1);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: zrf'/azntw/}b51j!.a
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test007()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = null;
      Connection connection0 = httpConnection0.parser(parser0);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.validateTLSCertificates(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      httpConnection_Response1.byteData = httpConnection_Response0.byteData;
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(httpConnection_Request0.proxy);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-106);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-112);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      String string0 = "GET";
      String string1 = httpConnection_Request0.cookie(string0);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset, (InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.close();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = "\n";
      int int0 = 0;
      httpConnection_KeyVal0.stream = (InputStream) byteArrayInputStream0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string2, int0);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request3.url = uRL0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout((int) byteArray0[4]);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string3 = "O4AreICQ>[plOQ?";
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(byte0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test009()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = (-1480880883);
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "set-cookie";
      httpConnection_Response0.numRedirects = int0;
      EvoSuiteURL evoSuiteURL0 = null;
      boolean boolean0 = httpConnection_Response0.hasHeaderWithValue(string0, string0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.getRequestCookieString(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = null;
      int int0 = 44;
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 20;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test012()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test013()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.timeout(int0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = httpConnection_Request0.postDataCharset();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection1 = httpConnection0.method(connection_Method0);
      int int1 = httpConnection_Request0.maxBodySize();
  }

  @Test(timeout = 11000)
  public void test014()  throws Throwable  {
      String string0 = "KL$Uz0Y2k";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueNot";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.value();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
  }

  @Test(timeout = 11000)
  public void test016()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.initUnSecureTSL();
      String string0 = "";
      HttpConnection.Response.LOCATION = string0;
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      String string1 = null;
      String string2 = "-v+$";
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test018()  throws Throwable  {
      String string0 = "^\"";
      // Undeclared exception!
      try { 
        HttpConnection.connect(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ^\"
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test019()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      String string0 = "R|SM_";
      String string1 = "; ";
      boolean boolean0 = httpConnection_Request0.hasHeaderWithValue(string0, string1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      boolean boolean1 = httpConnection_Request1.ignoreContentType();
  }

  @Test(timeout = 11000)
  public void test020()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1192;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(httpConnection_Request0.timeoutMilliseconds);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request1.postDataCharset, (InputStream) pipedInputStream0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request0.parser);
      String string0 = HttpConnection.Response.setOutputContentType(httpConnection_Request4);
  }

  @Test(timeout = 11000)
  public void test021()  throws Throwable  {
      HttpConnection.Response.initUnSecureTSL();
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(boolean0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test023()  throws Throwable  {
      String string0 = "YDr6T6";
      String string1 = "html";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = new HttpConnection.KeyVal();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection0.header(string0, string1);
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test025()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "p";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      boolean boolean0 = httpConnection_Request1.validateTLSCertificates();
  }

  @Test(timeout = 11000)
  public void test026()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = (-28);
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "O]{=PU";
      Connection connection0 = httpConnection0.referrer(string0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(httpConnection0.CONTENT_ENCODING);
      String string1 = "org.jsoup.helper.HttpConnection";
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(string1);
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.inputStream(httpConnection_KeyVal1.stream);
      String string2 = "";
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal3.value(string2);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      Connection.Request connection_Request0 = httpConnection_Request3.maxBodySize(httpConnection_Request1.timeoutMilliseconds);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(connection_Request0, outputStream0, httpConnection_Request1.postDataCharset);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 11000)
  public void test029()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "sI/muM?9S|%[rFuH^mx";
      int int0 = 4091;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request0.proxy);
      Connection.Request connection_Request0 = httpConnection_Request3.removeHeader(httpConnection_Request1.postDataCharset);
      Parser parser0 = httpConnection_Request3.parser();
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      boolean boolean0 = httpConnection_Request1.followRedirects();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection0 = httpConnection0.cookies(map0);
  }

  @Test(timeout = 11000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.req;
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      String string0 = "Only http & https protocols supported";
      Connection connection1 = httpConnection0.referrer(string0);
  }

  @Test(timeout = 11000)
  public void test031()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      HttpConnection.Response.writePost(connection_Request0, byteArrayOutputStream0, httpConnection0.FORM_URL_ENCODED);
      String string0 = "+<}84U(r";
      Tag tag0 = Tag.valueOf(string0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, httpConnection0.CONTENT_ENCODING, attributes1);
      List<Connection.KeyVal> list0 = formElement0.formData();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) list0);
  }

  @Test(timeout = 11000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      Connection connection0 = httpConnection0.method(connection_Method0);
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      HttpURLConnection httpURLConnection0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.createHeaderMap(httpURLConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.cookie(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test034()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      int int0 = 78;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      httpConnection_Request1.timeoutMilliseconds = httpConnection_Request0.timeoutMilliseconds;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      int int1 = 57;
      Connection.Request connection_Request1 = httpConnection_Request1.maxBodySize(int1);
      String string1 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request0.cookie(string0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test035()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "default";
      int int0 = 10;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      boolean boolean0 = false;
      httpConnection_Request2.validateTSLCertificates = boolean0;
      String string1 = "zRf'/AZNtw/}b51J!.a";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string1, string1);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout(httpConnection_Request1.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(httpConnection_Request3.proxy);
      boolean boolean1 = httpConnection_Request2.hasCookie(httpConnection_Request5.postDataCharset);
      String string2 = httpConnection_Request3.cookie(httpConnection_KeyVal0.key);
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request5.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document(httpConnection_KeyVal0.value);
      Map<String, String> map0 = document0.dataset();
      String string3 = httpConnection_Request4.getHeaderCaseInsensitive(string1);
      List<Node> list0 = document0.childNodes();
      String string4 = "%22";
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string4, httpConnection0.FORM_URL_ENCODED);
      Connection connection0 = httpConnection0.cookies(map0);
      String string5 = ";Q&d]7(o :$yZ";
      HttpConnection.Request httpConnection_Request7 = httpConnection_Request0.proxy(string5, httpConnection_Request5.timeoutMilliseconds);
      HttpConnection.Request httpConnection_Request8 = httpConnection_Request6.proxy(httpConnection_Request3.proxy);
      boolean boolean2 = true;
      Connection connection1 = httpConnection0.followRedirects(boolean2);
  }

  @Test(timeout = 11000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreHttpErrors(boolean0);
      HttpConnection.Response.initUnSecureTSL();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test037()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test038()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 2808;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(httpConnection_Request1.ignoreContentType);
      int int1 = (-134);
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy(httpConnection_Request0.postDataCharset, int1);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-134
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      httpConnection0.res = connection_Response0;
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string0 = "option";
      String string1 = "\"";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = httpConnection_Request2.ignoreContentType();
      int int1 = (-2304);
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int1);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Header name must not be null";
      String string1 = "selected";
      Connection connection0 = httpConnection0.header(string0, string1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      String string2 = "#comment";
      int int1 = 2120;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(string2, int1);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      String string3 = "head";
      String string4 = "E~Dd~\\@";
      boolean boolean0 = httpConnection_Request3.hasHeaderWithValue(string3, string4);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      httpConnection_Request3.headers = (Map<String, String>) hashMap0;
      String string5 = "QhbK}h,mG2!Iz";
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(string5, int0);
  }

  @Test(timeout = 11000)
  public void test041()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(boolean0);
      int int0 = 0;
      Connection.Request connection_Request1 = httpConnection_Request0.maxBodySize(int0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test043()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "#";
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      httpConnection_KeyVal0.key = string1;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.inputStream(httpConnection_KeyVal1.stream);
      String string2 = "J1_\\}2+\\?*z(";
      String string3 = "3!U=%Z";
      String string4 = "^r";
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string3, string4);
      httpConnection_KeyVal0.key = string2;
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "zU[M#b9FoUZ{M:g>";
      String string6 = HttpConnection.encodeUrl(httpConnection0.MULTIPART_FORM_DATA);
      httpConnection_KeyVal2.stream = httpConnection_KeyVal0.stream;
      Connection connection0 = httpConnection0.userAgent(string5);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test044()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      String string0 = "iTt{8MY*Zvnsx@";
      Connection.Request connection_Request0 = httpConnection_Request0.removeCookie(string0);
      // Undeclared exception!
      try { 
        httpConnection_Request1.proxy(string0, httpConnection_Request0.maxBodySizeBytes);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:1048576
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
  }

  @Test(timeout = 11000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = ";u+";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // ;u+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)70;
      byteArray0[2] = byte2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        httpConnection0.data(string0, string0, (InputStream) byteArrayInputStream0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test049()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "Can't create unsecure trust manager";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      String string1 = httpConnection_KeyVal1.toString();
      // Undeclared exception!
      try { 
        httpConnection_KeyVal1.key(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test050()  throws Throwable  {
      String string0 = "Bs:fF hfs6FQoS";
      String string1 = "[%s]";
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)70;
      byteArray0[0] = byte0;
      int int0 = 1;
      int int1 = (-305);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1, (InputStream) pushbackInputStream0);
      String string2 = "";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) byteArrayInputStream0);
      InputStream inputStream0 = httpConnection_KeyVal2.inputStream();
  }

  @Test(timeout = 11000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      String string0 = "";
      String string1 = "[x&4]%";
      HttpConnection.CONTENT_ENCODING = string1;
      HttpConnection.CONTENT_ENCODING = string0;
      String string2 = "org.jsoup.helper.HttpConnection$Response$2";
      Connection connection1 = httpConnection0.userAgent(string2);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test052()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = "gd&&N#*8&9611iAj";
      httpConnection_Response0.charset = string0;
      int int0 = httpConnection_Response0.statusCode();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      String string1 = "summary";
      String string2 = "Data value must not be null";
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string1, string2);
      int int1 = (-2960);
      // Undeclared exception!
      try { 
        httpConnection_Request1.timeout(int1);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test053()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.toString();
      String string1 = "";
      httpConnection_KeyVal0.value = string1;
      String string2 = httpConnection_KeyVal0.toString();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data(string1, httpConnection_KeyVal0.key, httpConnection_KeyVal0.stream);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = null;
      Connection connection0 = httpConnection0.proxy(proxy0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(httpConnection_Request0.timeoutMilliseconds);
      String string0 = "Gl4&;|k7ml";
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(string0);
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test055()  throws Throwable  {
      String string0 = "c^HUq=\\C!9)c7\\y.qbA";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = HttpConnection.encodeUrl(httpConnection0.CONTENT_TYPE);
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection0 = httpConnection0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection0.url(string0);
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: c^HUq=\\C!9)c7\\y.qbA
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "ujz.(OTyh.|";
      HttpConnection.FORM_URL_ENCODED = string0;
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection.Request connection_Request0 = httpConnection_Response1.req;
      Connection connection0 = httpConnection0.request(connection_Request0);
      String string1 = "8_X*Y@g";
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 11000)
  public void test057()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "\r\n\r\n";
      int int0 = 484;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      String string1 = HttpConnection.Response.setOutputContentType(httpConnection_Request2);
  }

  @Test(timeout = 11000)
  public void test058()  throws Throwable  {
      String string0 = "";
      String string1 = HttpConnection.encodeUrl(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1600;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      int int1 = 31;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.postDataCharset, int1);
      boolean boolean0 = false;
      httpConnection_Request2.validateTLSCertificates(boolean0);
      String string2 = "canvas";
      Connection.Request connection_Request0 = httpConnection_Request1.cookie(string2, string2);
      String string3 = "wbr";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create(string0, string3);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "OpZaQ!f";
      String string1 = "Fu;aK:$bRAr#";
      Connection connection0 = httpConnection0.cookie(string0, string1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection0.MULTIPART_FORM_DATA, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int0 = 200;
      // Undeclared exception!
      try { 
        httpConnection_Request1.proxy(httpConnection_Response0.contentType, int0);
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test060()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test061()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      // Undeclared exception!
      try { 
        httpConnection0.referrer(httpConnection_KeyVal0.key);
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test062()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "video";
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      String string1 = "UTF-";
      // Undeclared exception!
      try { 
        httpConnection_Request3.postDataCharset(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // UTF-
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test063()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string0 = "PGYT1aE'uE";
      String string1 = httpConnection_Request0.header(string0);
      String string2 = " > ";
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string2, httpConnection_Request0.timeoutMilliseconds);
      String string3 = mockInetSocketAddress0.getHostName();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request0, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test064()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 930;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request2.postDataCharset, httpConnection_Request1.postDataCharset, (InputStream) pipedInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      Proxy proxy0 = httpConnection_Request3.proxy();
  }

  @Test(timeout = 11000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.contentType = httpConnection0.MULTIPART_FORM_DATA;
      Map<String, String> map0 = httpConnection_Response0.cookies();
      httpConnection_Response0.headers = map0;
      httpConnection_Response0.contentType = httpConnection0.CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test066()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "rt";
      String string1 = "Lx2=B}[^=+ p/ FI";
      Connection.Request connection_Request0 = httpConnection_Request0.cookie(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      int int0 = 2102;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(httpConnection_Request0.postDataCharset);
      String string2 = ":5@uxaJ1$;>`h|p";
      String string3 = httpConnection_Request0.getHeaderCaseInsensitive(string2);
      String string4 = httpConnection_KeyVal1.toString();
      String string5 = httpConnection_KeyVal1.value();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      String string0 = "J[xK#5PjVn";
      String string1 = "y+Nl/15:Y8^E>|";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)17;
      byteArray0[1] = byte1;
      byte byte2 = (byte)47;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-12);
      byteArray0[3] = byte3;
      byte byte4 = (byte)116;
      byteArray0[4] = byte4;
      try { 
        pipedOutputStream0.write(byteArray0);
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test068()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.postDataCharset, httpConnection_Request1.timeoutMilliseconds);
      Connection.Request connection_Request0 = httpConnection_Request3.ignoreContentType(httpConnection_Request2.ignoreHttpErrors);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal0);
      boolean boolean0 = httpConnection_Request4.ignoreContentType();
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request1.parser(httpConnection_Request2.parser);
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "+G";
      int int1 = 0;
      Connection connection0 = httpConnection0.proxy(string0, int1);
  }

  @Test(timeout = 11000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.validateTLSCertificates(boolean0);
      Connection connection1 = httpConnection0.ignoreHttpErrors(boolean0);
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      String string0 = "";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.createConnection(httpConnection_Response0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      URL uRL0 = MockURL.getFtpExample();
      Connection connection0 = httpConnection0.url(uRL0);
      int int0 = 6;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      httpConnection0.res = (Connection.Response) httpConnection_Response1;
      Connection connection1 = httpConnection0.proxy(string0, int0);
      try { 
        HttpConnection.Response.createConnection(httpConnection0.req);
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test071()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = httpConnection0.FORM_URL_ENCODED;
      String string0 = "";
      stringArray0[1] = string0;
      String string1 = "";
      stringArray0[2] = string1;
      stringArray0[3] = httpConnection0.CONTENT_ENCODING;
      stringArray0[4] = httpConnection0.CONTENT_TYPE;
      stringArray0[5] = httpConnection0.CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 0;
      Connection connection0 = httpConnection0.maxBodySize(int0);
      String[] stringArray0 = new String[0];
      Connection connection1 = httpConnection0.data(stringArray0);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      InetAddress inetAddress0 = MockInetAddress.getByName(httpConnection0.CONTENT_TYPE);
      int int1 = 495;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int1);
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address Content-Type/200.42.42.0:495
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 11000)
  public void test073()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1517;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      boolean boolean0 = httpConnection_Request1.ignoreHttpErrors();
      String string0 = "V\"Td\"fE$&t5o:2=4gQ ";
      httpConnection_Request1.ignoreContentType = httpConnection_Request0.ignoreHttpErrors;
      int int1 = (-1);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(int1);
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "BFiTvACh*H3+w.k`";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)6;
      byteArray0[1] = byte1;
      byte byte2 = (byte)68;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      int int0 = (-1528);
      int int1 = (-882);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, int0, int1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Connection connection0 = httpConnection0.data(string0, string0, (InputStream) dataInputStream0);
  }

  @Test(timeout = 11000)
  public void test075()  throws Throwable  {
      String string0 = null;
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      String string2 = "org.jsoup.helper.HttpConnection$Request";
      httpConnection_Request0.postDataCharset = string2;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.followRedirects(httpConnection_Request0.validateTSLCertificates);
  }

  @Test(timeout = 11000)
  public void test076()  throws Throwable  {
      String string0 = "Request must not be null";
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 276;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      String string2 = "p";
      int int1 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string2, int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      boolean boolean0 = httpConnection_Request4.followRedirects();
  }

  @Test(timeout = 11000)
  public void test077()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      httpConnection_Request0.parser = parser0;
      String string0 = "O|g(Qe(Ap5xm>CJej";
      String string1 = "Only http & https protocols supported";
      String string2 = "ilaM:7WOox-[G+E)U";
      List<Node> list0 = Parser.parseXmlFragment(string1, string2);
      Document document0 = parser0.parseInput(string0, string0);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string3 = httpConnection_KeyVal0.key();
  }

  @Test(timeout = 11000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = (-3710);
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      // Undeclared exception!
      try { 
        httpConnection0.timeout(int0);
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test079()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "9_z@[q/\\=7";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.header(string0, string0);
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      Proxy proxy0 = httpConnection_Request0.proxy();
      int int0 = (-1769);
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize(int0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test080()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string0 = httpConnection_Response1.contentType();
  }

  @Test(timeout = 11000)
  public void test081()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-106);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-112);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      String string0 = "GET";
      String string1 = httpConnection_Request0.cookie(string0);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset, (InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.close();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = "\n";
      int int0 = 0;
      httpConnection_KeyVal0.stream = (InputStream) byteArrayInputStream0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string2, int0);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request3.url = uRL0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout((int) byteArray0[4]);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = "O4AreICQ>[plOQ?";
      boolean boolean0 = httpConnection_Response0.hasHeader(string3);
      int int1 = httpConnection_Response0.statusCode();
      String string4 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "o)3i;|yFv-";
      int int0 = (-1369);
      // Undeclared exception!
      try { 
        httpConnection0.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1369
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test083()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, String> map0 = null;
      httpConnection_Request0.headers = map0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      String string0 = "YTlxS(F|Emw}";
      httpConnection_KeyVal0.value = string0;
      int int0 = 55;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      stringArray0[0] = httpConnection_Request0.postDataCharset;
      stringArray0[1] = string0;
      Connection connection0 = httpConnection0.data(stringArray0);
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(httpConnection_Request1.ignoreHttpErrors);
      String string1 = httpConnection_Request0.postDataCharset();
      Connection connection1 = httpConnection0.ignoreContentType(httpConnection_Request1.parserDefined);
      String string2 = "Content-Disposition: form-data; name=\"";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string2);
      // Undeclared exception!
      try { 
        httpConnection0.get();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test084()  throws Throwable  {
      HostnameVerifier hostnameVerifier0 = HttpConnection.Response.getInsecureVerifier();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection0.req);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = HttpConnection.encodeMimeName(httpConnection0.CONTENT_ENCODING);
      Collection<Connection.KeyVal> collection0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test086()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 55;
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response1);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(httpConnection0.MULTIPART_FORM_DATA, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      boolean boolean0 = httpConnection_Request2.followRedirects();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = httpConnection_KeyVal0.key();
      String string1 = ";Dr3)>B0BQ7(";
      File file0 = MockFile.createTempFile(httpConnection0.CONTENT_TYPE, string1);
      String string2 = "user-agent";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, string2);
      } catch(Throwable e) {
         //
         // user-agent
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test087()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Request connection_Request0 = httpConnection_Response0.req;
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(connection_Request0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test088()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "Cookie value must not be null";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string0);
      String string1 = httpConnection_KeyVal1.key();
  }

  @Test(timeout = 11000)
  public void test089()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 930;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      int int1 = httpConnection_Request1.timeout();
  }

  @Test(timeout = 11000)
  public void test090()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = ":5@uxaj1$;>`h|p";
      HttpConnection.Response.LOCATION = string0;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      HttpConnection.Response.initUnSecureTSL();
  }

  @Test(timeout = 11000)
  public void test091()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-106);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-112);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      String string0 = "GET";
      String string1 = httpConnection_Request0.cookie(string0);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset, (InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.close();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = "\n";
      int int0 = 0;
      httpConnection_KeyVal0.stream = (InputStream) byteArrayInputStream0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string2, int0);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request3.url = uRL0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout((int) byteArray0[4]);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = "O4AreICQ>[plOQ?";
      boolean boolean0 = httpConnection_Response0.hasHeader(string3);
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie(httpConnection_Request5.postDataCharset);
      int int1 = httpConnection_Response0.statusCode();
      String string4 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(byte0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test092()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Request0.scanHeaders(httpConnection_Response0.contentType);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 11000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response.sslSocketFactory = httpConnection_Response0.sslSocketFactory;
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      String string0 = "";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Collection<String> collection0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, collection0, locale_FilteringMode0);
      List<String> list1 = hashMap0.put(string0, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      OutputStream outputStream0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.Response.writePost(httpConnection_Response0.req, outputStream0, httpConnection_Response0.charset);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test094()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = null;
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test095()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      httpConnection_Request0.parser = parser0;
      String string0 = "O|g(Qe(Ap5xm>CJej";
      String string1 = "Only http & https protocols supported";
      List<Node> list0 = Parser.parseXmlFragment(string1, string0);
      Document document0 = Document.createShell(httpConnection_Request0.postDataCharset);
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(boolean0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string2 = "d5f";
      httpConnection_KeyVal0.key = string2;
      String string3 = httpConnection_KeyVal0.key();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string4 = httpConnection_Response0.charset();
      HttpURLConnection httpURLConnection0 = null;
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection0.res;
      // Undeclared exception!
      try { 
        httpConnection_Response0.setupFromConnection(httpURLConnection0, httpConnection_Response1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "o)3i;|yFv-";
      int int0 = (-1369);
      String string1 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent(string1);
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "6~";
      HttpConnection.MULTIPART_FORM_DATA = string0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Map<String, String> map0 = null;
      httpConnection_Response0.cookies = map0;
      Map<String, String> map1 = httpConnection_Response0.headers();
      String string1 = "#L+3-3-3#`@;rlHMs";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string1);
      } catch(IllegalCharsetNameException e) {
         //
         // #L+3-3-3#`@;rlHMs
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test098()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "wep11e/Vz8%Ve*PJ*";
      Connection connection0 = httpConnection0.data(string0, string0);
  }

  @Test(timeout = 11000)
  public void test099()  throws Throwable  {
      String string0 = "KL$Uz0Y2k";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string0);
      String string1 = "org.jsoup.select.Evaluator$AttributeWithValueNot";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(string1);
      String string2 = httpConnection_KeyVal1.value();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data(httpConnection_KeyVal1.value, httpConnection_KeyVal1.key);
      boolean boolean0 = true;
      Connection connection1 = httpConnection0.followRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test100()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Map<String, String> map0 = null;
      httpConnection_Request0.headers = map0;
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      httpConnection_KeyVal0.value = httpConnection_KeyVal0.key;
      int int0 = 55;
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(int0);
      String[] stringArray0 = new String[2];
      SSLSocketFactory sSLSocketFactory0 = HttpConnection.Response.sslSocketFactory;
      HttpConnection.Response.sslSocketFactory = sSLSocketFactory0;
      stringArray0[0] = httpConnection_Request0.postDataCharset;
      stringArray0[1] = httpConnection_KeyVal0.value;
      Connection.Request connection_Request1 = httpConnection_Request0.ignoreContentType(httpConnection_Request1.ignoreHttpErrors);
      String string0 = httpConnection_Request0.postDataCharset();
      String string1 = "Content-Disposition: form-data; name=\"";
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string1);
      boolean boolean0 = false;
      Connection.Request connection_Request2 = httpConnection_Request1.followRedirects(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data(map0);
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test101()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "referer";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string0);
      } catch(IllegalCharsetNameException e) {
         //
         // referer
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 11000)
  public void test102()  throws Throwable  {
      String string0 = null;
      String string1 = HttpConnection.encodeMimeName(string0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = false;
      String string2 = "org.jsoup.helper.HttpConnection$Request";
      httpConnection_Request0.postDataCharset = string2;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      String string3 = "&i ~sRuY\\Wf]+[A;";
      HttpConnection.CONTENT_TYPE = string3;
      Connection connection0 = httpConnection0.followRedirects(httpConnection_Request0.validateTSLCertificates);
      boolean boolean1 = httpConnection_Request0.followRedirects();
  }

  @Test(timeout = 11000)
  public void test103()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Connection connection0 = httpConnection0.followRedirects(boolean0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.contentType = httpConnection0.MULTIPART_FORM_DATA;
      Map<String, String> map0 = httpConnection_Response0.cookies();
      httpConnection_Response0.headers = map0;
      httpConnection_Response0.contentType = httpConnection0.CONTENT_ENCODING;
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test104()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "sPDwfgJaI>1rM";
      String string1 = "V6shmqD";
      String string2 = "QVe58ZbyE7[<";
      String string3 = httpConnection_Request0.getHeaderCaseInsensitive(string2);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection_Request0.postDataCharset);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response(httpConnection_Response1);
      String string4 = "*!nT\"[^\"[S6_yK\"";
      // Undeclared exception!
      try { 
        httpConnection_Request1.postDataCharset(string4);
      } catch(IllegalCharsetNameException e) {
         //
         // *!nT\"[^\"[S6_yK\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test105()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      int int0 = 2832;
      int int1 = (-206);
      String string0 = "";
      String string1 = "*]";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int2 = 47;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(int2);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      // Undeclared exception!
      try { 
        HttpConnection.Response.serialiseRequestUrl(httpConnection_Request3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test106()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(httpConnection_Request0.proxy);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(httpConnection_Request0.parser);
      boolean boolean0 = httpConnection_Request3.ignoreHttpErrors();
  }

  @Test(timeout = 11000)
  public void test107()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "sPDwfgJaI>1rM";
      String string1 = "V6shmqD";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string0, string1);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection_Request0.postDataCharset);
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create(httpConnection_KeyVal1.value, httpConnection_KeyVal1.key);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = HttpConnection.Response.setOutputContentType(httpConnection_Request1);
  }

  @Test(timeout = 11000)
  public void test108()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "TJDby";
      int int0 = 2460;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(httpConnection_Request0.parser);
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(httpConnection_Request1.proxy);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string1 = "lY-}ieBn^GY]oXBGaB";
      Map.Entry<String, String> map_Entry0 = httpConnection_Request3.scanHeaders(string1);
      httpConnection_Request1.validateTSLCertificates = boolean0;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request3, httpConnection_Response0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test109()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = httpConnection_Request0.parser();
      char[] charArray0 = new char[4];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = '$';
      charArray0[1] = char1;
      char char2 = '=';
      charArray0[2] = char2;
      char char3 = '2';
      charArray0[3] = char3;
      HttpConnection httpConnection0 = new HttpConnection();
      boolean boolean0 = true;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      String string0 = "waO9t";
      int int0 = (-2211);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response(httpConnection_Response0);
      String string1 = httpConnection_Response1.statusMessage();
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2211
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test110()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "maxSize must be 0 (unlimited) or larger";
      String string1 = httpConnection_Request0.getHeaderCaseInsensitive(string0);
      String string2 = "sPDwfgJaI>1rM";
      String string3 = "V6shmqD";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(string2, string3);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(httpConnection_Request0.postDataCharset);
      Connection.Request connection_Request0 = httpConnection_Request0.postDataCharset(httpConnection_Request0.postDataCharset);
      String string4 = HttpConnection.Response.setOutputContentType(connection_Request0);
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      int int0 = (-2045);
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test111()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = true;
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(boolean0);
      String string0 = HttpConnection.Response.getRequestCookieString(connection_Request0);
  }

  @Test(timeout = 11000)
  public void test112()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = new HttpConnection.KeyVal();
      String string0 = "#";
      String string1 = "org.jsoup.helper.HttpConnection$Response";
      httpConnection_KeyVal0.key = string1;
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(string0);
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.inputStream(httpConnection_KeyVal1.stream);
      String string2 = "J1_\\}2+\\?*z(";
      String string3 = "3!U=%Z";
      String string4 = "^r";
      HttpConnection.KeyVal httpConnection_KeyVal3 = HttpConnection.KeyVal.create(string3, string4);
      httpConnection_KeyVal0.key = string2;
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      HttpConnection httpConnection0 = new HttpConnection();
      String string5 = "zU[M#b9FoUZ{M:g>";
      String string6 = HttpConnection.encodeUrl(httpConnection0.MULTIPART_FORM_DATA);
      httpConnection_KeyVal2.stream = httpConnection_KeyVal0.stream;
      Connection connection0 = httpConnection0.userAgent(string5);
      URL uRL0 = MockURL.getFileExample();
      Connection connection1 = connection0.url(uRL0);
      try { 
        httpConnection0.get();
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 11000)
  public void test113()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, httpConnection_Response0.executed, httpConnection_Response0.executed, boolean0);
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.sslSocketFactory = httpConnection_Response0.sslSocketFactory;
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile1, httpConnection_Response0.executed, boolean2, boolean3);
      Connection connection0 = httpConnection0.ignoreHttpErrors(httpConnection_Response0.executed);
      Connection.Response connection_Response0 = httpConnection_Response0.header(httpConnection0.MULTIPART_FORM_DATA, httpConnection0.CONTENT_TYPE);
      String string0 = httpConnection_Response0.charset();
      Map<String, String> map0 = httpConnection_Response0.headers;
      Connection connection1 = httpConnection0.data(map0);
      Connection connection2 = httpConnection0.cookies(map0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = httpConnection0.MULTIPART_FORM_DATA;
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "maxSize must be 0 (unlimited) or larger";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Connection connection0 = httpConnection0.userAgent(string0);
      Connection.Method connection_Method0 = Connection.Method.GET;
      String string1 = "ly-}iebn^gy]oxbgab";
      HttpConnection.CONTENT_TYPE = string1;
      Connection connection1 = httpConnection0.method(connection_Method0);
      String string2 = "o";
      Connection connection2 = httpConnection0.userAgent(string2);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      String string3 = "($:0@em%dy4%|tz`%w";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset(string3);
      } catch(IllegalCharsetNameException e) {
         //
         // ($:0@em%dy4%|tz`%w
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 11000)
  public void test115()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-72);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-106);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-112);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      String string0 = "GET";
      String string1 = httpConnection_Request0.cookie(string0);
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request0.postDataCharset, httpConnection_Request0.postDataCharset, (InputStream) byteArrayInputStream0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.close();
      int int0 = byteArrayInputStream0.read();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal1);
      String string2 = "\n";
      int int1 = 0;
      httpConnection_KeyVal0.stream = (InputStream) byteArrayInputStream0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(string2, int1);
      URL uRL0 = MockURL.getFileExample();
      httpConnection_Request3.url = uRL0;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.timeout((int) byteArray0[4]);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string3 = "O4AreICQ>[plOQ?";
      boolean boolean0 = httpConnection_Response0.hasHeader(string3);
      int int2 = httpConnection_Response0.statusCode();
      String string4 = httpConnection_Response0.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response.serialiseRequestUrl(httpConnection_Request5);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test116()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Data map must not be null";
      int int0 = 885;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(string0, int0);
      String string1 = "'|?5{|J/FpTqq";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(httpConnection_Request1.postDataCharset, string1);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      int int1 = 125;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(int1);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(httpConnection_Request2.parser);
      String string2 = ";";
      boolean boolean0 = httpConnection_Request2.hasCookie(string2);
      String string3 = httpConnection_Request3.cookie(httpConnection_Request1.postDataCharset);
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(httpConnection_Request0.proxy);
      Connection.Request connection_Request0 = httpConnection_Request5.postDataCharset(httpConnection_KeyVal0.key);
      String string4 = "j1|is_T- ";
      String string5 = httpConnection_Request2.getHeaderCaseInsensitive(string4);
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data(httpConnection_Request1.data);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute((Connection.Request) httpConnection_Request2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
