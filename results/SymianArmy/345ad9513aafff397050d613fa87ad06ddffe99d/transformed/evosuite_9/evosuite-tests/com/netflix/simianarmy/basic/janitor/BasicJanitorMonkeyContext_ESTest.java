/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 18:53:46 GMT 2020
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.EnvironmentVariableCredentialsProvider;
import com.amazonaws.regions.RegionMetadata;
import com.amazonaws.regions.RegionUtils;
import com.amazonaws.services.opsworks.model.WeeklyAutoScalingSchedule;
import com.amazonaws.services.s3.AmazonS3Client;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.Resource;
import com.netflix.simianarmy.ResourceType;
import com.netflix.simianarmy.aws.AWSResource;
import com.netflix.simianarmy.aws.AWSResourceType;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.ASGJanitor;
import com.netflix.simianarmy.aws.janitor.EBSSnapshotJanitor;
import com.netflix.simianarmy.aws.janitor.EBSVolumeJanitor;
import com.netflix.simianarmy.aws.janitor.ImageJanitor;
import com.netflix.simianarmy.aws.janitor.InstanceJanitor;
import com.netflix.simianarmy.aws.janitor.LaunchConfigJanitor;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.crawler.EBSSnapshotJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSVolumeJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.rule.instance.OrphanedInstanceRule;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.BasicChaosMonkeyContext;
import com.netflix.simianarmy.basic.BasicConfiguration;
import com.netflix.simianarmy.basic.BasicSimianArmyContext;
import com.netflix.simianarmy.basic.conformity.BasicConformityMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorEmailBuilder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.client.edda.EddaClient;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailBuilder;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import com.netflix.simianarmy.janitor.Rule;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
          RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
          RegionUtils.initializeWithMetadata(regionMetadata0);
          JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
          Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
          Set<String> set1 = basicJanitorMonkeyContext0.getEnabledResourceSet();
          LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
          String string0 = "\\3HU>u}<oI]vG.P;";
          BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
          OrphanedInstanceRule orphanedInstanceRule0 = new OrphanedInstanceRule(basicJanitorMonkeyContext0.monkeyCalendar, basicJanitorMonkeyContext0.daysBeforeTermination, basicJanitorMonkeyContext0.daysBeforeTermination, basicJanitorMonkeyContext0.daysBeforeTermination);
          BasicJanitorRuleEngine basicJanitorRuleEngine1 = basicJanitorRuleEngine0.addRule(orphanedInstanceRule0);
          ClientConfiguration clientConfiguration0 = new ClientConfiguration();
          ClientConfiguration clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
          AWSClient aWSClient0 = new AWSClient(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, clientConfiguration1);
          InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
          AWSResource aWSResource0 = new AWSResource();
          AmazonS3Client amazonS3Client0 = new AmazonS3Client();
          // Undeclared exception!
          try { 
            amazonS3Client0.getObjectMetadata(aWSResource0.FIELD_MARK_TIME, basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY);
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"200.42.42.0:443\" \"connect,resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1051)
             // java.net.Socket.connect(Socket.java:584)
             // sun.security.ssl.SSLSocketImpl.connect(SSLSocketImpl.java:666)
             // org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:524)
             // org.apache.http.conn.ssl.SSLSocketFactory.connectSocket(SSLSocketFactory.java:403)
             // com.amazonaws.http.conn.ssl.SdkTLSSocketFactory.connectSocket(SdkTLSSocketFactory.java:128)
             // org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:177)
             // org.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:304)
             // org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:611)
             // org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:446)
             // org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:863)
             // org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:82)
             // org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:57)
             // com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:706)
             // com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:467)
             // com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:302)
             // com.amazonaws.services.s3.AmazonS3Client.invoke(AmazonS3Client.java:3785)
             // com.amazonaws.services.s3.AmazonS3Client.getObjectMetadata(AmazonS3Client.java:1050)
             // com.amazonaws.services.s3.AmazonS3Client.getObjectMetadata(AmazonS3Client.java:1027)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "}(]M[%4Ds,sjg";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      Rule rule0 = null;
      BasicJanitorRuleEngine basicJanitorRuleEngine1 = basicJanitorRuleEngine0.addRule(rule0);
      String string1 = "5]U0%g#Z-I+$k;";
      EnvironmentVariableCredentialsProvider environmentVariableCredentialsProvider0 = new EnvironmentVariableCredentialsProvider();
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      AWSClient aWSClient0 = new AWSClient(string1, environmentVariableCredentialsProvider0, clientConfiguration0);
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      List<AbstractJanitor> list0 = null;
      basicJanitorMonkeyContext0.janitors = list0;
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = (SimpleDBJanitorResourceTracker)basicJanitorMonkeyContext0.janitorResourceTracker;
      BasicCalendar basicCalendar0 = (BasicCalendar)basicJanitorMonkeyContext0.monkeyCalendar;
      Properties properties0 = new Properties();
      BasicConfiguration basicConfiguration0 = new BasicConfiguration(properties0);
      AWSResourceType aWSResourceType0 = AWSResourceType.EBS_SNAPSHOT;
      List<Resource> list1 = instanceJanitorCrawler0.resources((ResourceType) aWSResourceType0);
      MonkeyRecorder monkeyRecorder0 = null;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine1, instanceJanitorCrawler0, simpleDBJanitorResourceTracker0, basicCalendar0, basicConfiguration0, monkeyRecorder0);
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "com.amazonaws.services.simpleworkflow.model.DescribeDomainRequest";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      EBSVolumeJanitorCrawler eBSVolumeJanitorCrawler0 = new EBSVolumeJanitorCrawler(aWSClient0);
      BasicChaosMonkeyContext basicChaosMonkeyContext0 = new BasicChaosMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicChaosMonkeyContext0.configuration();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSVolumeJanitorCrawler0, basicJanitorMonkeyContext0.janitorResourceTracker, basicJanitorMonkeyContext0.monkeyCalendar, monkeyConfiguration0, monkeyRecorder0);
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      MonkeyRecorder monkeyRecorder1 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      MonkeyRecorder monkeyRecorder2 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "_z}a^? sO'mx,lp-x";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      String string1 = null;
      AWSCredentialsProvider aWSCredentialsProvider0 = null;
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      ClientConfiguration clientConfiguration1 = new ClientConfiguration(clientConfiguration0);
      AWSClient aWSClient0 = new AWSClient(string1, aWSCredentialsProvider0, clientConfiguration1);
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      String string2 = "Y}p|O+%\"c%x]~!x8Y";
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string2);
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSSnapshotJanitorCrawler0, janitorResourceTracker0, basicJanitorMonkeyContext0.monkeyCalendar, monkeyConfiguration0, simpleDBRecorder0);
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      String string0 = "simianarmy.janitor.rule.orphanedInstanceRule.opsworks.parentage";
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      basicJanitorMonkeyContext0.monkeyRegion = string0;
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      Set<String> set1 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      JanitorCrawler janitorCrawler1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      JanitorRuleEngine janitorRuleEngine1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      EBSSnapshotJanitor eBSSnapshotJanitor1 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      List<AbstractJanitor> list1 = basicJanitorMonkeyContext0.janitors();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      String string1 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      MonkeyRecorder monkeyRecorder1 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      String string2 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      List<AbstractJanitor> list1 = basicJanitorMonkeyContext0.janitors();
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      InstanceJanitor instanceJanitor1 = basicJanitorMonkeyContext0.getInstanceJanitor();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      basicJanitorMonkeyContext0.resetEventReport();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      String string0 = "";
      basicJanitorMonkeyContext0.exportCredentials(string0, string0);
      String string1 = basicJanitorMonkeyContext0.getEventReport();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      BasicJanitorEmailBuilder basicJanitorEmailBuilder0 = (BasicJanitorEmailBuilder)basicJanitorMonkeyContext0.janitorEmailBuilder;
      basicJanitorMonkeyContext0.janitorEmailBuilder = (JanitorEmailBuilder) basicJanitorEmailBuilder0;
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      JanitorEmailNotifier janitorEmailNotifier0 = null;
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier0;
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY = basicJanitorMonkeyContext0.monkeyRegion;
      BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY = basicJanitorMonkeyContext0.defaultEmail;
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorEmailNotifier janitorEmailNotifier0 = new JanitorEmailNotifier(janitorEmailNotifier_Context0);
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier0;
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      String string0 = "JqEs9}vw";
      boolean boolean0 = janitorEmailNotifier0.isValidEmail(string0);
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      basicJanitorMonkeyContext0.monkeyCalendar = monkeyCalendar1;
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getASGJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }
}
