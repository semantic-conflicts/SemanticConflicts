/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 18:10:41 GMT 2020
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.regions.RegionMetadata;
import com.amazonaws.regions.RegionUtils;
import com.amazonaws.services.cognitoidentity.model.GetOpenIdTokenForDeveloperIdentityRequest;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.Resource;
import com.netflix.simianarmy.aws.AWSResource;
import com.netflix.simianarmy.aws.janitor.ASGJanitor;
import com.netflix.simianarmy.aws.janitor.EBSSnapshotJanitor;
import com.netflix.simianarmy.aws.janitor.EBSVolumeJanitor;
import com.netflix.simianarmy.aws.janitor.ImageJanitor;
import com.netflix.simianarmy.aws.janitor.InstanceJanitor;
import com.netflix.simianarmy.aws.janitor.LaunchConfigJanitor;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.rule.asg.DummyASGInstanceValidator;
import com.netflix.simianarmy.aws.janitor.rule.asg.OldEmptyASGRule;
import com.netflix.simianarmy.basic.BasicSimianArmyContext;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.client.edda.EddaClient;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      String string0 = "@k-~5:%U.C{|c=SheJ";
      String string1 = "F0yZ8#Nrw@7\"&dI?o";
      basicJanitorMonkeyContext0.exportCredentials(string0, string1);
      String string2 = "*P='";
      basicJanitorMonkeyContext0.exportCredentials(string0, string2);
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext0.resourceTracker();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      JanitorResourceTracker janitorResourceTracker2 = basicJanitorMonkeyContext0.resourceTracker();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context1 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier;
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier0;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      basicJanitorMonkeyContext0.janitorResourceTracker = basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker;
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      int int0 = 0;
      DummyASGInstanceValidator dummyASGInstanceValidator0 = new DummyASGInstanceValidator();
      OldEmptyASGRule oldEmptyASGRule0 = new OldEmptyASGRule(basicJanitorMonkeyContext0.monkeyCalendar, int0, int0, dummyASGInstanceValidator0);
      BasicJanitorRuleEngine basicJanitorRuleEngine1 = basicJanitorRuleEngine0.addRule(oldEmptyASGRule0);
      AWSClient aWSClient0 = null;
      InstanceJanitorCrawler instanceJanitorCrawler0 = null;
      try {
        instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      String string0 = "com.amazonaws.services.ec2.model.DescribeSpotFleetInstancesRequest";
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      basicJanitorMonkeyContext0.monkeyRegion = string0;
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      Set<String> set1 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      Set<String> set2 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      InstanceJanitor instanceJanitor1 = basicJanitorMonkeyContext0.getInstanceJanitor();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      LaunchConfigJanitor launchConfigJanitor1 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context1 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      List<AbstractJanitor> list1 = basicJanitorMonkeyContext0.janitors();
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context2 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context3 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      InstanceJanitor instanceJanitor2 = basicJanitorMonkeyContext0.getInstanceJanitor();
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context4 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      EBSSnapshotJanitor eBSSnapshotJanitor1 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context5 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      JanitorResourceTracker janitorResourceTracker2 = basicJanitorMonkeyContext0.resourceTracker();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      String string0 = "@(mMA i\"qH<8Ql7";
      Stack<AbstractJanitor> stack0 = new Stack<AbstractJanitor>();
      basicJanitorMonkeyContext0.janitors = (List<AbstractJanitor>) stack0;
      // Undeclared exception!
      try { 
        aSGJanitor0.cleanupResources();
      } catch(RuntimeException e) {
         //
         // Unable to load AWS credentials from any provider in the chain
         //
         verifyException("com.amazonaws.auth.AWSCredentialsProviderChain", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      basicJanitorMonkeyContext0.janitorResourceTracker = basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker;
      String string0 = "%Jp<A8/;>&:9@W5";
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getInstanceJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = (SimpleDBJanitorResourceTracker)basicJanitorMonkeyContext0.janitorResourceTracker;
      basicJanitorMonkeyContext0.janitorResourceTracker = (JanitorResourceTracker) simpleDBJanitorResourceTracker0;
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext1 = new BasicJanitorMonkeyContext.BasicJanitorContext(basicJanitorMonkeyContext_BasicJanitorContext0.region, basicJanitorMonkeyContext_BasicJanitorContext0.ruleEngine, basicJanitorMonkeyContext_BasicJanitorContext0.crawler, basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker, basicJanitorMonkeyContext_BasicJanitorContext0.calendar, basicJanitorMonkeyContext_BasicJanitorContext0.config, basicJanitorMonkeyContext_BasicJanitorContext0.recorder);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      basicJanitorMonkeyContext0.janitorResourceTracker = basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker;
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getASGJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      Set<String> set1 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      basicJanitorMonkeyContext0.monkeyRegion = basicJanitorMonkeyContext_BasicJanitorContext0.region;
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      basicJanitorMonkeyContext0.monkeyRegion = basicJanitorMonkeyContext_BasicJanitorContext0.region;
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      basicJanitorMonkeyContext0.monkeyRegion = basicJanitorMonkeyContext_BasicJanitorContext0.region;
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }
}
