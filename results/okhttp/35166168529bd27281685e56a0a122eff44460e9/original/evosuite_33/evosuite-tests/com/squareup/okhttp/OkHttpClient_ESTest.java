/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:50:39 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.TunnelRequest;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.SocketAddress;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedHashSet0);
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "*|\\<B_S|";
      URL uRL1 = MockURL.URL(uRL0, string0);
      MockFile mockFile0 = new MockFile(string0);
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL1);
      long long0 = (-3442L);
      HttpResponseCache httpResponseCache0 = null;
      try {
        httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      } catch(IllegalArgumentException e) {
         //
         // maxSize <= 0
         //
         verifyException("com.squareup.okhttp.internal.DiskLruCache", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      String string0 = "(xD-Nf~*R*-{Zt";
      MockFile mockFile0 = new MockFile(string0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      int int0 = (-1112);
      long long0 = (-2006L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator1);
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(connectionPool0);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      boolean boolean0 = false;
      String string1 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("(xD-Nf~*R*-{Zt/journal");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      String string2 = "http.maxConnections";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        MockURL.URL(string1, string0, int0, string2, uRLStreamHandler0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "Upgrade";
      File file0 = MockFile.createTempFile(string0, string0);
      try { 
        MockFile.createTempFile(string0, string0, file0);
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator0).toString();
      OkHttpClient okHttpClient4 = okHttpClient3.setAuthenticator(okAuthenticator0);
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient5 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient5.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieHandler0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getFileExample();
      String string0 = "Ds";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)100;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-68);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-25);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-121);
      byteArray0[5] = byte3;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, string0);
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL2);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      RawHeaders rawHeaders0 = new RawHeaders();
      String string0 = "http/1.1";
      String string1 = "EnnrJF";
      String string2 = "hz";
      String string3 = "setUseSessionTickets";
      rawHeaders0.addSpdyRequestHeaders(string0, string0, string1, string2, string3);
      List<String> list0 = rawHeaders0.toNameValueBlock();
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieHandler0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getFileExample();
      String string0 = "Ds";
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)91;
      byteArray0[1] = byte1;
      byte byte2 = (byte)100;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-68);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-25);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-121);
      byteArray0[5] = byte5;
      boolean boolean2 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, string0);
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL2);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      RawHeaders rawHeaders0 = new RawHeaders();
      String string0 = "http/1.1";
      String string1 = "EVJF";
      String string2 = "hz";
      String string3 = "setUseSessionickets";
      rawHeaders0.addSpdyRequestHeaders(string0, string0, string1, string2, string3);
      List<String> list0 = rawHeaders0.toNameValueBlock();
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "&wi5ut";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      LinkedList<HttpCookie> linkedList0 = new LinkedList<HttpCookie>();
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "spdy/3";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieManager0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)94;
      byteArray0[0] = byte0;
      byte byte1 = (byte)126;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-94);
      byteArray0[3] = byte3;
      boolean boolean1 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      URL uRL0 = MockURL.getHttpExample();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        RawHeaders.fromBytes(inputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.Util", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "transports must not contain null";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string0, uRLStreamHandler0);
      OkResponseCache okResponseCache0 = null;
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL1, okHttpClient1, okResponseCache0, linkedHashSet0);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      String string1 = "https";
      String string2 = "v7g.fr:m:i";
      URL uRL2 = MockURL.URL(string1, string1, string2);
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL2);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        RawHeaders.fromNameValueBlock(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.http.RawHeaders", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      String string0 = "9";
      try { 
        MockURL.URL(string0);
      } catch(MalformedURLException e) {
         //
         // no protocol: 9
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieManager0);
      ResponseCache responseCache0 = okHttpClient3.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "";
      Locale locale0 = new Locale(string0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = (-2083);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okAuthenticator0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient2.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "https";
      int int0 = 0;
      String string1 = ";}(N1>s(_FyL-";
      TunnelRequest tunnelRequest0 = new TunnelRequest(string0, int0, string0, string1);
      RawHeaders rawHeaders0 = tunnelRequest0.getRequestHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: [user-agent, https, proxy-authorization, ;}(N1>s(_FyL-]
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient5 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      OkAuthenticator okAuthenticator0 = okHttpClient5.getAuthenticator();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(cookieManager0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      String string0 = "/k$w5I'sl5";
      MockFile mockFile0 = new MockFile(string0, string0);
      long long0 = 3146L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(httpResponseCache0);
      List<String> list0 = okHttpClient2.getTransports();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      String string0 = "fm_U8vre\\X|ZFlT+k";
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      List<String> list0 = okHttpClient0.getTransports();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      // Undeclared exception!
      try { 
        okHttpClient3.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieManager0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient5 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      URL uRL0 = null;
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient6 = okHttpClient5.setConnectionPool(connectionPool0);
      // Undeclared exception!
      try { 
        okHttpClient4.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient4 = okHttpClient3.setAuthenticator(okAuthenticator0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setConnectionPool(connectionPool0);
      Proxy proxy1 = okHttpClient5.getProxy();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "spdy/3";
      String string1 = "'69";
      MockFile mockFile0 = new MockFile(string0, string1);
      long long0 = 2393L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      String string2 = "-?LJ:%\"E~.U2N|";
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(responseCache0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient5 = okHttpClient4.setHostnameVerifier(hostnameVerifier0);
      HostnameVerifier hostnameVerifier1 = okHttpClient5.getHostnameVerifier();
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      URL uRL0 = MockURL.getFtpExample();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      Set<Route> set0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient1, okResponseCacheAdapter0, set0);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = okHttpClient4.getCookieHandler();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "spdy/3";
      String string1 = "'69";
      MockFile mockFile0 = new MockFile(string0, string1);
      long long0 = 2393L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      String string2 = "-?LJ:%\"E~.U2N|";
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      String string3 = "";
      int int0 = 786;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string2, string3, int0, string3, uRLStreamHandler0);
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL2 = MockURL.URL(uRL1, string3, uRLStreamHandler1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = okHttpClient4.getTransports();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list1);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
