/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 20:05:57 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.TunnelRequest;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(responseCache0);
      String string0 = "http";
      MockFile mockFile0 = new MockFile(string0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      ResponseCache.setDefault(responseCache0);
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      Proxy proxy1 = okHttpClient0.getProxy();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      OkHttpClient okHttpClient4 = okHttpClient0.setProxy(proxy1);
      boolean boolean0 = okHttpClient2.getFollowProtocolRedirects();
      ResponseCache responseCache1 = okHttpClient1.getResponseCache();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient5 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient5.open(uRL0);
      HttpURLConnection httpURLConnection1 = okHttpClient3.open(uRL0);
      HttpURLConnection httpURLConnection2 = okHttpClient1.open(uRL0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient3 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(proxy0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient6 = okHttpClient5.setAuthenticator(okAuthenticator0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        RawHeaders.fromNameValueBlock(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.internal.http.RawHeaders", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 509;
      long long0 = (-543L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      String string0 = "com.squareup.okhttp.internal.DiskLruCache$Snapshot";
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      int int1 = (-2811);
      String string1 = "https";
      String string2 = "UI/X'2> Xd$pp$-s. ";
      TunnelRequest tunnelRequest0 = new TunnelRequest(string0, int1, string1, string2);
      RawHeaders rawHeaders0 = tunnelRequest0.getRequestHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: [user-agent, https, proxy-authorization, UI/X'2> Xd$pp$-s.]
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okAuthenticator0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient5.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okAuthenticator0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      int int0 = 2000;
      long long0 = 1044L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient4 = okHttpClient0.setConnectionPool(connectionPool0);
      String string0 = ":version";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      String string0 = "ftp";
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse(string0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list1);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "%5#fPlMy";
      String string1 = "4U*";
      int int0 = 5269;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string0, uRLStreamHandler0);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: %5#fplmy
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFileExample();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, linkedHashSet0);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okAuthenticator0);
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(cookieManager0);
      List<String> list0 = okHttpClient0.getTransports();
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = linkedList0.pollLast();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 0;
      long long0 = (-3421L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      List<Connection> list0 = connectionPool0.getConnections();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(responseCache0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory0);
      ConnectionPool connectionPool0 = okHttpClient4.getConnectionPool();
      HostnameVerifier hostnameVerifier0 = okHttpClient2.getHostnameVerifier();
      String string0 = "a^~g'(W#lhK;uD9.";
      int int0 = 1082;
      SSLSocketFactory sSLSocketFactory1 = null;
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Address address0 = new Address(string0, int0, sSLSocketFactory1, hostnameVerifier0, okAuthenticator1, proxy0, list0);
      List<String> list1 = address0.getTransports();
      // Undeclared exception!
      try { 
        okHttpClient3.setTransports(list1);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = null;
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient2.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      int int0 = 2;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      ResponseCache responseCache0 = okHttpClient3.getResponseCache();
      ProxySelector proxySelector1 = okHttpClient3.getProxySelector();
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      List<String> list0 = okHttpClient0.getTransports();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      String string0 = "j+|";
      int int0 = 0;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      int int1 = 1024;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int1);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      Address address0 = null;
      try {
        address0 = new Address(string0, int0, sSLSocketFactory0, hostnameVerifier0, okAuthenticator0, proxy0, list0);
      } catch(IllegalArgumentException e) {
         //
         // uriPort <= 0: 0
         //
         verifyException("com.squareup.okhttp.Address", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      Proxy proxy0 = okHttpClient0.getProxy();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(connectionPool0);
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(connectionPool0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = okHttpClient2.getCookieHandler();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient5.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      int int0 = 640;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      String string0 = "http/1.1";
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(okAuthenticator1).toString();
      OkHttpClient okHttpClient4 = okHttpClient3.setAuthenticator(okAuthenticator1);
      CookieHandler cookieHandler1 = okHttpClient1.getCookieHandler();
      OkAuthenticator okAuthenticator2 = okHttpClient2.getAuthenticator();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = linkedList0.add(string0);
      OkHttpClient okHttpClient5 = okHttpClient1.setTransports(linkedList0);
  }
}
