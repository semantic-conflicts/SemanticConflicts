/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 19:52:30 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      String string0 = "https";
      int int0 = 54;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      OkHttpClient okHttpClient4 = okHttpClient2.setCookieHandler(cookieHandler0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      List<String> list0 = okHttpClient0.getTransports();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient5 = okHttpClient1.setResponseCache(responseCache0);
      URI uRI0 = null;
      String string0 = "com.squareup.okhttp.ResponseSource";
      String string1 = "";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockURL.URL(string0, string1, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      List<String> list0 = okHttpClient0.getTransports();
      URL uRL0 = MockURL.getFtpExample();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      List<String> list1 = okHttpClient0.getTransports();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = (-3812);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient2.open(uRL0);
      String string0 = "]i";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL1 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL1);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = null;
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient4 = okHttpClient2.setAuthenticator(okAuthenticator0);
      CookieManager cookieManager1 = new CookieManager();
      Proxy proxy0 = Proxy.NO_PROXY;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient5 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      OkHttpClient okHttpClient6 = okHttpClient4.setProxy(proxy0);
      OkHttpClient okHttpClient7 = okHttpClient4.setCookieHandler(cookieManager1);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient8 = okHttpClient7.setConnectionPool(connectionPool0);
      List<String> list0 = okHttpClient1.getTransports();
      // Undeclared exception!
      try { 
        okHttpClient7.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      List<String> list0 = null;
      OkHttpClient okHttpClient2 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient4 = okHttpClient3.setProxy(proxy0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool0 = okHttpClient5.getConnectionPool();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient1.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      ConnectionPool connectionPool0 = okHttpClient4.getConnectionPool();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      List<String> list0 = okHttpClient2.getTransports();
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      ConnectionPool connectionPool1 = okHttpClient0.getConnectionPool();
      ResponseCache responseCache2 = okHttpClient1.getResponseCache();
      ResponseCache responseCache3 = ResponseCache.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache3);
      ResponseCache responseCache4 = ResponseCache.getDefault();
      boolean boolean0 = true;
      OkHttpClient okHttpClient6 = okHttpClient4.setFollowProtocolRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      int int0 = 121;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient5 = okHttpClient0.setConnectionPool(connectionPool0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient5.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieHandler0);
      URL uRL0 = MockURL.getFileExample();
      String string0 = "fieldname == null";
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient1.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      List<String> list0 = okHttpClient0.getTransports();
      URL uRL0 = MockURL.getFtpExample();
      String string0 = null;
      try { 
        MockURL.URL(uRL0, string0);
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      Proxy proxy0 = okHttpClient0.getProxy();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      ResponseCache responseCache1 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient4 = okHttpClient2.setResponseCache(responseCache0);
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      SSLSocketFactory sSLSocketFactory1 = okHttpClient1.getSslSocketFactory();
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      String string0 = "}";
      String string1 = "";
      String string2 = "X-Android-Received-Millis";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string1, string2);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string0 = "Fj!u5FGC";
      int int0 = 0;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(proxySelector0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setResponseCache(responseCache0);
      ResponseCache responseCache1 = okHttpClient5.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      SSLSocketFactory sSLSocketFactory1 = okHttpClient0.getSslSocketFactory();
      Proxy proxy0 = okHttpClient0.getProxy();
      HttpURLConnection httpURLConnection1 = okHttpClient0.open(uRL0);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "https";
      URI uRI0 = MockURI.URI(string0, string0, string0);
      URL uRL0 = MockURI.toURL(uRI0);
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      String string1 = "?\\ <[$Ue";
      int int0 = (-1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(string1, string1, int0, string0, uRLStreamHandler0);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL1);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ?\\ <[$ue
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
