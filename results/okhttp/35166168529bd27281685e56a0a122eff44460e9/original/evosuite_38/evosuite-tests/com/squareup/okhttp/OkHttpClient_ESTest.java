/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 20:09:19 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.io.InputStream;
import java.lang.reflect.Array;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory0);
      RawHeaders rawHeaders0 = new RawHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      CookieManager cookieManager0 = new CookieManager();
      URI uRI0 = MockURI.aFTPURI;
      Map<String, List<String>> map0 = null;
      // Undeclared exception!
      try { 
        cookieManager0.get(uRI0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Argument is null
         //
         verifyException("java.net.CookieManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = okHttpClient2.getTransports();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(list2);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      int int0 = 44;
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      HostnameVerifier hostnameVerifier0 = null;
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      String string0 = "file";
      URL uRL1 = MockURL.getFileExample();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL1, okHttpClient1, okResponseCacheAdapter0, linkedHashSet0);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      Proxy proxy0 = null;
      List<String> list0 = okHttpClient1.getTransports();
      Address address0 = null;
      try {
        address0 = new Address(string0, int0, sSLSocketFactory0, hostnameVerifier0, okAuthenticator0, proxy0, list0);
      } catch(IllegalArgumentException e) {
         //
         // transports == null
         //
         verifyException("com.squareup.okhttp.Address", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient3.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient4 = okHttpClient3.setAuthenticator(okAuthenticator0);
      Proxy proxy1 = okHttpClient4.getProxy();
      OkAuthenticator okAuthenticator1 = okHttpClient2.getAuthenticator();
      int int0 = 3260;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient5 = okHttpClient4.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient6 = okHttpClient5.setProxySelector(proxySelector0);
      OkHttpClient okHttpClient7 = okHttpClient1.setConnectionPool(connectionPool0);
      SSLSocketFactory sSLSocketFactory1 = okHttpClient7.getSslSocketFactory();
      OkHttpClient okHttpClient8 = okHttpClient4.setProxySelector(proxySelector0);
      ProxySelector.setDefault(proxySelector0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient9 = okHttpClient8.setAuthenticator(okAuthenticator1);
      OkHttpClient okHttpClient10 = okHttpClient9.setAuthenticator(okAuthenticator1);
      OkHttpClient okHttpClient11 = okHttpClient8.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient12 = okHttpClient1.setAuthenticator(okAuthenticator0);
      OkHttpClient okHttpClient13 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ResponseCache responseCache0 = okHttpClient8.getResponseCache();
      OkHttpClient okHttpClient14 = okHttpClient1.setProxySelector(proxySelector0);
      ProxySelector proxySelector1 = okHttpClient4.getProxySelector();
      OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier0);
      Proxy proxy2 = okHttpClient10.getProxy();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      String string0 = "GaM([";
      String string1 = "xld5\"w-PZ";
      int int0 = 0;
      try { 
        MockURL.URL(string0, string1, int0, string1);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: gam([
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      CookieHandler cookieHandler1 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      HostnameVerifier hostnameVerifier0 = okHttpClient2.getHostnameVerifier();
      HostnameVerifier hostnameVerifier1 = okHttpClient0.getHostnameVerifier();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      RawHeaders rawHeaders0 = new RawHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      String string0 = "O%;R+k5";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieManager0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool1 = okHttpClient3.getConnectionPool();
      HostnameVerifier hostnameVerifier0 = okHttpClient3.getHostnameVerifier();
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      ProxySelector proxySelector2 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      List<String> list0 = okHttpClient0.getTransports();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      int int0 = 0;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      boolean boolean0 = okHttpClient2.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = null;
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, linkedHashSet0);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      Proxy proxy0 = null;
      OkHttpClient okHttpClient3 = okHttpClient1.setConnectionPool(connectionPool0);
      OkHttpClient okHttpClient4 = okHttpClient2.setProxy(proxy0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient5 = okHttpClient4.setAuthenticator(okAuthenticator0);
      // Undeclared exception!
      try { 
        okHttpClient4.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
