/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 20:22:17 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.TunnelRequest;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      Proxy proxy0 = null;
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(responseCache0);
      OkHttpClient okHttpClient3 = okHttpClient1.setProxy(proxy0);
      OkHttpClient okHttpClient4 = okHttpClient0.setProxy(proxy0);
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      ConnectionPool connectionPool1 = okHttpClient0.getConnectionPool();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient5 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      CookieManager cookieManager0 = new CookieManager();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      cookieManager0.setCookiePolicy(cookiePolicy0);
      OkHttpClient okHttpClient6 = okHttpClient0.setCookieHandler(cookieManager0);
      Proxy proxy1 = okHttpClient3.getProxy();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      int int0 = (-1);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkAuthenticator okAuthenticator0 = null;
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      URL uRL1 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection1 = okHttpClient1.open(uRL1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getHttpExample();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient2, okResponseCacheAdapter0, linkedHashSet0);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      OkHttpClient okHttpClient4 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory0);
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient5 = okHttpClient4.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient6 = okHttpClient5.setHostnameVerifier(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 2;
      long long0 = 1112L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      String string0 = "This protocol does not support input";
      try { 
        MockURL.URL(string0, string0, int0, string0);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: this protocol does not support input
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      String string0 = "https";
      int int0 = (-1);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = okHttpClient0.getTransports();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list1);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      int int0 = 401;
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      int int0 = (-3278);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(connectionPool0);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient3.setResponseCache(responseCache0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(boolean0);
      URL uRL0 = MockURL.getFileExample();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient4, okResponseCacheAdapter0, linkedHashSet0);
      // Undeclared exception!
      try { 
        okHttpClient4.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      List<String> list0 = null;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "2)\"Ih |]Q";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string1 = "http";
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      URL uRL0 = MockURL.URL(string1, string0, string1);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, linkedHashSet0);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      HttpURLConnection httpURLConnection1 = okHttpClient0.open(uRL0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      String string0 = "Unexpected protocol: ";
      Locale locale0 = Locale.forLanguageTag(string0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      CookieHandler cookieHandler0 = okHttpClient2.getCookieHandler();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      Proxy proxy1 = okHttpClient1.getProxy();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      HostnameVerifier hostnameVerifier1 = okHttpClient1.getHostnameVerifier();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient4 = okHttpClient0.setResponseCache(responseCache0);
      OkHttpClient okHttpClient5 = okHttpClient0.setProxySelector(proxySelector0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient2.getSslSocketFactory();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(proxySelector0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 0;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string0 = "YI1\\#qlR ]/s=w;15.\"";
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved(string0, int0);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(proxy0);
      boolean boolean1 = okHttpClient3.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(connectionPool0);
      Proxy proxy0 = okHttpClient2.getProxy();
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      Proxy proxy1 = okHttpClient2.getProxy();
      OkHttpClient okHttpClient3 = okHttpClient0.setAuthenticator(okAuthenticator0);
      String string0 = null;
      int int0 = 1087;
      String string1 = "S}hKE!\"sF<]Yrm";
      TunnelRequest tunnelRequest0 = null;
      try {
        tunnelRequest0 = new TunnelRequest(string0, int0, string1, string0);
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("com.squareup.okhttp.TunnelRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      URL uRL0 = MockURL.getHttpExample();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkResponseCacheAdapter okResponseCacheAdapter0 = new OkResponseCacheAdapter(responseCache0);
      Set<Route> set0 = null;
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCacheAdapter0, set0);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      ProxySelector proxySelector0 = okHttpClient3.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      long long0 = (-616L);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      String string0 = "connection";
      MockFile mockFile0 = new MockFile(string0, string0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okAuthenticator0);
      Proxy proxy0 = null;
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient0.setResponseCache(responseCache0);
      OkHttpClient okHttpClient4 = okHttpClient2.setProxy(proxy0);
      OkHttpClient okHttpClient5 = okHttpClient0.setProxy(proxy0);
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      ConnectionPool connectionPool1 = okHttpClient0.getConnectionPool();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient6 = okHttpClient2.setHostnameVerifier(hostnameVerifier0);
      CookieManager cookieManager0 = new CookieManager();
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      cookieManager0.setCookiePolicy(cookiePolicy0);
      OkHttpClient okHttpClient7 = okHttpClient0.setCookieHandler(cookieManager0);
      Proxy proxy1 = okHttpClient4.getProxy();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient4.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }
}
