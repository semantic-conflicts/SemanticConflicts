/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 20:24:07 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.Connection;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.File;
import java.net.CookieHandler;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okAuthenticator0);
      String string0 = "";
      String string1 = null;
      try { 
        MockURL.URL(string0, string1, string0);
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(cookieHandler0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient4 = okHttpClient2.setProxySelector(proxySelector0);
      boolean boolean1 = false;
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(boolean1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient5.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      boolean boolean0 = true;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient4 = okHttpClient3.setProxy(proxy0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setResponseCache(responseCache0);
      ResponseCache responseCache1 = okHttpClient5.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(responseCache0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      int int0 = 0;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient3 = okHttpClient0.setConnectionPool(connectionPool0);
      String string0 = "z}J$C0pN#*GLV";
      int int1 = 0;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      Proxy proxy0 = null;
      RawHeaders rawHeaders0 = new RawHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
      Address address0 = null;
      try {
        address0 = new Address(string0, int1, sSLSocketFactory0, hostnameVerifier0, okAuthenticator0, proxy0, list0);
      } catch(IllegalArgumentException e) {
         //
         // uriPort <= 0: 0
         //
         verifyException("com.squareup.okhttp.Address", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = ConnectionPool.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      ProxySelector proxySelector0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient1.setResponseCache(responseCache0);
      List<Connection> list0 = connectionPool0.getConnections();
      OkHttpClient okHttpClient4 = okHttpClient1.setProxySelector(proxySelector1);
      OkAuthenticator okAuthenticator0 = okHttpClient4.getAuthenticator();
      ResponseCache responseCache1 = okHttpClient0.getResponseCache();
      URL uRL0 = MockURL.getHttpExample();
      String string0 = "Keep-Alive";
      URL uRL1 = MockURL.URL(uRL0, string0);
      HttpURLConnection httpURLConnection0 = okHttpClient3.open(uRL1);
      ProxySelector proxySelector2 = ProxySelector.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient4.setProxySelector(proxySelector2);
      ProxySelector proxySelector3 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient6 = okHttpClient2.setAuthenticator(okAuthenticator0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      int int0 = 572;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, int0);
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(connectionPool0);
      ResponseCache responseCache0 = okHttpClient3.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      int int0 = (-2549);
      MockInetSocketAddress mockInetSocketAddress0 = null;
      try {
        mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, int0);
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2549
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(okAuthenticator0).toString();
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getFileExample();
      OkResponseCache okResponseCache0 = null;
      LinkedHashSet<Route> linkedHashSet0 = new LinkedHashSet<Route>();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient2, okResponseCache0, linkedHashSet0);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient3.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      HostnameVerifier hostnameVerifier1 = okHttpClient0.getHostnameVerifier();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      Proxy proxy0 = okHttpClient1.getProxy();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(proxy0);
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      OkHttpClient okHttpClient4 = okHttpClient1.setConnectionPool(connectionPool0);
      ConnectionPool connectionPool1 = okHttpClient1.getConnectionPool();
      boolean boolean1 = okHttpClient2.getFollowProtocolRedirects();
      OkHttpClient okHttpClient5 = okHttpClient1.setProxySelector(proxySelector0);
      OkHttpClient okHttpClient6 = okHttpClient5.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      List<String> list0 = okHttpClient2.getTransports();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      int int0 = 1;
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(proxySelector0);
      long long0 = (-1L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient4 = okHttpClient2.setConnectionPool(connectionPool0);
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient5 = okHttpClient4.setProxy(proxy0);
      ProxySelector proxySelector1 = null;
      OkHttpClient okHttpClient6 = okHttpClient5.setProxySelector(proxySelector1);
      ResponseCache responseCache0 = null;
      OkHttpClient okHttpClient7 = okHttpClient6.setResponseCache(responseCache0);
      ResponseCache responseCache1 = okHttpClient2.getResponseCache();
      HostnameVerifier hostnameVerifier1 = okHttpClient2.getHostnameVerifier();
      ResponseCache responseCache2 = ResponseCache.getDefault();
      OkHttpClient okHttpClient8 = okHttpClient7.setResponseCache(responseCache2);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(proxySelector0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      CookieHandler cookieHandler0 = null;
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(cookieHandler0);
      List<String> list0 = okHttpClient3.getTransports();
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(sSLSocketFactory0);
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      HostnameVerifier hostnameVerifier0 = okHttpClient2.getHostnameVerifier();
      CookieHandler cookieHandler0 = okHttpClient2.getCookieHandler();
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = null;
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }
}
