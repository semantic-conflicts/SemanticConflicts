import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.String[] strArray2 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList3;
        java.lang.Class<?> wildcardClass6 = strList3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList6;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.URL uRL2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection3 = okHttpClient0.open(uRL2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.List<java.lang.String> strList0 = null;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList0;
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        boolean boolean4 = okHttpClient3.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        java.util.List<java.lang.String> strList2 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setTransports(strList2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList2);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        boolean boolean5 = okHttpClient0.getFollowProtocolRedirects();
        java.lang.Class<?> wildcardClass6 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.util.List<java.lang.String> strList0 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = okHttpClient17.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator18);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setAuthenticator(okAuthenticator11);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection10 = okHttpClient5.open(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.net.ResponseCache responseCache14 = okHttpClient0.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache14);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        boolean boolean7 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient0.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient7.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier8);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        java.net.CookieHandler cookieHandler9 = null;
        okHttpClient5.cookieHandler = cookieHandler9;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient7.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.Proxy proxy10 = null;
        okHttpClient9.proxy = proxy10;
        java.net.CookieHandler cookieHandler12 = okHttpClient9.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean5 = okHttpClient4.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setHostnameVerifier(hostnameVerifier9);
        java.net.Proxy proxy11 = null;
        okHttpClient4.proxy = proxy11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient13.failedRoutes;
        okHttpClient4.failedRoutes = routeSet16;
        java.util.List<java.lang.String> strList18 = okHttpClient4.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient4.authenticator;
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient4.setProxySelector(proxySelector20);
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient21.failedRoutes;
        okHttpClient2.failedRoutes = routeSet22;
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList27;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient2.setTransports((java.util.List<java.lang.String>) strList27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.util.Set<com.squareup.okhttp.Route> routeSet3 = okHttpClient0.failedRoutes;
        java.net.ProxySelector proxySelector4 = okHttpClient0.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector4);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        java.lang.Class<?> wildcardClass4 = okHttpClient2.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        java.lang.Class<?> wildcardClass5 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.setAuthenticator(okAuthenticator17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient23.connectionPool;
        okHttpClient10.connectionPool = connectionPool24;
        okHttpClient8.connectionPool = connectionPool24;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool24);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        java.lang.Class<?> wildcardClass10 = okHttpClient9.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = null;
        okHttpClient0.proxy = proxy1;
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        boolean boolean18 = okHttpClient16.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.URL uRL1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection2 = okHttpClient0.open(uRL1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient5.failedRoutes = routeSet8;
        boolean boolean11 = okHttpClient5.followProtocolRedirects;
        java.util.List<java.lang.String> strList12 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient5.setTransports(strList12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        java.lang.Class<?> wildcardClass2 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.followProtocolRedirects;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient7.getSslSocketFactory();
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection11 = okHttpClient7.open(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory9);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        okHttpClient0.responseCache = responseCache4;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.net.ProxySelector proxySelector4 = null;
        okHttpClient3.proxySelector = proxySelector4;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        java.util.Set<com.squareup.okhttp.Route> routeSet5 = okHttpClient0.failedRoutes;
        java.net.ProxySelector proxySelector6 = null;
        okHttpClient0.proxySelector = proxySelector6;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet5);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList7 = okHttpClient6.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        okHttpClient0.transports = strList22;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList22;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        java.util.List<java.lang.String> strList6 = okHttpClient5.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.net.ResponseCache responseCache63 = null;
        okHttpClient62.responseCache = responseCache63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient2.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setCookieHandler(cookieHandler4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = okHttpClient2.hostnameVerifier;
        java.lang.Class<?> wildcardClass7 = hostnameVerifier6.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient34.setHostnameVerifier(hostnameVerifier39);
        java.net.Proxy proxy41 = null;
        okHttpClient34.proxy = proxy41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        java.util.Set<com.squareup.okhttp.Route> routeSet46 = okHttpClient43.failedRoutes;
        okHttpClient34.failedRoutes = routeSet46;
        java.util.List<java.lang.String> strList48 = okHttpClient34.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = okHttpClient34.authenticator;
        java.net.ProxySelector proxySelector50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient34.setProxySelector(proxySelector50);
        java.util.Set<com.squareup.okhttp.Route> routeSet52 = okHttpClient51.failedRoutes;
        okHttpClient0.failedRoutes = routeSet52;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet52);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        java.util.List<java.lang.String> strList7 = okHttpClient5.transports;
        boolean boolean8 = okHttpClient5.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient5.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        java.net.Proxy proxy15 = null;
        okHttpClient14.proxy = proxy15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray18 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet19 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet19, routeArray18);
        okHttpClient17.failedRoutes = routeSet19;
        java.util.List<java.lang.String> strList22 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient17.transports = strList22;
        okHttpClient14.transports = strList22;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient5.setTransports(strList22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList22);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.lang.Class<?> wildcardClass7 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        java.net.ProxySelector proxySelector10 = null;
        okHttpClient9.proxySelector = proxySelector10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        java.net.URL uRL11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection12 = okHttpClient9.open(uRL11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector11 = okHttpClient9.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector11);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        java.net.Proxy proxy18 = null;
        okHttpClient16.proxy = proxy18;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = null;
        okHttpClient0.proxy = proxy12;
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient0.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator14);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient0.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier13);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection13 = okHttpClient4.open(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        okHttpClient7.followProtocolRedirects = false;
        java.lang.Class<?> wildcardClass60 = okHttpClient7.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = okHttpClient5.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier9);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient4.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        com.squareup.okhttp.ConnectionPool connectionPool11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setConnectionPool(connectionPool11);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient12.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = okHttpClient12.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.ConnectionPool connectionPool19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory21);
        java.net.Proxy proxy23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setProxy(proxy23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.setAuthenticator(okAuthenticator25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean28 = okHttpClient27.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient27.setHostnameVerifier(hostnameVerifier32);
        java.net.Proxy proxy34 = null;
        okHttpClient27.proxy = proxy34;
        boolean boolean36 = okHttpClient27.followProtocolRedirects;
        boolean boolean37 = okHttpClient27.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray39 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet40 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet40, routeArray39);
        okHttpClient38.failedRoutes = routeSet40;
        java.util.List<java.lang.String> strList43 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient38.transports = strList43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient47);
        java.net.Proxy proxy49 = null;
        okHttpClient48.proxy = proxy49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient51.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.setAuthenticator(okAuthenticator58);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean61 = okHttpClient60.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient60.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient60.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool65 = okHttpClient64.connectionPool;
        okHttpClient51.connectionPool = connectionPool65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient48.setConnectionPool(connectionPool65);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient38.setConnectionPool(connectionPool65);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient27.setConnectionPool(connectionPool65);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient22.setConnectionPool(connectionPool65);
        java.util.Set<com.squareup.okhttp.Route> routeSet71 = okHttpClient70.failedRoutes;
        okHttpClient12.failedRoutes = routeSet71;
        okHttpClient4.failedRoutes = routeSet71;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet71);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        java.util.Set<com.squareup.okhttp.Route> routeSet18 = okHttpClient17.failedRoutes;
        java.net.URL uRL19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection20 = okHttpClient17.open(uRL19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet18);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient5.failedRoutes;
        java.net.ResponseCache responseCache8 = null;
        okHttpClient5.responseCache = responseCache8;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setTransports(strList6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        java.net.ResponseCache responseCache13 = okHttpClient12.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache13);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.util.List<java.lang.String> strList7 = okHttpClient6.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient0.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier15);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient2.setProxy(proxy5);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient2.setFollowProtocolRedirects(false);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient8.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory9);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.util.Set<com.squareup.okhttp.Route> routeSet56 = okHttpClient55.failedRoutes;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient55.responseCache = responseCache57;
        com.squareup.okhttp.OkAuthenticator okAuthenticator59 = null;
        okHttpClient55.authenticator = okAuthenticator59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet56);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler5 = okHttpClient2.cookieHandler;
        java.lang.String[] strArray7 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient2.setTransports((java.util.List<java.lang.String>) strList8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = okHttpClient3.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier4);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        boolean boolean5 = okHttpClient0.getFollowProtocolRedirects();
        java.util.List<java.lang.String> strList6 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setTransports(strList6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList6);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.connectionPool;
        java.net.CookieHandler cookieHandler16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setCookieHandler(cookieHandler16);
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient14.hostnameVerifier;
        okHttpClient0.hostnameVerifier = hostnameVerifier18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier18);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setCookieHandler(cookieHandler19);
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = okHttpClient0.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier21);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient2.getFollowProtocolRedirects();
        java.net.URL uRL4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection5 = okHttpClient2.open(uRL4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean6 = okHttpClient5.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient9.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient9.okResponseCache();
        java.util.List<java.lang.String> strList12 = okHttpClient9.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setTransports(strList12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        java.net.ResponseCache responseCache8 = okHttpClient4.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache8);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        java.net.Proxy proxy11 = null;
        okHttpClient10.proxy = proxy11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient13.setAuthenticator(okAuthenticator20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        okHttpClient13.connectionPool = connectionPool27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient10.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient0.setConnectionPool(connectionPool27);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = null;
        okHttpClient30.authenticator = okAuthenticator31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setHostnameVerifier(hostnameVerifier38);
        java.util.Set<com.squareup.okhttp.Route> routeSet40 = okHttpClient37.failedRoutes;
        okHttpClient33.failedRoutes = routeSet40;
        java.net.ResponseCache responseCache42 = okHttpClient33.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory43 = okHttpClient33.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        java.net.ResponseCache responseCache49 = okHttpClient48.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient48.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient33.setConnectionPool(connectionPool50);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        okHttpClient33.transports = strList55;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setHostnameVerifier(hostnameVerifier63);
        java.util.Set<com.squareup.okhttp.Route> routeSet65 = okHttpClient62.failedRoutes;
        okHttpClient58.failedRoutes = routeSet65;
        java.net.ResponseCache responseCache67 = okHttpClient58.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory68 = okHttpClient58.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean70 = okHttpClient69.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient69.setHostnameVerifier(hostnameVerifier71);
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient69.copyWithDefaults();
        java.net.ResponseCache responseCache74 = okHttpClient73.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool75 = okHttpClient73.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient58.setConnectionPool(connectionPool75);
        java.lang.String[] strArray79 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        okHttpClient58.transports = strList80;
        okHttpClient33.transports = strList80;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient30.setTransports((java.util.List<java.lang.String>) strList80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        java.util.List<java.lang.String> strList12 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setTransports(strList12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setTransports((java.util.List<java.lang.String>) strList9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        java.net.ProxySelector proxySelector6 = okHttpClient5.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector6);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        okHttpClient6.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient4.getSslSocketFactory();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient4.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient3.getConnectionPool();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection7 = okHttpClient3.open(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool5);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient12.cookieHandler = cookieHandler13;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.ConnectionPool connectionPool34 = okHttpClient33.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler37 = okHttpClient35.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient38.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient38.setHostnameVerifier(hostnameVerifier43);
        boolean boolean45 = okHttpClient38.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setHostnameVerifier(hostnameVerifier47);
        java.net.Proxy proxy49 = okHttpClient46.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient46.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient(okHttpClient52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool55 = okHttpClient54.connectionPool;
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient54.setCookieHandler(cookieHandler56);
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient54.hostnameVerifier;
        okHttpClient46.hostnameVerifier = hostnameVerifier58;
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = okHttpClient46.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient38.setHostnameVerifier(hostnameVerifier60);
        okHttpClient35.hostnameVerifier = hostnameVerifier60;
        okHttpClient33.hostnameVerifier = hostnameVerifier60;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient4.okResponseCache();
        java.util.List<java.lang.String> strList7 = okHttpClient4.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        java.util.Set<com.squareup.okhttp.Route> routeSet15 = okHttpClient12.failedRoutes;
        okHttpClient8.failedRoutes = routeSet15;
        java.net.ResponseCache responseCache17 = okHttpClient8.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient8.sslSocketFactory;
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList22;
        okHttpClient8.transports = strList22;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList22;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient4.setTransports((java.util.List<java.lang.String>) strList22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        java.lang.Class<?> wildcardClass6 = okHttpClient5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        okHttpClient0.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "hi!" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList4;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setHostnameVerifier(hostnameVerifier18);
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient17.failedRoutes;
        okHttpClient13.failedRoutes = routeSet20;
        java.net.ResponseCache responseCache22 = okHttpClient13.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient13.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        java.net.ResponseCache responseCache29 = okHttpClient28.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool30 = okHttpClient28.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient13.setConnectionPool(connectionPool30);
        java.lang.String[] strArray34 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        okHttpClient13.transports = strList35;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient9.setTransports((java.util.List<java.lang.String>) strList35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        java.net.ResponseCache responseCache7 = okHttpClient3.getResponseCache();
        java.lang.Class<?> wildcardClass8 = okHttpClient3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient4.okResponseCache();
        java.net.Proxy proxy9 = okHttpClient4.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        okHttpClient7.sslSocketFactory = sSLSocketFactory10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient7.getAuthenticator();
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection15 = okHttpClient7.open(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient3.setHostnameVerifier(hostnameVerifier4);
        okHttpClient5.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setProxy(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.CookieHandler cookieHandler7 = okHttpClient0.getCookieHandler();
        java.net.Proxy proxy8 = okHttpClient0.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy8);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory3);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient0.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        java.net.ResponseCache responseCache17 = null;
        okHttpClient16.responseCache = responseCache17;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setAuthenticator(okAuthenticator11);
        okHttpClient0.followProtocolRedirects = false;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient0.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean18 = okHttpClient17.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient17.setHostnameVerifier(hostnameVerifier22);
        java.net.Proxy proxy24 = null;
        okHttpClient17.proxy = proxy24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        java.util.Set<com.squareup.okhttp.Route> routeSet29 = okHttpClient26.failedRoutes;
        okHttpClient17.failedRoutes = routeSet29;
        java.util.List<java.lang.String> strList31 = okHttpClient17.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient17.authenticator;
        java.net.ProxySelector proxySelector33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient17.setProxySelector(proxySelector33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setHostnameVerifier(hostnameVerifier36);
        java.net.Proxy proxy38 = okHttpClient35.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient35.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient43.connectionPool;
        java.net.CookieHandler cookieHandler45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setCookieHandler(cookieHandler45);
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = okHttpClient43.hostnameVerifier;
        okHttpClient35.hostnameVerifier = hostnameVerifier47;
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = okHttpClient35.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient17.setHostnameVerifier(hostnameVerifier49);
        okHttpClient0.hostnameVerifier = hostnameVerifier49;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory3);
        com.squareup.okhttp.OkAuthenticator okAuthenticator5 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(cookieHandler11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient10.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient15.setHostnameVerifier(hostnameVerifier20);
        java.net.Proxy proxy22 = null;
        okHttpClient15.proxy = proxy22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setHostnameVerifier(hostnameVerifier25);
        java.util.Set<com.squareup.okhttp.Route> routeSet27 = okHttpClient24.failedRoutes;
        okHttpClient15.failedRoutes = routeSet27;
        java.util.List<java.lang.String> strList29 = okHttpClient15.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = okHttpClient15.authenticator;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient15.setProxySelector(proxySelector31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray38 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet39 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet39, routeArray38);
        okHttpClient37.failedRoutes = routeSet39;
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient37.setResponseCache(responseCache42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory44);
        java.net.URL uRL47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection48 = okHttpClient14.open(uRL47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = okHttpClient0.proxy;
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy7);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = okHttpClient0.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        boolean boolean10 = okHttpClient0.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ResponseCache responseCache1 = okHttpClient0.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean3 = okHttpClient2.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient2.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient6.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient6.okResponseCache();
        java.util.List<java.lang.String> strList9 = okHttpClient6.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setTransports(strList9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory3);
        java.net.ProxySelector proxySelector5 = null;
        okHttpClient4.proxySelector = proxySelector5;
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.authenticator;
        java.net.ProxySelector proxySelector8 = okHttpClient4.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector8);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray17 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet18 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet18, routeArray17);
        okHttpClient16.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setResponseCache(responseCache21);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient16.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        java.net.CookieHandler cookieHandler25 = okHttpClient24.getCookieHandler();
        java.net.Proxy proxy26 = null;
        okHttpClient24.proxy = proxy26;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler25);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory3);
        com.squareup.okhttp.OkAuthenticator okAuthenticator5 = okHttpClient0.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(cookieHandler11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient10.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient0.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient15.setHostnameVerifier(hostnameVerifier20);
        java.net.Proxy proxy22 = null;
        okHttpClient15.proxy = proxy22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setHostnameVerifier(hostnameVerifier25);
        java.util.Set<com.squareup.okhttp.Route> routeSet27 = okHttpClient24.failedRoutes;
        okHttpClient15.failedRoutes = routeSet27;
        java.util.List<java.lang.String> strList29 = okHttpClient15.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = okHttpClient15.authenticator;
        java.net.ProxySelector proxySelector31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient15.setProxySelector(proxySelector31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray38 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet39 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet39, routeArray38);
        okHttpClient37.failedRoutes = routeSet39;
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient37.setResponseCache(responseCache42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = okHttpClient37.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory44);
        java.lang.Class<?> wildcardClass47 = sSLSocketFactory44.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient6.getConnectionPool();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = connectionPool7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList10 = okHttpClient7.getTransports();
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient7.getConnectionPool();
        java.net.ResponseCache responseCache12 = okHttpClient7.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.util.Set<com.squareup.okhttp.Route> routeSet3 = okHttpClient0.failedRoutes;
        java.net.ProxySelector proxySelector4 = okHttpClient0.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector4);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.net.CookieHandler cookieHandler4 = okHttpClient3.cookieHandler;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient3.cookieHandler = cookieHandler5;
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient3.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator7);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList6 = okHttpClient0.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList6);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray11 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet12 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet12, routeArray11);
        okHttpClient10.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList15 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient10.transports = strList15;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient7.setTransports(strList15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList15);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        java.net.ResponseCache responseCache4 = okHttpClient0.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache4);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.Proxy proxy10 = null;
        okHttpClient9.proxy = proxy10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient9.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier14);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient8.connectionPool;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setCookieHandler(cookieHandler10);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient8.hostnameVerifier;
        okHttpClient0.hostnameVerifier = hostnameVerifier12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient0.getHostnameVerifier();
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        boolean boolean10 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setHostnameVerifier(hostnameVerifier16);
        java.util.Set<com.squareup.okhttp.Route> routeSet18 = okHttpClient15.failedRoutes;
        okHttpClient11.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache20 = okHttpClient11.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = okHttpClient11.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.copyWithDefaults();
        java.net.ResponseCache responseCache27 = okHttpClient26.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool28 = okHttpClient26.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient11.setConnectionPool(connectionPool28);
        java.net.CookieHandler cookieHandler30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient11.setCookieHandler(cookieHandler30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean33 = okHttpClient32.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setHostnameVerifier(hostnameVerifier34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient32.setHostnameVerifier(hostnameVerifier37);
        java.net.Proxy proxy39 = okHttpClient32.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient42.connectionPool;
        java.net.CookieHandler cookieHandler44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setCookieHandler(cookieHandler44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setHostnameVerifier(hostnameVerifier47);
        java.net.Proxy proxy49 = okHttpClient46.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean51 = okHttpClient50.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient50.copyWithDefaults();
        java.net.CookieHandler cookieHandler55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient54.setCookieHandler(cookieHandler55);
        com.squareup.okhttp.OkAuthenticator okAuthenticator57 = okHttpClient54.getAuthenticator();
        okHttpClient46.authenticator = okAuthenticator57;
        okHttpClient45.authenticator = okAuthenticator57;
        okHttpClient32.authenticator = okAuthenticator57;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient31.setAuthenticator(okAuthenticator57);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setHostnameVerifier(hostnameVerifier63);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient(okHttpClient64);
        java.net.Proxy proxy66 = null;
        okHttpClient65.proxy = proxy66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean69 = okHttpClient68.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient68.setHostnameVerifier(hostnameVerifier70);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient68.setHostnameVerifier(hostnameVerifier73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient68.setAuthenticator(okAuthenticator75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean78 = okHttpClient77.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient77.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient77.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool82 = okHttpClient81.connectionPool;
        okHttpClient68.connectionPool = connectionPool82;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient65.setConnectionPool(connectionPool82);
        okHttpClient61.connectionPool = connectionPool82;
        okHttpClient7.connectionPool = connectionPool82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient84);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setProxy(proxy11);
        java.net.ProxySelector proxySelector13 = null;
        okHttpClient0.proxySelector = proxySelector13;
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient0.getConnectionPool();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool15);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient5.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator8);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache10 = okHttpClient0.okResponseCache();
        java.net.CookieHandler cookieHandler11 = null;
        okHttpClient0.cookieHandler = cookieHandler11;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache10);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setResponseCache(responseCache17);
        java.net.ResponseCache responseCache19 = null;
        okHttpClient0.responseCache = responseCache19;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        com.squareup.okhttp.Route[] routeArray9 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet10 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet10, routeArray9);
        okHttpClient6.failedRoutes = routeSet10;
        java.net.CookieHandler cookieHandler13 = okHttpClient6.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        okHttpClient6.hostnameVerifier = hostnameVerifier14;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler13);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient6.hostnameVerifier;
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setResponseCache(responseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.List<java.lang.String> strList4 = okHttpClient3.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList4);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient5.connectionPool;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient5.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator11);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        boolean boolean15 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector16 = okHttpClient0.proxySelector;
        java.net.CookieHandler cookieHandler17 = okHttpClient0.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler17);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setProxy(proxy13);
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = okHttpClient12.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier15);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy10 = okHttpClient0.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        boolean boolean15 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector16 = okHttpClient0.proxySelector;
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setResponseCache(responseCache17);
        java.util.List<java.lang.String> strList19 = okHttpClient18.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList19);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        java.util.List<java.lang.String> strList7 = okHttpClient5.transports;
        boolean boolean8 = okHttpClient5.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray14 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet15 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet15, routeArray14);
        okHttpClient13.failedRoutes = routeSet15;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient13.setCookieHandler(cookieHandler19);
        java.util.List<java.lang.String> strList21 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList21;
        okHttpClient5.transports = strList21;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList21;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList21);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.getSslSocketFactory();
        com.squareup.okhttp.Route[] routeArray13 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet14 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet14, routeArray13);
        okHttpClient11.failedRoutes = routeSet14;
        okHttpClient5.failedRoutes = routeSet14;
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient5.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool18);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        java.util.List<java.lang.String> strList12 = okHttpClient7.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = null;
        okHttpClient13.proxy = proxy20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setHostnameVerifier(hostnameVerifier23);
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient22.failedRoutes;
        okHttpClient13.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList27 = okHttpClient13.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient13.authenticator;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient13.setProxySelector(proxySelector29);
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient30.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        boolean boolean35 = okHttpClient32.followProtocolRedirects;
        java.net.ResponseCache responseCache36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient32.setResponseCache(responseCache36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.ConnectionPool connectionPool42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setConnectionPool(connectionPool42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient40.setSSLSocketFactory(sSLSocketFactory44);
        java.net.Proxy proxy46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setProxy(proxy46);
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.setAuthenticator(okAuthenticator48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean51 = okHttpClient50.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient50.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient50.setHostnameVerifier(hostnameVerifier55);
        java.net.Proxy proxy57 = null;
        okHttpClient50.proxy = proxy57;
        boolean boolean59 = okHttpClient50.followProtocolRedirects;
        boolean boolean60 = okHttpClient50.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray62 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet63 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet63, routeArray62);
        okHttpClient61.failedRoutes = routeSet63;
        java.util.List<java.lang.String> strList66 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient61.transports = strList66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient68.setHostnameVerifier(hostnameVerifier69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient(okHttpClient70);
        java.net.Proxy proxy72 = null;
        okHttpClient71.proxy = proxy72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean75 = okHttpClient74.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient74.setHostnameVerifier(hostnameVerifier76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient74.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkAuthenticator okAuthenticator81 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient74.setAuthenticator(okAuthenticator81);
        com.squareup.okhttp.OkHttpClient okHttpClient83 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean84 = okHttpClient83.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient83.setHostnameVerifier(hostnameVerifier85);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient83.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool88 = okHttpClient87.connectionPool;
        okHttpClient74.connectionPool = connectionPool88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient71.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient61.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient50.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient45.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient37.setConnectionPool(connectionPool88);
        okHttpClient30.connectionPool = connectionPool88;
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient7.setConnectionPool(connectionPool88);
        java.net.ProxySelector proxySelector97 = okHttpClient7.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector97);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        java.util.Set<com.squareup.okhttp.Route> routeSet14 = okHttpClient11.failedRoutes;
        okHttpClient10.failedRoutes = routeSet14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient10.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier16);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient6.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory9);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        java.lang.Class<?> wildcardClass11 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setProxy(proxy11);
        java.net.ProxySelector proxySelector13 = null;
        okHttpClient0.proxySelector = proxySelector13;
        java.net.ResponseCache responseCache15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setResponseCache(responseCache15);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache17 = okHttpClient0.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache17);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        java.lang.Class<?> wildcardClass7 = okHttpClient4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.lang.Class<?> wildcardClass59 = okHttpClient58.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory10);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient9.getConnectionPool();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient5.sslSocketFactory;
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setCookieHandler(cookieHandler8);
        java.net.Proxy proxy10 = okHttpClient9.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        java.net.CookieHandler cookieHandler12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.setCookieHandler(cookieHandler12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient6.getConnectionPool();
        boolean boolean10 = okHttpClient6.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        boolean boolean7 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.setHostnameVerifier(hostnameVerifier9);
        java.net.Proxy proxy11 = okHttpClient8.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient16.connectionPool;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setCookieHandler(cookieHandler18);
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = okHttpClient16.hostnameVerifier;
        okHttpClient8.hostnameVerifier = hostnameVerifier20;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient8.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient28.failedRoutes;
        okHttpClient24.failedRoutes = routeSet31;
        java.net.ResponseCache responseCache33 = okHttpClient24.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient24.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        java.net.ResponseCache responseCache40 = okHttpClient39.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool41 = okHttpClient39.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient24.setConnectionPool(connectionPool41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient0.setConnectionPool(connectionPool41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler2 = okHttpClient0.cookieHandler;
        java.util.List<java.lang.String> strList3 = okHttpClient0.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        java.net.ProxySelector proxySelector10 = okHttpClient8.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool12 = null;
        okHttpClient11.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setCookieHandler(cookieHandler19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setAuthenticator(okAuthenticator21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient8.setAuthenticator(okAuthenticator21);
        java.net.CookieHandler cookieHandler24 = null;
        okHttpClient23.cookieHandler = cookieHandler24;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList10 = okHttpClient7.getTransports();
        boolean boolean11 = okHttpClient7.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setHostnameVerifier(hostnameVerifier35);
        boolean boolean37 = okHttpClient34.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool43 = okHttpClient42.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient34.setConnectionPool(connectionPool43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient0.setConnectionPool(connectionPool43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        java.lang.Class<?> wildcardClass17 = okHttpClient16.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = okHttpClient3.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier4);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient(okHttpClient3);
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient3.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient5.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setConnectionPool(connectionPool6);
        java.util.List<java.lang.String> strList8 = okHttpClient7.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = null;
        okHttpClient7.sslSocketFactory = sSLSocketFactory8;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray15 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet16 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet16, routeArray15);
        okHttpClient14.failedRoutes = routeSet16;
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setResponseCache(responseCache19);
        java.net.ResponseCache responseCache21 = okHttpClient14.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient14.getSslSocketFactory();
        okHttpClient5.sslSocketFactory = sSLSocketFactory22;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient5.okResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient5.connectionPool;
        java.util.List<java.lang.String> strList26 = okHttpClient5.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList26);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier10;
        java.net.ResponseCache responseCache12 = okHttpClient7.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        boolean boolean2 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache3 = okHttpClient0.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache3);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient9.hostnameVerifier = hostnameVerifier10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setConnectionPool(connectionPool16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory18);
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setCookieHandler(cookieHandler20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setHostnameVerifier(hostnameVerifier29);
        java.net.Proxy proxy31 = null;
        okHttpClient24.proxy = proxy31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setHostnameVerifier(hostnameVerifier34);
        java.util.Set<com.squareup.okhttp.Route> routeSet36 = okHttpClient33.failedRoutes;
        okHttpClient24.failedRoutes = routeSet36;
        java.util.List<java.lang.String> strList38 = okHttpClient24.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient24.authenticator;
        java.net.ProxySelector proxySelector40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxySelector(proxySelector40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray47 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet48 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet48, routeArray47);
        okHttpClient46.failedRoutes = routeSet48;
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient46.setResponseCache(responseCache51);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient46.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient23.setSSLSocketFactory(sSLSocketFactory53);
        okHttpClient9.sslSocketFactory = sSLSocketFactory53;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.followProtocolRedirects;
        boolean boolean9 = okHttpClient7.followProtocolRedirects;
        okHttpClient7.followProtocolRedirects = false;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient7.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        boolean boolean15 = okHttpClient0.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector16 = okHttpClient0.proxySelector;
        boolean boolean17 = okHttpClient0.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient10.getTransports();
        java.util.List<java.lang.String> strList12 = okHttpClient10.transports;
        java.util.Set<com.squareup.okhttp.Route> routeSet13 = okHttpClient10.failedRoutes;
        boolean boolean14 = okHttpClient10.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient3.getHostnameVerifier();
        java.net.Proxy proxy8 = null;
        okHttpClient3.proxy = proxy8;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        java.net.Proxy proxy17 = null;
        okHttpClient10.proxy = proxy17;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient10.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient10.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.setSSLSocketFactory(sSLSocketFactory24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient21.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean28 = okHttpClient27.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.copyWithDefaults();
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setCookieHandler(cookieHandler32);
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient31.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient21.setAuthenticator(okAuthenticator34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        java.net.Proxy proxy43 = null;
        okHttpClient36.proxy = proxy43;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setHostnameVerifier(hostnameVerifier46);
        java.util.Set<com.squareup.okhttp.Route> routeSet48 = okHttpClient45.failedRoutes;
        okHttpClient36.failedRoutes = routeSet48;
        java.util.List<java.lang.String> strList50 = okHttpClient36.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = okHttpClient36.authenticator;
        java.net.ProxySelector proxySelector52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient36.setProxySelector(proxySelector52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean55 = okHttpClient54.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient54.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient54.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray59 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet60 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet60, routeArray59);
        okHttpClient58.failedRoutes = routeSet60;
        java.net.ResponseCache responseCache63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient58.setResponseCache(responseCache63);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient58.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient35.setSSLSocketFactory(sSLSocketFactory65);
        okHttpClient10.sslSocketFactory = sSLSocketFactory65;
        okHttpClient3.sslSocketFactory = sSLSocketFactory65;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.setSSLSocketFactory(sSLSocketFactory9);
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient6.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setCookieHandler(cookieHandler17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient16.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient6.setAuthenticator(okAuthenticator19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient5.setAuthenticator(okAuthenticator19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient5.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator22);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.responseCache;
        okHttpClient4.followProtocolRedirects = false;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        okHttpClient4.sslSocketFactory = sSLSocketFactory14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean17 = okHttpClient16.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray21 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet22 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet22, routeArray21);
        okHttpClient20.failedRoutes = routeSet22;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient20.copyWithDefaults();
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient20.setCookieHandler(cookieHandler26);
        java.util.List<java.lang.String> strList28 = okHttpClient20.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList28;
        okHttpClient4.transports = strList28;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList28;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.Proxy proxy10 = null;
        okHttpClient9.proxy = proxy10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory14);
        java.net.CookieHandler cookieHandler16 = okHttpClient9.cookieHandler;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient9.authenticator;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = okAuthenticator17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        java.net.Proxy proxy11 = okHttpClient10.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.net.Proxy proxy63 = null;
        okHttpClient5.proxy = proxy63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        okHttpClient6.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient3.setConnectionPool(connectionPool20);
        java.net.Proxy proxy23 = okHttpClient22.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy23);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        java.util.Set<com.squareup.okhttp.Route> routeSet9 = okHttpClient8.failedRoutes;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setCookieHandler(cookieHandler10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.URL uRL12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection13 = okHttpClient0.open(uRL12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setFollowProtocolRedirects(true);
        okHttpClient11.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient5.failedRoutes = routeSet8;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setHostnameVerifier(hostnameVerifier16);
        java.net.Proxy proxy18 = null;
        okHttpClient11.proxy = proxy18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        java.util.Set<com.squareup.okhttp.Route> routeSet23 = okHttpClient20.failedRoutes;
        okHttpClient11.failedRoutes = routeSet23;
        java.util.List<java.lang.String> strList25 = okHttpClient11.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient11.authenticator;
        java.net.ProxySelector proxySelector27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient11.setProxySelector(proxySelector27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy32 = okHttpClient29.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient29.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient(okHttpClient35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient37.connectionPool;
        java.net.CookieHandler cookieHandler39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient37.setCookieHandler(cookieHandler39);
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient37.hostnameVerifier;
        okHttpClient29.hostnameVerifier = hostnameVerifier41;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = okHttpClient29.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient11.setHostnameVerifier(hostnameVerifier43);
        okHttpClient5.hostnameVerifier = hostnameVerifier43;
        java.net.ResponseCache responseCache46 = null;
        okHttpClient5.responseCache = responseCache46;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        okHttpClient16.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        java.net.Proxy proxy3 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient4.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient14.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient4.setAuthenticator(okAuthenticator17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        java.net.Proxy proxy26 = null;
        okHttpClient19.proxy = proxy26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient28.failedRoutes;
        okHttpClient19.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList33 = okHttpClient19.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient19.authenticator;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient19.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean38 = okHttpClient37.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient37.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray42 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet43 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet43, routeArray42);
        okHttpClient41.failedRoutes = routeSet43;
        java.net.ResponseCache responseCache46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient41.setResponseCache(responseCache46);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient41.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory48);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory48);
        java.net.CookieHandler cookieHandler52 = okHttpClient51.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler52);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.ConnectionPool connectionPool34 = okHttpClient33.connectionPool;
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = null;
        okHttpClient33.authenticator = okAuthenticator35;
        boolean boolean37 = okHttpClient33.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient3.setHostnameVerifier(hostnameVerifier4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient3.getSslSocketFactory();
        java.net.CookieHandler cookieHandler7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient3.setCookieHandler(cookieHandler7);
        java.net.ProxySelector proxySelector9 = okHttpClient3.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.getAuthenticator();
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient4.cookieHandler = cookieHandler8;
        java.net.CookieHandler cookieHandler10 = null;
        okHttpClient4.cookieHandler = cookieHandler10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator7);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.util.Set<com.squareup.okhttp.Route> routeSet56 = okHttpClient55.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.sslSocketFactory;
        java.net.ResponseCache responseCache58 = okHttpClient55.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient59.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        java.net.Proxy proxy63 = null;
        okHttpClient62.proxy = proxy63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray66 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet67 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet67, routeArray66);
        okHttpClient65.failedRoutes = routeSet67;
        java.util.List<java.lang.String> strList70 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient65.transports = strList70;
        okHttpClient62.transports = strList70;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient55.setTransports(strList70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList70);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        java.net.ProxySelector proxySelector11 = null;
        okHttpClient0.proxySelector = proxySelector11;
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = okHttpClient0.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean18 = okHttpClient17.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient17.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setProxySelector(proxySelector24);
        com.squareup.okhttp.ConnectionPool connectionPool26 = okHttpClient23.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient30.authenticator;
        java.net.ResponseCache responseCache32 = null;
        okHttpClient30.responseCache = responseCache32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.copyWithDefaults();
        java.net.ProxySelector proxySelector35 = okHttpClient34.getProxySelector();
        okHttpClient23.proxySelector = proxySelector35;
        okHttpClient16.proxySelector = proxySelector35;
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient16.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient0.setConnectionPool(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy2 = okHttpClient1.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy2);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient2.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache7 = okHttpClient2.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache7);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.Proxy proxy10 = null;
        okHttpClient9.proxy = proxy10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory14);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient9.hostnameVerifier;
        java.net.ProxySelector proxySelector17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient9.setProxySelector(proxySelector17);
        java.net.CookieHandler cookieHandler19 = okHttpClient18.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler19);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setCookieHandler(cookieHandler19);
        java.net.Proxy proxy21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setProxy(proxy21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray28 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet29 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet29, routeArray28);
        okHttpClient27.failedRoutes = routeSet29;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean33 = okHttpClient32.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setHostnameVerifier(hostnameVerifier34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.copyWithDefaults();
        java.net.ResponseCache responseCache37 = okHttpClient36.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient36.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient27.setConnectionPool(connectionPool38);
        okHttpClient22.connectionPool = connectionPool38;
        java.net.URL uRL41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection42 = okHttpClient22.open(uRL41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory15);
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setResponseCache(responseCache17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setCookieHandler(cookieHandler19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        java.util.List<java.lang.String> strList7 = okHttpClient5.transports;
        boolean boolean8 = okHttpClient5.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray14 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet15 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet15, routeArray14);
        okHttpClient13.failedRoutes = routeSet15;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient13.setCookieHandler(cookieHandler19);
        java.util.List<java.lang.String> strList21 = okHttpClient13.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList21;
        okHttpClient5.transports = strList21;
        java.net.CookieHandler cookieHandler24 = okHttpClient5.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler24);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setCookieHandler(cookieHandler13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient2.setConnectionPool(connectionPool15);
        java.net.ProxySelector proxySelector17 = okHttpClient16.getProxySelector();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient16.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier18);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        boolean boolean10 = okHttpClient7.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
        boolean boolean12 = okHttpClient11.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass18 = sSLSocketFactory17.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory17);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient9.getAuthenticator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = okAuthenticator13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        java.lang.Class<?> wildcardClass15 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.getSslSocketFactory();
        okHttpClient0.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory4);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient8.okResponseCache();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient8.hostnameVerifier;
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient8.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool13);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean6 = okHttpClient5.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.connectionPool;
        okHttpClient9.connectionPool = connectionPool15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setConnectionPool(connectionPool15);
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient17.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier18);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setHostnameVerifier(hostnameVerifier18);
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient17.failedRoutes;
        okHttpClient16.failedRoutes = routeSet20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        java.util.Set<com.squareup.okhttp.Route> routeSet29 = okHttpClient26.failedRoutes;
        okHttpClient22.failedRoutes = routeSet29;
        java.net.ResponseCache responseCache31 = okHttpClient22.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient22.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        java.net.ResponseCache responseCache38 = okHttpClient37.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient22.setConnectionPool(connectionPool39);
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        okHttpClient22.transports = strList44;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setHostnameVerifier(hostnameVerifier52);
        java.util.Set<com.squareup.okhttp.Route> routeSet54 = okHttpClient51.failedRoutes;
        okHttpClient47.failedRoutes = routeSet54;
        java.net.ResponseCache responseCache56 = okHttpClient47.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient47.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        java.net.ResponseCache responseCache63 = okHttpClient62.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool64 = okHttpClient62.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient47.setConnectionPool(connectionPool64);
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        okHttpClient47.transports = strList69;
        okHttpClient22.transports = strList69;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient16.setTransports((java.util.List<java.lang.String>) strList69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!, ]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setCookieHandler(cookieHandler17);
        java.net.ResponseCache responseCache19 = okHttpClient15.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache19);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setConnectionPool(connectionPool17);
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setAuthenticator(okAuthenticator21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        okHttpClient26.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient29.setHostnameVerifier(hostnameVerifier34);
        java.net.Proxy proxy36 = okHttpClient29.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient39.connectionPool;
        java.net.CookieHandler cookieHandler41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setCookieHandler(cookieHandler41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        java.net.Proxy proxy46 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.copyWithDefaults();
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.getAuthenticator();
        okHttpClient43.authenticator = okAuthenticator54;
        okHttpClient42.authenticator = okAuthenticator54;
        okHttpClient29.authenticator = okAuthenticator54;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient26.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient18.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient12.setAuthenticator(okAuthenticator54);
        boolean boolean61 = okHttpClient12.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setCookieHandler(cookieHandler19);
        java.net.Proxy proxy21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setProxy(proxy21);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient22.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory23);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.lang.Class<?> wildcardClass12 = okHttpClient11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.ResponseCache responseCache12 = okHttpClient7.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet6 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean8 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient7.setHostnameVerifier(hostnameVerifier12);
        java.net.Proxy proxy14 = null;
        okHttpClient7.proxy = proxy14;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setHostnameVerifier(hostnameVerifier17);
        java.util.Set<com.squareup.okhttp.Route> routeSet19 = okHttpClient16.failedRoutes;
        okHttpClient7.failedRoutes = routeSet19;
        java.util.List<java.lang.String> strList21 = okHttpClient7.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient7.authenticator;
        java.net.ProxySelector proxySelector23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient7.setProxySelector(proxySelector23);
        java.lang.String[] strArray26 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        okHttpClient7.transports = strList27;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList27;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        okHttpClient3.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        java.net.Proxy proxy13 = okHttpClient6.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient16.connectionPool;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        java.net.Proxy proxy23 = okHttpClient20.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient28.getAuthenticator();
        okHttpClient20.authenticator = okAuthenticator31;
        okHttpClient19.authenticator = okAuthenticator31;
        okHttpClient6.authenticator = okAuthenticator31;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient3.setAuthenticator(okAuthenticator31);
        java.net.ProxySelector proxySelector36 = okHttpClient3.getProxySelector();
        java.net.ProxySelector proxySelector37 = okHttpClient3.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector37);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setProxySelector(proxySelector25);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient31.authenticator;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient31.responseCache = responseCache33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.getProxySelector();
        okHttpClient24.proxySelector = proxySelector36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient17.setProxySelector(proxySelector36);
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient17.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator39);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        com.squareup.okhttp.Route[] routeArray9 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet10 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet10, routeArray9);
        okHttpClient6.failedRoutes = routeSet10;
        java.net.CookieHandler cookieHandler13 = okHttpClient6.cookieHandler;
        java.net.ResponseCache responseCache14 = null;
        okHttpClient6.responseCache = responseCache14;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler13);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.net.CookieHandler cookieHandler4 = okHttpClient3.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier5;
        java.net.Proxy proxy7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient3.setProxy(proxy7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        okHttpClient6.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient3.setConnectionPool(connectionPool20);
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient3.setHostnameVerifier(hostnameVerifier23);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient3.sslSocketFactory;
        java.net.URL uRL26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection27 = okHttpClient3.open(uRL26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory25);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.util.List<java.lang.String> strList11 = okHttpClient9.transports;
        java.util.List<java.lang.String> strList12 = okHttpClient9.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.Set<com.squareup.okhttp.Route> routeSet5 = okHttpClient0.failedRoutes;
        java.net.Proxy proxy6 = okHttpClient0.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy6);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setConnectionPool(connectionPool17);
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setAuthenticator(okAuthenticator21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        okHttpClient26.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient29.setHostnameVerifier(hostnameVerifier34);
        java.net.Proxy proxy36 = okHttpClient29.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient39.connectionPool;
        java.net.CookieHandler cookieHandler41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setCookieHandler(cookieHandler41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        java.net.Proxy proxy46 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.copyWithDefaults();
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.getAuthenticator();
        okHttpClient43.authenticator = okAuthenticator54;
        okHttpClient42.authenticator = okAuthenticator54;
        okHttpClient29.authenticator = okAuthenticator54;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient26.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient18.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient12.setAuthenticator(okAuthenticator54);
        java.net.CookieHandler cookieHandler61 = okHttpClient12.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler61);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient3.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient3.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient13.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList17 = okHttpClient13.transports;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient3.setTransports(strList17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient0.transports;
        okHttpClient0.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList11);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.util.List<java.lang.String> strList11 = okHttpClient9.getTransports();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient9.getSslSocketFactory();
        java.net.CookieHandler cookieHandler13 = okHttpClient9.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler13);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        java.net.CookieHandler cookieHandler12 = okHttpClient11.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient4.okResponseCache();
        java.util.List<java.lang.String> strList7 = okHttpClient4.getTransports();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection9 = okHttpClient4.open(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList7);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setProxySelector(proxySelector25);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient31.authenticator;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient31.responseCache = responseCache33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.getProxySelector();
        okHttpClient24.proxySelector = proxySelector36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean42 = okHttpClient41.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient41.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.setProxySelector(proxySelector48);
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient47.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient(okHttpClient53);
        com.squareup.okhttp.OkAuthenticator okAuthenticator55 = okHttpClient54.authenticator;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient54.responseCache = responseCache56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient54.copyWithDefaults();
        java.net.ProxySelector proxySelector59 = okHttpClient58.getProxySelector();
        okHttpClient47.proxySelector = proxySelector59;
        okHttpClient40.proxySelector = proxySelector59;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient24.setProxySelector(proxySelector59);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient0.setProxySelector(proxySelector59);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean65 = okHttpClient64.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient64.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray69 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet70 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet70, routeArray69);
        okHttpClient68.failedRoutes = routeSet70;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient68.copyWithDefaults();
        java.net.CookieHandler cookieHandler74 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient68.setCookieHandler(cookieHandler74);
        java.util.List<java.lang.String> strList76 = okHttpClient68.transports;
        okHttpClient0.transports = strList76;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList76);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.getAuthenticator();
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient4.cookieHandler = cookieHandler8;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient4.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setAuthenticator(okAuthenticator18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        okHttpClient11.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient4.setConnectionPool(connectionPool25);
        com.squareup.okhttp.ConnectionPool connectionPool28 = okHttpClient4.connectionPool;
        java.net.Proxy proxy29 = okHttpClient4.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy29);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.util.Set<com.squareup.okhttp.Route> routeSet56 = okHttpClient55.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = okHttpClient55.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient55.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        java.net.CookieHandler cookieHandler9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setCookieHandler(cookieHandler9);
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = okHttpClient0.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier11);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.getProxySelector();
        okHttpClient11.followProtocolRedirects = false;
        java.net.ProxySelector proxySelector15 = okHttpClient11.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector15);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setCookieHandler(cookieHandler13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient2.setConnectionPool(connectionPool15);
        java.net.ProxySelector proxySelector17 = okHttpClient2.getProxySelector();
        java.util.List<java.lang.String> strList18 = okHttpClient2.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList18);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy13 = okHttpClient12.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient4.getSslSocketFactory();
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setCookieHandler(cookieHandler13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setCookieHandler(cookieHandler20);
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = okHttpClient21.hostnameVerifier;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient14.setHostnameVerifier(hostnameVerifier22);
        java.net.ResponseCache responseCache24 = null;
        okHttpClient14.responseCache = responseCache24;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient4.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient4.authenticator;
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection11 = okHttpClient4.open(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator9);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler2 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean4 = okHttpClient3.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient3.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient3.setHostnameVerifier(hostnameVerifier8);
        boolean boolean10 = okHttpClient3.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        java.net.Proxy proxy14 = okHttpClient11.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient11.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        java.net.CookieHandler cookieHandler21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setCookieHandler(cookieHandler21);
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = okHttpClient19.hostnameVerifier;
        okHttpClient11.hostnameVerifier = hostnameVerifier23;
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient11.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient3.setHostnameVerifier(hostnameVerifier25);
        okHttpClient0.hostnameVerifier = hostnameVerifier25;
        java.lang.String[] strArray30 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList31;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList31;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory5);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient6.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        java.util.Set<com.squareup.okhttp.Route> routeSet15 = okHttpClient12.failedRoutes;
        okHttpClient8.failedRoutes = routeSet15;
        java.net.ResponseCache responseCache17 = okHttpClient8.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient8.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        java.net.ResponseCache responseCache24 = okHttpClient23.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient23.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient8.setConnectionPool(connectionPool25);
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient8.setCookieHandler(cookieHandler27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient29.setHostnameVerifier(hostnameVerifier34);
        java.net.Proxy proxy36 = okHttpClient29.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient39.connectionPool;
        java.net.CookieHandler cookieHandler41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setCookieHandler(cookieHandler41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        java.net.Proxy proxy46 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.copyWithDefaults();
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.getAuthenticator();
        okHttpClient43.authenticator = okAuthenticator54;
        okHttpClient42.authenticator = okAuthenticator54;
        okHttpClient29.authenticator = okAuthenticator54;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient28.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean60 = okHttpClient59.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient59.setHostnameVerifier(hostnameVerifier61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient59.copyWithDefaults();
        java.net.ResponseCache responseCache64 = okHttpClient63.responseCache;
        java.util.Set<com.squareup.okhttp.Route> routeSet65 = okHttpClient63.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator66 = okHttpClient63.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient58.setAuthenticator(okAuthenticator66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient6.setAuthenticator(okAuthenticator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient7.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient13.connectionPool;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = okHttpClient17.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setCookieHandler(cookieHandler26);
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient25.getAuthenticator();
        okHttpClient17.authenticator = okAuthenticator28;
        okHttpClient16.authenticator = okAuthenticator28;
        okHttpClient7.authenticator = okAuthenticator28;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient7.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier32);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray17 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet18 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet18, routeArray17);
        okHttpClient16.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setResponseCache(responseCache21);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient16.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        boolean boolean25 = okHttpClient11.getFollowProtocolRedirects();
        java.net.Proxy proxy26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient11.setProxy(proxy26);
        java.net.CookieHandler cookieHandler28 = null;
        okHttpClient27.cookieHandler = cookieHandler28;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        java.net.URL uRL17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection18 = okHttpClient0.open(uRL17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean4 = okHttpClient3.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient3.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient3.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setProxySelector(proxySelector10);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient9.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient16.responseCache = responseCache18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        java.net.ProxySelector proxySelector21 = okHttpClient20.getProxySelector();
        okHttpClient9.proxySelector = proxySelector21;
        okHttpClient2.proxySelector = proxySelector21;
        java.net.Proxy proxy24 = null;
        okHttpClient2.proxy = proxy24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean27 = okHttpClient26.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray31 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet32 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet32, routeArray31);
        okHttpClient30.failedRoutes = routeSet32;
        java.net.ResponseCache responseCache35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient30.setResponseCache(responseCache35);
        java.util.List<java.lang.String> strList37 = okHttpClient36.getTransports();
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient36.connectionPool;
        okHttpClient2.connectionPool = connectionPool38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean3 = okHttpClient2.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient2.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient6.failedRoutes = routeSet8;
        okHttpClient1.failedRoutes = routeSet8;
        com.squareup.okhttp.Route[] routeArray12 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet13 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet13, routeArray12);
        okHttpClient1.failedRoutes = routeSet13;
        java.net.CookieHandler cookieHandler16 = okHttpClient1.getCookieHandler();
        java.net.Proxy proxy17 = okHttpClient1.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy17);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        java.net.URL uRL9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection10 = okHttpClient0.open(uRL9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient2.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = okHttpClient2.getHostnameVerifier();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = okHttpClient2.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier5);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.util.List<java.lang.String> strList11 = okHttpClient9.getTransports();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient9.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy17 = null;
        okHttpClient16.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.connectionPool;
        okHttpClient19.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient16.setConnectionPool(connectionPool33);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient16.setHostnameVerifier(hostnameVerifier36);
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient37.failedRoutes;
        okHttpClient9.failedRoutes = routeSet38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet38);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.copyWithDefaults();
        java.net.ProxySelector proxySelector8 = okHttpClient7.getProxySelector();
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = null;
        okHttpClient7.responseCache = responseCache11;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = okHttpClient0.proxy;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient0.okResponseCache();
        java.util.List<java.lang.String> strList10 = okHttpClient0.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = strList10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient9.connectionPool;
        okHttpClient4.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.setAuthenticator(okAuthenticator19);
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient12.setResponseCache(responseCache21);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient12.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.ConnectionPool connectionPool32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setConnectionPool(connectionPool32);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory34);
        java.net.CookieHandler cookieHandler36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setCookieHandler(cookieHandler36);
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setResponseCache(responseCache38);
        okHttpClient39.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient45.authenticator;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient45.responseCache = responseCache47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector50 = okHttpClient49.getProxySelector();
        okHttpClient39.proxySelector = proxySelector50;
        okHttpClient27.proxySelector = proxySelector50;
        okHttpClient4.proxySelector = proxySelector50;
        java.net.Proxy proxy54 = okHttpClient4.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy54);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient8.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier10);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator13);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.net.Proxy proxy63 = okHttpClient5.getProxy();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory64 = okHttpClient5.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory64);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient6.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        okHttpClient4.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient7.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient7.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator11);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        java.net.Proxy proxy13 = okHttpClient12.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient12.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier14);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        java.net.ProxySelector proxySelector10 = okHttpClient0.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector10);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray13 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet14 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet14, routeArray13);
        okHttpClient12.failedRoutes = routeSet14;
        java.util.List<java.lang.String> strList17 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient12.transports = strList17;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        okHttpClient12.authenticator = okAuthenticator19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient(okHttpClient21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool24 = okHttpClient23.connectionPool;
        java.net.CookieHandler cookieHandler25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setCookieHandler(cookieHandler25);
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient23.hostnameVerifier;
        okHttpClient12.hostnameVerifier = hostnameVerifier27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient7.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean31 = okHttpClient30.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient30.setHostnameVerifier(hostnameVerifier35);
        boolean boolean37 = okHttpClient30.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        java.net.Proxy proxy41 = okHttpClient38.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient38.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient44.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool47 = okHttpClient46.connectionPool;
        java.net.CookieHandler cookieHandler48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setCookieHandler(cookieHandler48);
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient46.hostnameVerifier;
        okHttpClient38.hostnameVerifier = hostnameVerifier50;
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = okHttpClient38.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient30.setHostnameVerifier(hostnameVerifier52);
        okHttpClient7.hostnameVerifier = hostnameVerifier52;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray23 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet24 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet24, routeArray23);
        okHttpClient22.failedRoutes = routeSet24;
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient22.setResponseCache(responseCache27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient22.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean32 = okHttpClient31.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient31.setHostnameVerifier(hostnameVerifier36);
        boolean boolean38 = okHttpClient31.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setHostnameVerifier(hostnameVerifier40);
        java.net.Proxy proxy42 = okHttpClient39.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient39.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient47.connectionPool;
        java.net.CookieHandler cookieHandler49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setCookieHandler(cookieHandler49);
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = okHttpClient47.hostnameVerifier;
        okHttpClient39.hostnameVerifier = hostnameVerifier51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = okHttpClient39.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient31.setHostnameVerifier(hostnameVerifier53);
        okHttpClient0.hostnameVerifier = hostnameVerifier53;
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient0.setCookieHandler(cookieHandler56);
        java.net.ProxySelector proxySelector58 = null;
        okHttpClient57.proxySelector = proxySelector58;
        java.net.Proxy proxy60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient57.setProxy(proxy60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setCookieHandler(cookieHandler11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient10.getAuthenticator();
        java.net.Proxy proxy14 = null;
        okHttpClient10.proxy = proxy14;
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient10.hostnameVerifier;
        okHttpClient5.hostnameVerifier = hostnameVerifier16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory25 = okHttpClient18.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean27 = okHttpClient26.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.connectionPool;
        okHttpClient18.connectionPool = connectionPool31;
        java.net.Proxy proxy33 = okHttpClient18.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient34.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient34.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool47 = okHttpClient46.connectionPool;
        okHttpClient34.connectionPool = connectionPool47;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient34.setSSLSocketFactory(sSLSocketFactory49);
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient34.setResponseCache(responseCache51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean54 = okHttpClient53.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient53.setHostnameVerifier(hostnameVerifier58);
        com.squareup.okhttp.OkAuthenticator okAuthenticator60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient53.setAuthenticator(okAuthenticator60);
        java.net.ResponseCache responseCache62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient53.setResponseCache(responseCache62);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient53.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient53.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient66.setHostnameVerifier(hostnameVerifier67);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient69.setHostnameVerifier(hostnameVerifier70);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = new com.squareup.okhttp.OkHttpClient(okHttpClient71);
        com.squareup.okhttp.ConnectionPool connectionPool73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient71.setConnectionPool(connectionPool73);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient71.setSSLSocketFactory(sSLSocketFactory75);
        java.net.CookieHandler cookieHandler77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient76.setCookieHandler(cookieHandler77);
        java.net.ResponseCache responseCache79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient76.setResponseCache(responseCache79);
        okHttpClient80.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient83.setHostnameVerifier(hostnameVerifier84);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = new com.squareup.okhttp.OkHttpClient(okHttpClient85);
        com.squareup.okhttp.OkAuthenticator okAuthenticator87 = okHttpClient86.authenticator;
        java.net.ResponseCache responseCache88 = null;
        okHttpClient86.responseCache = responseCache88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient86.copyWithDefaults();
        java.net.ProxySelector proxySelector91 = okHttpClient90.getProxySelector();
        okHttpClient80.proxySelector = proxySelector91;
        okHttpClient68.proxySelector = proxySelector91;
        okHttpClient52.proxySelector = proxySelector91;
        com.squareup.okhttp.OkHttpClient okHttpClient95 = okHttpClient18.setProxySelector(proxySelector91);
        com.squareup.okhttp.OkHttpClient okHttpClient96 = okHttpClient5.setProxySelector(proxySelector91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient96);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.ResponseCache responseCache12 = okHttpClient7.responseCache;
        java.net.ProxySelector proxySelector13 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        java.net.ResponseCache responseCache19 = null;
        okHttpClient18.responseCache = responseCache19;
        java.net.CookieHandler cookieHandler21 = okHttpClient18.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        java.util.Set<com.squareup.okhttp.Route> routeSet29 = okHttpClient26.failedRoutes;
        okHttpClient22.failedRoutes = routeSet29;
        java.net.ResponseCache responseCache31 = okHttpClient22.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = okHttpClient22.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        java.net.ResponseCache responseCache38 = okHttpClient37.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient22.setConnectionPool(connectionPool39);
        okHttpClient18.connectionPool = connectionPool39;
        java.net.Proxy proxy42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient18.setProxy(proxy42);
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient43.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray46 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet47 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet47, routeArray46);
        okHttpClient45.failedRoutes = routeSet47;
        java.util.List<java.lang.String> strList50 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient45.transports = strList50;
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient45.setResponseCache(responseCache52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean55 = okHttpClient54.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient54.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient54.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool59 = okHttpClient58.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool60 = okHttpClient58.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet61 = okHttpClient58.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient58.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = okHttpClient63.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient53.setAuthenticator(okAuthenticator64);
        okHttpClient43.authenticator = okAuthenticator64;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient7.setAuthenticator(okAuthenticator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.CookieHandler cookieHandler3 = null;
        okHttpClient2.cookieHandler = cookieHandler3;
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList7;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList7;
        okHttpClient2.transports = strList7;
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient2.getConnectionPool();
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection14 = okHttpClient2.open(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient10.getTransports();
        java.util.List<java.lang.String> strList12 = okHttpClient10.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient13.setAuthenticator(okAuthenticator20);
        java.util.List<java.lang.String> strList22 = okHttpClient13.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient23.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient23.setAuthenticator(okAuthenticator30);
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient23.setResponseCache(responseCache32);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient23.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient23.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient(okHttpClient41);
        com.squareup.okhttp.ConnectionPool connectionPool43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setConnectionPool(connectionPool43);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient41.setSSLSocketFactory(sSLSocketFactory45);
        java.net.CookieHandler cookieHandler47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setCookieHandler(cookieHandler47);
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient46.setResponseCache(responseCache49);
        okHttpClient50.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient53.setHostnameVerifier(hostnameVerifier54);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient(okHttpClient55);
        com.squareup.okhttp.OkAuthenticator okAuthenticator57 = okHttpClient56.authenticator;
        java.net.ResponseCache responseCache58 = null;
        okHttpClient56.responseCache = responseCache58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient56.copyWithDefaults();
        java.net.ProxySelector proxySelector61 = okHttpClient60.getProxySelector();
        okHttpClient50.proxySelector = proxySelector61;
        okHttpClient38.proxySelector = proxySelector61;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient13.setProxySelector(proxySelector61);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient10.setProxySelector(proxySelector61);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean67 = okHttpClient66.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient66.setHostnameVerifier(hostnameVerifier68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient66.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray71 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet72 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet72, routeArray71);
        okHttpClient70.failedRoutes = routeSet72;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient70.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory76 = okHttpClient70.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory76);
        javax.net.ssl.HostnameVerifier hostnameVerifier78 = okHttpClient10.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier78);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setHostnameVerifier(hostnameVerifier18);
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient17.failedRoutes;
        okHttpClient16.failedRoutes = routeSet20;
        java.net.CookieHandler cookieHandler22 = null;
        okHttpClient16.cookieHandler = cookieHandler22;
        java.net.Proxy proxy24 = okHttpClient16.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy24);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.net.CookieHandler cookieHandler4 = okHttpClient3.cookieHandler;
        java.net.Proxy proxy5 = okHttpClient3.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        java.net.Proxy proxy13 = null;
        okHttpClient6.proxy = proxy13;
        boolean boolean15 = okHttpClient6.followProtocolRedirects;
        boolean boolean16 = okHttpClient6.followProtocolRedirects;
        java.net.Proxy proxy17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient6.setProxy(proxy17);
        java.net.Proxy proxy19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setProxy(proxy19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool26 = okHttpClient25.connectionPool;
        okHttpClient18.connectionPool = connectionPool26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient3.setConnectionPool(connectionPool26);
        java.util.List<java.lang.String> strList29 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient3.setTransports(strList29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        java.net.Proxy proxy16 = okHttpClient13.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient(okHttpClient19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool22 = okHttpClient21.connectionPool;
        java.net.CookieHandler cookieHandler23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setCookieHandler(cookieHandler23);
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = okHttpClient21.hostnameVerifier;
        okHttpClient13.hostnameVerifier = hostnameVerifier25;
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = okHttpClient13.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient0.setHostnameVerifier(hostnameVerifier27);
        java.net.Proxy proxy29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient0.setProxy(proxy29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.util.List<java.lang.String> strList63 = okHttpClient62.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean65 = okHttpClient64.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient64.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient64.setHostnameVerifier(hostnameVerifier69);
        java.net.Proxy proxy71 = null;
        okHttpClient64.proxy = proxy71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient73.setHostnameVerifier(hostnameVerifier74);
        java.util.Set<com.squareup.okhttp.Route> routeSet76 = okHttpClient73.failedRoutes;
        okHttpClient64.failedRoutes = routeSet76;
        java.util.List<java.lang.String> strList78 = okHttpClient64.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator79 = okHttpClient64.authenticator;
        java.net.ProxySelector proxySelector80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient64.setProxySelector(proxySelector80);
        java.lang.String[] strArray83 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        okHttpClient64.transports = strList84;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList84;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient62.setTransports((java.util.List<java.lang.String>) strList84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setProxy(proxy11);
        java.net.ProxySelector proxySelector13 = null;
        okHttpClient0.proxySelector = proxySelector13;
        java.net.ResponseCache responseCache15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setResponseCache(responseCache15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        java.net.CookieHandler cookieHandler21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setCookieHandler(cookieHandler21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setHostnameVerifier(hostnameVerifier24);
        java.net.Proxy proxy26 = okHttpClient23.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean28 = okHttpClient27.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.copyWithDefaults();
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setCookieHandler(cookieHandler32);
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient31.getAuthenticator();
        okHttpClient23.authenticator = okAuthenticator34;
        okHttpClient22.authenticator = okAuthenticator34;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient0.setAuthenticator(okAuthenticator34);
        java.lang.Class<?> wildcardClass38 = okHttpClient37.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient3.connectionPool;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory8 = okHttpClient3.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory8);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        java.util.List<java.lang.String> strList13 = okHttpClient12.getTransports();
        java.util.List<java.lang.String> strList14 = okHttpClient12.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector17 = okHttpClient16.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool23 = okHttpClient22.connectionPool;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient22.okResponseCache();
        java.util.List<java.lang.String> strList25 = okHttpClient22.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList25;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList25;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient16.setTransports(strList25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient3.getConnectionPool();
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient3.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory10);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient7.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = okHttpClient17.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient7.setAuthenticator(okAuthenticator20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient3.setAuthenticator(okAuthenticator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory3;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray11 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet12 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet12, routeArray11);
        okHttpClient10.failedRoutes = routeSet12;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient10.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = okHttpClient0.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler19);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.CookieHandler cookieHandler10 = okHttpClient9.getCookieHandler();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = okHttpClient9.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory11);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache5 = okHttpClient4.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        java.net.Proxy proxy7 = okHttpClient4.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = okHttpClient4.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier8);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setResponseCache(responseCache10);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient7.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator12);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(hostnameVerifier4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = okHttpClient5.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier6);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setProxy(proxy11);
        java.net.Proxy proxy13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setProxy(proxy13);
        java.net.ProxySelector proxySelector15 = okHttpClient12.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector15);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient9.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier10;
        boolean boolean12 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient7.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet14 = okHttpClient7.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient18.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory20 = null;
        okHttpClient18.sslSocketFactory = sSLSocketFactory20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean23 = okHttpClient22.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient22.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient22.setHostnameVerifier(hostnameVerifier27);
        java.net.Proxy proxy29 = null;
        okHttpClient22.proxy = proxy29;
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient22.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient22.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator33 = null;
        okHttpClient22.authenticator = okAuthenticator33;
        java.net.CookieHandler cookieHandler35 = null;
        okHttpClient22.cookieHandler = cookieHandler35;
        java.net.CookieHandler cookieHandler37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient22.setCookieHandler(cookieHandler37);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient22.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean41 = okHttpClient40.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient40.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setProxySelector(proxySelector47);
        com.squareup.okhttp.ConnectionPool connectionPool49 = okHttpClient46.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setHostnameVerifier(hostnameVerifier51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient(okHttpClient52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient53.authenticator;
        java.net.ResponseCache responseCache55 = null;
        okHttpClient53.responseCache = responseCache55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.copyWithDefaults();
        java.net.ProxySelector proxySelector58 = okHttpClient57.getProxySelector();
        okHttpClient46.proxySelector = proxySelector58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient(okHttpClient60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient60.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean64 = okHttpClient63.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setHostnameVerifier(hostnameVerifier65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient63.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient63.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient69.setProxySelector(proxySelector70);
        com.squareup.okhttp.ConnectionPool connectionPool72 = okHttpClient69.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier74 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient73.setHostnameVerifier(hostnameVerifier74);
        com.squareup.okhttp.OkHttpClient okHttpClient76 = new com.squareup.okhttp.OkHttpClient(okHttpClient75);
        com.squareup.okhttp.OkAuthenticator okAuthenticator77 = okHttpClient76.authenticator;
        java.net.ResponseCache responseCache78 = null;
        okHttpClient76.responseCache = responseCache78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient76.copyWithDefaults();
        java.net.ProxySelector proxySelector81 = okHttpClient80.getProxySelector();
        okHttpClient69.proxySelector = proxySelector81;
        okHttpClient62.proxySelector = proxySelector81;
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient46.setProxySelector(proxySelector81);
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient22.setProxySelector(proxySelector81);
        okHttpClient18.proxySelector = proxySelector81;
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient7.setProxySelector(proxySelector81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient87);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient3.getHostnameVerifier();
        java.net.Proxy proxy8 = okHttpClient3.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient3.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient17.setHostnameVerifier(hostnameVerifier18);
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient17.failedRoutes;
        okHttpClient16.failedRoutes = routeSet20;
        java.net.ResponseCache responseCache22 = okHttpClient16.getResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient16.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator23);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        boolean boolean2 = okHttpClient0.followProtocolRedirects;
        java.util.List<java.lang.String> strList3 = okHttpClient0.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList3);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        com.squareup.okhttp.ConnectionPool connectionPool12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setConnectionPool(connectionPool12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory14);
        java.net.Proxy proxy16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setProxy(proxy16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setAuthenticator(okAuthenticator18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient20.setHostnameVerifier(hostnameVerifier25);
        java.net.Proxy proxy27 = null;
        okHttpClient20.proxy = proxy27;
        boolean boolean29 = okHttpClient20.followProtocolRedirects;
        boolean boolean30 = okHttpClient20.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray32 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet33 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet33, routeArray32);
        okHttpClient31.failedRoutes = routeSet33;
        java.util.List<java.lang.String> strList36 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient31.transports = strList36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        java.net.Proxy proxy42 = null;
        okHttpClient41.proxy = proxy42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient44.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient44.setAuthenticator(okAuthenticator51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean54 = okHttpClient53.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.connectionPool;
        okHttpClient44.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient41.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient31.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient20.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient15.setConnectionPool(connectionPool58);
        java.util.Set<com.squareup.okhttp.Route> routeSet64 = okHttpClient63.failedRoutes;
        okHttpClient2.failedRoutes = routeSet64;
        java.net.CookieHandler cookieHandler66 = null;
        okHttpClient2.cookieHandler = cookieHandler66;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet64);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.followProtocolRedirects;
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient7.proxySelector = proxySelector9;
        java.util.Set<com.squareup.okhttp.Route> routeSet11 = okHttpClient7.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray17 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet18 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet18, routeArray17);
        okHttpClient16.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setResponseCache(responseCache21);
        java.net.ResponseCache responseCache23 = okHttpClient16.responseCache;
        okHttpClient16.followProtocolRedirects = false;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory26 = null;
        okHttpClient16.sslSocketFactory = sSLSocketFactory26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray33 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet34 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet34, routeArray33);
        okHttpClient32.failedRoutes = routeSet34;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient32.copyWithDefaults();
        java.net.CookieHandler cookieHandler38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient32.setCookieHandler(cookieHandler38);
        java.util.List<java.lang.String> strList40 = okHttpClient32.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        okHttpClient16.transports = strList40;
        okHttpClient7.transports = strList40;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        java.net.URL uRL10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection11 = okHttpClient9.open(uRL10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory3);
        java.net.ProxySelector proxySelector5 = null;
        okHttpClient4.proxySelector = proxySelector5;
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.authenticator;
        java.util.Set<com.squareup.okhttp.Route> routeSet8 = okHttpClient4.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet8);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = null;
        okHttpClient14.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setHostnameVerifier(hostnameVerifier24);
        java.util.Set<com.squareup.okhttp.Route> routeSet26 = okHttpClient23.failedRoutes;
        okHttpClient14.failedRoutes = routeSet26;
        java.util.List<java.lang.String> strList28 = okHttpClient14.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = okHttpClient14.authenticator;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient14.setProxySelector(proxySelector30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        java.net.Proxy proxy35 = okHttpClient32.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient32.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool41 = okHttpClient40.connectionPool;
        java.net.CookieHandler cookieHandler42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setCookieHandler(cookieHandler42);
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient40.hostnameVerifier;
        okHttpClient32.hostnameVerifier = hostnameVerifier44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient32.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient14.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient13.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient52.authenticator;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient52.responseCache = responseCache54;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient52.getHostnameVerifier();
        java.net.Proxy proxy57 = null;
        okHttpClient52.proxy = proxy57;
        java.net.ResponseCache responseCache59 = okHttpClient52.getResponseCache();
        java.net.Proxy proxy60 = okHttpClient52.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient61.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient(okHttpClient63);
        com.squareup.okhttp.ConnectionPool connectionPool65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setConnectionPool(connectionPool65);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient63.setSSLSocketFactory(sSLSocketFactory67);
        java.net.CookieHandler cookieHandler69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient68.setCookieHandler(cookieHandler69);
        java.net.ResponseCache responseCache71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.setResponseCache(responseCache71);
        okHttpClient72.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient75.setHostnameVerifier(hostnameVerifier76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient(okHttpClient77);
        com.squareup.okhttp.OkAuthenticator okAuthenticator79 = okHttpClient78.authenticator;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient78.responseCache = responseCache80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient78.copyWithDefaults();
        java.net.ProxySelector proxySelector83 = okHttpClient82.getProxySelector();
        okHttpClient72.proxySelector = proxySelector83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient52.setProxySelector(proxySelector83);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient13.setProxySelector(proxySelector83);
        javax.net.ssl.HostnameVerifier hostnameVerifier87 = okHttpClient13.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier87);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray13 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet14 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet14, routeArray13);
        okHttpClient12.failedRoutes = routeSet14;
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setResponseCache(responseCache17);
        java.util.List<java.lang.String> strList19 = okHttpClient18.getTransports();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient18.connectionPool;
        okHttpClient5.connectionPool = connectionPool20;
        java.net.ProxySelector proxySelector22 = okHttpClient5.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector22);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient9.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.setAuthenticator(okAuthenticator16);
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient9.setResponseCache(responseCache18);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient9.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = okHttpClient22.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient22.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.connectionPool;
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setCookieHandler(cookieHandler32);
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient30.hostnameVerifier;
        okHttpClient22.hostnameVerifier = hostnameVerifier34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient22.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient9.setHostnameVerifier(hostnameVerifier36);
        okHttpClient0.hostnameVerifier = hostnameVerifier36;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean40 = okHttpClient39.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient39.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient43.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setFollowProtocolRedirects(true);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache47 = okHttpClient43.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = okHttpClient43.authenticator;
        okHttpClient0.authenticator = okAuthenticator48;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator48);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        boolean boolean9 = okHttpClient6.followProtocolRedirects;
        java.net.CookieHandler cookieHandler10 = null;
        okHttpClient6.cookieHandler = cookieHandler10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.ConnectionPool connectionPool16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setConnectionPool(connectionPool16);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient14.setSSLSocketFactory(sSLSocketFactory18);
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setCookieHandler(cookieHandler20);
        java.net.ResponseCache responseCache22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.setResponseCache(responseCache22);
        okHttpClient23.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = okHttpClient29.authenticator;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient29.responseCache = responseCache31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        java.net.ProxySelector proxySelector34 = okHttpClient33.getProxySelector();
        okHttpClient23.proxySelector = proxySelector34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient6.setProxySelector(proxySelector34);
        okHttpClient5.proxySelector = proxySelector34;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.util.List<java.lang.String> strList63 = okHttpClient62.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient3.getHostnameVerifier();
        java.net.Proxy proxy8 = null;
        okHttpClient3.proxy = proxy8;
        java.net.ResponseCache responseCache10 = okHttpClient3.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setConnectionPool(connectionPool15);
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.setAuthenticator(okAuthenticator19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray26 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet27 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet27, routeArray26);
        okHttpClient25.failedRoutes = routeSet27;
        java.net.ResponseCache responseCache30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient25.setResponseCache(responseCache30);
        java.net.ResponseCache responseCache32 = okHttpClient25.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory33 = okHttpClient25.getSslSocketFactory();
        okHttpClient16.sslSocketFactory = sSLSocketFactory33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory33);
        java.net.Proxy proxy36 = null;
        okHttpClient35.proxy = proxy36;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        java.net.Proxy proxy13 = okHttpClient12.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        java.net.ResponseCache responseCache15 = okHttpClient0.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache15);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean8 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray12 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet13 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet13, routeArray12);
        okHttpClient11.failedRoutes = routeSet13;
        okHttpClient6.failedRoutes = routeSet13;
        okHttpClient0.failedRoutes = routeSet13;
        java.net.URL uRL18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection19 = okHttpClient0.open(uRL18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        java.net.ProxySelector proxySelector9 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient0.connectionPool;
        java.net.ProxySelector proxySelector11 = okHttpClient0.getProxySelector();
        java.net.CookieHandler cookieHandler12 = okHttpClient0.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        boolean boolean15 = okHttpClient12.followProtocolRedirects;
        java.net.CookieHandler cookieHandler16 = null;
        okHttpClient12.cookieHandler = cookieHandler16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient20);
        com.squareup.okhttp.ConnectionPool connectionPool22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setConnectionPool(connectionPool22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory24);
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setCookieHandler(cookieHandler26);
        java.net.ResponseCache responseCache28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient25.setResponseCache(responseCache28);
        okHttpClient29.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkAuthenticator okAuthenticator36 = okHttpClient35.authenticator;
        java.net.ResponseCache responseCache37 = null;
        okHttpClient35.responseCache = responseCache37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        java.net.ProxySelector proxySelector40 = okHttpClient39.getProxySelector();
        okHttpClient29.proxySelector = proxySelector40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient12.setProxySelector(proxySelector40);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient7.setProxySelector(proxySelector40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient7.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator44);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        java.net.Proxy proxy3 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector4 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.ConnectionPool connectionPool9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setConnectionPool(connectionPool9);
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray20 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet21 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet21, routeArray20);
        okHttpClient19.failedRoutes = routeSet21;
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setResponseCache(responseCache24);
        java.net.ResponseCache responseCache26 = okHttpClient19.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient19.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory27;
        okHttpClient0.sslSocketFactory = sSLSocketFactory27;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean31 = okHttpClient30.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.copyWithDefaults();
        java.net.CookieHandler cookieHandler35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setCookieHandler(cookieHandler35);
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.getConnectionPool();
        okHttpClient0.connectionPool = connectionPool37;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient(okHttpClient39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool42 = okHttpClient41.connectionPool;
        okHttpClient0.connectionPool = connectionPool42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool42);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient3.connectionPool;
        okHttpClient3.followProtocolRedirects = true;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient3.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient0.setCookieHandler(cookieHandler18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        boolean boolean4 = okHttpClient2.getFollowProtocolRedirects();
        java.net.URL uRL5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection6 = okHttpClient2.open(uRL5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient11.getSslSocketFactory();
        java.net.Proxy proxy13 = okHttpClient11.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        java.net.ProxySelector proxySelector9 = okHttpClient5.getProxySelector();
        java.net.CookieHandler cookieHandler10 = null;
        okHttpClient5.cookieHandler = cookieHandler10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setResponseCache(responseCache10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setHostnameVerifier(hostnameVerifier22);
        java.util.Set<com.squareup.okhttp.Route> routeSet24 = okHttpClient21.failedRoutes;
        okHttpClient12.failedRoutes = routeSet24;
        java.util.List<java.lang.String> strList26 = okHttpClient12.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator27 = okHttpClient12.authenticator;
        java.net.ProxySelector proxySelector28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient12.setProxySelector(proxySelector28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean31 = okHttpClient30.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray35 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet36 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet36, routeArray35);
        okHttpClient34.failedRoutes = routeSet36;
        java.net.ResponseCache responseCache39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient34.setResponseCache(responseCache39);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient34.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient12.setSSLSocketFactory(sSLSocketFactory41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory41);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        java.net.CookieHandler cookieHandler49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient48.setCookieHandler(cookieHandler49);
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = okHttpClient48.getAuthenticator();
        java.util.List<java.lang.String> strList52 = okHttpClient48.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient43.setTransports(strList52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList52);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.Proxy proxy10 = null;
        okHttpClient9.proxy = proxy10;
        java.net.ResponseCache responseCache12 = null;
        okHttpClient9.responseCache = responseCache12;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory14);
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = okHttpClient9.getHostnameVerifier();
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient9.authenticator;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient9.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.setSSLSocketFactory(sSLSocketFactory23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient20.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean27 = okHttpClient26.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient26.copyWithDefaults();
        java.net.CookieHandler cookieHandler31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setCookieHandler(cookieHandler31);
        com.squareup.okhttp.OkAuthenticator okAuthenticator33 = okHttpClient30.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient20.setAuthenticator(okAuthenticator33);
        okHttpClient9.authenticator = okAuthenticator33;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy64 = okHttpClient63.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient63.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory66 = null;
        okHttpClient63.sslSocketFactory = sSLSocketFactory66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean69 = okHttpClient68.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient68.setHostnameVerifier(hostnameVerifier70);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.copyWithDefaults();
        java.net.CookieHandler cookieHandler73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setCookieHandler(cookieHandler73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient76 = new com.squareup.okhttp.OkHttpClient(okHttpClient75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient75.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool78 = okHttpClient77.connectionPool;
        okHttpClient72.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient63.setConnectionPool(connectionPool78);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient62.setConnectionPool(connectionPool78);
        java.util.List<java.lang.String> strList82 = okHttpClient62.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList82);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient3.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray9 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet10 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet10, routeArray9);
        okHttpClient8.failedRoutes = routeSet10;
        java.util.List<java.lang.String> strList13 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient8.transports = strList13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        okHttpClient15.followProtocolRedirects = true;
        java.net.Proxy proxy18 = okHttpClient15.proxy;
        java.net.Proxy proxy19 = okHttpClient15.getProxy();
        java.net.Proxy proxy20 = okHttpClient15.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient21.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.setAuthenticator(okAuthenticator28);
        java.net.Proxy proxy30 = okHttpClient29.proxy;
        java.net.ProxySelector proxySelector31 = okHttpClient29.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = null;
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        java.net.CookieHandler cookieHandler40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setCookieHandler(cookieHandler40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient39.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient29.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient15.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient3.setAuthenticator(okAuthenticator42);
        okHttpClient46.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean17 = okHttpClient16.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setHostnameVerifier(hostnameVerifier21);
        java.net.Proxy proxy23 = null;
        okHttpClient16.proxy = proxy23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setHostnameVerifier(hostnameVerifier26);
        java.util.Set<com.squareup.okhttp.Route> routeSet28 = okHttpClient25.failedRoutes;
        okHttpClient16.failedRoutes = routeSet28;
        java.util.List<java.lang.String> strList30 = okHttpClient16.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient16.authenticator;
        java.net.ProxySelector proxySelector32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient16.setProxySelector(proxySelector32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray39 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet40 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet40, routeArray39);
        okHttpClient38.failedRoutes = routeSet40;
        java.net.ResponseCache responseCache43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient38.setResponseCache(responseCache43);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory45 = okHttpClient38.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient16.setSSLSocketFactory(sSLSocketFactory45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient47.setHostnameVerifier(hostnameVerifier52);
        boolean boolean54 = okHttpClient47.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setHostnameVerifier(hostnameVerifier56);
        java.net.Proxy proxy58 = okHttpClient55.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient55.setHostnameVerifier(hostnameVerifier59);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient(okHttpClient61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient61.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool64 = okHttpClient63.connectionPool;
        java.net.CookieHandler cookieHandler65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setCookieHandler(cookieHandler65);
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = okHttpClient63.hostnameVerifier;
        okHttpClient55.hostnameVerifier = hostnameVerifier67;
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = okHttpClient55.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient47.setHostnameVerifier(hostnameVerifier69);
        okHttpClient16.hostnameVerifier = hostnameVerifier69;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient15.setHostnameVerifier(hostnameVerifier69);
        java.net.ResponseCache responseCache73 = okHttpClient72.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache73);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.connectionPool;
        java.net.CookieHandler cookieHandler16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setCookieHandler(cookieHandler16);
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient14.hostnameVerifier;
        okHttpClient0.hostnameVerifier = hostnameVerifier18;
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient0.connectionPool;
        java.net.ProxySelector proxySelector21 = okHttpClient0.getProxySelector();
        java.net.ResponseCache responseCache22 = okHttpClient0.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache22);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.followProtocolRedirects;
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient7.proxySelector = proxySelector9;
        java.net.ResponseCache responseCache11 = okHttpClient7.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient5.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient10);
        com.squareup.okhttp.ConnectionPool connectionPool12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setConnectionPool(connectionPool12);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory14);
        java.net.Proxy proxy16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setProxy(proxy16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.setAuthenticator(okAuthenticator18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient20.setHostnameVerifier(hostnameVerifier25);
        java.net.Proxy proxy27 = null;
        okHttpClient20.proxy = proxy27;
        boolean boolean29 = okHttpClient20.followProtocolRedirects;
        boolean boolean30 = okHttpClient20.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray32 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet33 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet33, routeArray32);
        okHttpClient31.failedRoutes = routeSet33;
        java.util.List<java.lang.String> strList36 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient31.transports = strList36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        java.net.Proxy proxy42 = null;
        okHttpClient41.proxy = proxy42;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient44.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkAuthenticator okAuthenticator51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient44.setAuthenticator(okAuthenticator51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean54 = okHttpClient53.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient57.connectionPool;
        okHttpClient44.connectionPool = connectionPool58;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient41.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient31.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient20.setConnectionPool(connectionPool58);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient15.setConnectionPool(connectionPool58);
        java.util.Set<com.squareup.okhttp.Route> routeSet64 = okHttpClient63.failedRoutes;
        okHttpClient5.failedRoutes = routeSet64;
        java.net.Proxy proxy66 = okHttpClient5.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy66);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.net.CookieHandler cookieHandler4 = okHttpClient3.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier5;
        java.net.CookieHandler cookieHandler7 = null;
        okHttpClient3.cookieHandler = cookieHandler7;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler4);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        okHttpClient6.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient3.setConnectionPool(connectionPool20);
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient3.setHostnameVerifier(hostnameVerifier23);
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient24.failedRoutes;
        java.net.ResponseCache responseCache26 = okHttpClient24.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache26);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ResponseCache responseCache59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient58.setResponseCache(responseCache59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        java.net.Proxy proxy7 = okHttpClient3.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy7);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = okHttpClient0.sslSocketFactory;
        boolean boolean4 = okHttpClient0.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        java.net.URL uRL7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection8 = okHttpClient6.open(uRL7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        java.net.CookieHandler cookieHandler6 = null;
        okHttpClient2.cookieHandler = cookieHandler6;
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient2.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator8);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        java.net.ProxySelector proxySelector10 = okHttpClient8.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setHostnameVerifier(hostnameVerifier16);
        java.net.Proxy proxy18 = null;
        okHttpClient11.proxy = proxy18;
        boolean boolean20 = okHttpClient11.followProtocolRedirects;
        boolean boolean21 = okHttpClient11.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray23 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet24 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet24, routeArray23);
        okHttpClient22.failedRoutes = routeSet24;
        java.util.List<java.lang.String> strList27 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient22.transports = strList27;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        java.net.Proxy proxy33 = null;
        okHttpClient32.proxy = proxy33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient35.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient35.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool49 = okHttpClient48.connectionPool;
        okHttpClient35.connectionPool = connectionPool49;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient32.setConnectionPool(connectionPool49);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient22.setConnectionPool(connectionPool49);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient11.setConnectionPool(connectionPool49);
        okHttpClient8.connectionPool = connectionPool49;
        java.net.Proxy proxy55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient8.setProxy(proxy55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = null;
        okHttpClient14.proxy = proxy21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setHostnameVerifier(hostnameVerifier24);
        java.util.Set<com.squareup.okhttp.Route> routeSet26 = okHttpClient23.failedRoutes;
        okHttpClient14.failedRoutes = routeSet26;
        java.util.List<java.lang.String> strList28 = okHttpClient14.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = okHttpClient14.authenticator;
        java.net.ProxySelector proxySelector30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient14.setProxySelector(proxySelector30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        java.net.Proxy proxy35 = okHttpClient32.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient32.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool41 = okHttpClient40.connectionPool;
        java.net.CookieHandler cookieHandler42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setCookieHandler(cookieHandler42);
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = okHttpClient40.hostnameVerifier;
        okHttpClient32.hostnameVerifier = hostnameVerifier44;
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = okHttpClient32.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient14.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient13.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient(okHttpClient51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient52.authenticator;
        java.net.ResponseCache responseCache54 = null;
        okHttpClient52.responseCache = responseCache54;
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = okHttpClient52.getHostnameVerifier();
        java.net.Proxy proxy57 = null;
        okHttpClient52.proxy = proxy57;
        java.net.ResponseCache responseCache59 = okHttpClient52.getResponseCache();
        java.net.Proxy proxy60 = okHttpClient52.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient61.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient(okHttpClient63);
        com.squareup.okhttp.ConnectionPool connectionPool65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient63.setConnectionPool(connectionPool65);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient63.setSSLSocketFactory(sSLSocketFactory67);
        java.net.CookieHandler cookieHandler69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient68.setCookieHandler(cookieHandler69);
        java.net.ResponseCache responseCache71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.setResponseCache(responseCache71);
        okHttpClient72.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient75.setHostnameVerifier(hostnameVerifier76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = new com.squareup.okhttp.OkHttpClient(okHttpClient77);
        com.squareup.okhttp.OkAuthenticator okAuthenticator79 = okHttpClient78.authenticator;
        java.net.ResponseCache responseCache80 = null;
        okHttpClient78.responseCache = responseCache80;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient78.copyWithDefaults();
        java.net.ProxySelector proxySelector83 = okHttpClient82.getProxySelector();
        okHttpClient72.proxySelector = proxySelector83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient52.setProxySelector(proxySelector83);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient13.setProxySelector(proxySelector83);
        java.net.Proxy proxy87 = null;
        okHttpClient13.proxy = proxy87;
        java.lang.Class<?> wildcardClass89 = okHttpClient13.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient5.connectionPool;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy17 = null;
        okHttpClient16.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.connectionPool;
        okHttpClient19.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient16.setConnectionPool(connectionPool33);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient16.setHostnameVerifier(hostnameVerifier36);
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient37.failedRoutes;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient5.setConnectionPool(connectionPool39);
        java.util.List<java.lang.String> strList41 = okHttpClient5.transports;
        java.net.CookieHandler cookieHandler42 = null;
        okHttpClient5.cookieHandler = cookieHandler42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList41);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        java.net.CookieHandler cookieHandler10 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setConnectionPool(connectionPool15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient16.getSslSocketFactory();
        java.util.List<java.lang.String> strList18 = okHttpClient16.transports;
        boolean boolean19 = okHttpClient16.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray25 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet26 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet26, routeArray25);
        okHttpClient24.failedRoutes = routeSet26;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient24.copyWithDefaults();
        java.net.CookieHandler cookieHandler30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient24.setCookieHandler(cookieHandler30);
        java.util.List<java.lang.String> strList32 = okHttpClient24.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList32;
        okHttpClient16.transports = strList32;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient0.setTransports(strList32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList32);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient3.getConnectionPool();
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient3.connectionPool;
        java.lang.Class<?> wildcardClass7 = okHttpClient3.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        java.net.ResponseCache responseCache7 = okHttpClient3.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        java.util.Set<com.squareup.okhttp.Route> routeSet15 = okHttpClient12.failedRoutes;
        okHttpClient8.failedRoutes = routeSet15;
        java.net.ResponseCache responseCache17 = okHttpClient8.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient8.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        java.net.ResponseCache responseCache24 = okHttpClient23.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient23.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient8.setConnectionPool(connectionPool25);
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient8.setCookieHandler(cookieHandler27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient29.setHostnameVerifier(hostnameVerifier34);
        java.net.Proxy proxy36 = okHttpClient29.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient(okHttpClient37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool40 = okHttpClient39.connectionPool;
        java.net.CookieHandler cookieHandler41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setCookieHandler(cookieHandler41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        java.net.Proxy proxy46 = okHttpClient43.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean48 = okHttpClient47.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient47.copyWithDefaults();
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient51.getAuthenticator();
        okHttpClient43.authenticator = okAuthenticator54;
        okHttpClient42.authenticator = okAuthenticator54;
        okHttpClient29.authenticator = okAuthenticator54;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient28.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean60 = okHttpClient59.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient59.setHostnameVerifier(hostnameVerifier61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient59.copyWithDefaults();
        java.net.ResponseCache responseCache64 = okHttpClient63.responseCache;
        java.util.Set<com.squareup.okhttp.Route> routeSet65 = okHttpClient63.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator66 = okHttpClient63.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient58.setAuthenticator(okAuthenticator66);
        okHttpClient3.authenticator = okAuthenticator66;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        java.net.Proxy proxy8 = okHttpClient0.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy8);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        boolean boolean8 = okHttpClient7.followProtocolRedirects;
        java.net.ProxySelector proxySelector9 = null;
        okHttpClient7.proxySelector = proxySelector9;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient(okHttpClient13);
        com.squareup.okhttp.ConnectionPool connectionPool15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setConnectionPool(connectionPool15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setCookieHandler(cookieHandler19);
        java.net.ResponseCache responseCache21 = okHttpClient20.getResponseCache();
        java.net.ProxySelector proxySelector22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setProxySelector(proxySelector22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        com.squareup.okhttp.ConnectionPool connectionPool28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setConnectionPool(connectionPool28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.setAuthenticator(okAuthenticator32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        okHttpClient37.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean41 = okHttpClient40.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient40.setHostnameVerifier(hostnameVerifier45);
        java.net.Proxy proxy47 = okHttpClient40.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient(okHttpClient48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool51 = okHttpClient50.connectionPool;
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient54.setHostnameVerifier(hostnameVerifier55);
        java.net.Proxy proxy57 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        java.net.CookieHandler cookieHandler63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setCookieHandler(cookieHandler63);
        com.squareup.okhttp.OkAuthenticator okAuthenticator65 = okHttpClient62.getAuthenticator();
        okHttpClient54.authenticator = okAuthenticator65;
        okHttpClient53.authenticator = okAuthenticator65;
        okHttpClient40.authenticator = okAuthenticator65;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient37.setAuthenticator(okAuthenticator65);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient29.setAuthenticator(okAuthenticator65);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient23.setAuthenticator(okAuthenticator65);
        okHttpClient7.authenticator = okAuthenticator65;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray74 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet75 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet75, routeArray74);
        okHttpClient73.failedRoutes = routeSet75;
        java.util.List<java.lang.String> strList78 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient73.transports = strList78;
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient73.setResponseCache(responseCache80);
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean83 = okHttpClient82.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient82.setHostnameVerifier(hostnameVerifier84);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient82.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool87 = okHttpClient86.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool88 = okHttpClient86.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet89 = okHttpClient86.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient86.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkAuthenticator okAuthenticator92 = okHttpClient91.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient81.setAuthenticator(okAuthenticator92);
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient7.setAuthenticator(okAuthenticator92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient94);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient15.sslSocketFactory;
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setCookieHandler(cookieHandler17);
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = okHttpClient15.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier19);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = okHttpClient4.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient4.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setConnectionPool(connectionPool17);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = okHttpClient18.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient18.failedRoutes;
        okHttpClient4.failedRoutes = routeSet20;
        java.lang.Class<?> wildcardClass22 = okHttpClient4.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.CookieHandler cookieHandler3 = null;
        okHttpClient2.cookieHandler = cookieHandler3;
        java.lang.String[] strArray6 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList7;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList7;
        okHttpClient2.transports = strList7;
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient2.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient2.copyWithDefaults();
        java.net.CookieHandler cookieHandler14 = okHttpClient2.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean17 = okHttpClient16.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        java.util.Set<com.squareup.okhttp.Route> routeSet23 = okHttpClient20.failedRoutes;
        okHttpClient16.failedRoutes = routeSet23;
        okHttpClient0.failedRoutes = routeSet23;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.ConnectionPool connectionPool30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setConnectionPool(connectionPool30);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory32);
        java.net.Proxy proxy34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setProxy(proxy34);
        com.squareup.okhttp.OkAuthenticator okAuthenticator36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setAuthenticator(okAuthenticator36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean39 = okHttpClient38.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient38.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient38.setHostnameVerifier(hostnameVerifier43);
        java.net.Proxy proxy45 = null;
        okHttpClient38.proxy = proxy45;
        boolean boolean47 = okHttpClient38.followProtocolRedirects;
        boolean boolean48 = okHttpClient38.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        java.util.List<java.lang.String> strList54 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient49.transports = strList54;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient56.setHostnameVerifier(hostnameVerifier57);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient(okHttpClient58);
        java.net.Proxy proxy60 = null;
        okHttpClient59.proxy = proxy60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean63 = okHttpClient62.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient62.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient62.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient62.setHostnameVerifier(hostnameVerifier67);
        com.squareup.okhttp.OkAuthenticator okAuthenticator69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient62.setAuthenticator(okAuthenticator69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean72 = okHttpClient71.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient71.setHostnameVerifier(hostnameVerifier73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient71.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool76 = okHttpClient75.connectionPool;
        okHttpClient62.connectionPool = connectionPool76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient59.setConnectionPool(connectionPool76);
        com.squareup.okhttp.OkHttpClient okHttpClient79 = okHttpClient49.setConnectionPool(connectionPool76);
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient38.setConnectionPool(connectionPool76);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient33.setConnectionPool(connectionPool76);
        java.net.CookieHandler cookieHandler82 = null;
        okHttpClient33.cookieHandler = cookieHandler82;
        okHttpClient33.followProtocolRedirects = false;
        com.squareup.okhttp.ConnectionPool connectionPool86 = okHttpClient33.connectionPool;
        okHttpClient0.connectionPool = connectionPool86;
        java.net.CookieHandler cookieHandler88 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient89 = okHttpClient0.setCookieHandler(cookieHandler88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient89);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        java.util.List<java.lang.String> strList12 = okHttpClient7.getTransports();
        java.net.Proxy proxy13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient7.setProxy(proxy13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.Proxy proxy12 = okHttpClient7.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = null;
        okHttpClient13.proxy = proxy20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setHostnameVerifier(hostnameVerifier23);
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient22.failedRoutes;
        okHttpClient13.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList27 = okHttpClient13.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient13.authenticator;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient13.setProxySelector(proxySelector29);
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient30.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        boolean boolean35 = okHttpClient32.followProtocolRedirects;
        java.net.ResponseCache responseCache36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient32.setResponseCache(responseCache36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.ConnectionPool connectionPool42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setConnectionPool(connectionPool42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient40.setSSLSocketFactory(sSLSocketFactory44);
        java.net.Proxy proxy46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setProxy(proxy46);
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.setAuthenticator(okAuthenticator48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean51 = okHttpClient50.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient50.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient50.setHostnameVerifier(hostnameVerifier55);
        java.net.Proxy proxy57 = null;
        okHttpClient50.proxy = proxy57;
        boolean boolean59 = okHttpClient50.followProtocolRedirects;
        boolean boolean60 = okHttpClient50.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray62 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet63 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet63, routeArray62);
        okHttpClient61.failedRoutes = routeSet63;
        java.util.List<java.lang.String> strList66 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient61.transports = strList66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier69 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient68.setHostnameVerifier(hostnameVerifier69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient(okHttpClient70);
        java.net.Proxy proxy72 = null;
        okHttpClient71.proxy = proxy72;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean75 = okHttpClient74.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier76 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient74.setHostnameVerifier(hostnameVerifier76);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier79 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient74.setHostnameVerifier(hostnameVerifier79);
        com.squareup.okhttp.OkAuthenticator okAuthenticator81 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient74.setAuthenticator(okAuthenticator81);
        com.squareup.okhttp.OkHttpClient okHttpClient83 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean84 = okHttpClient83.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier85 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient83.setHostnameVerifier(hostnameVerifier85);
        com.squareup.okhttp.OkHttpClient okHttpClient87 = okHttpClient83.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool88 = okHttpClient87.connectionPool;
        okHttpClient74.connectionPool = connectionPool88;
        com.squareup.okhttp.OkHttpClient okHttpClient90 = okHttpClient71.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient91 = okHttpClient61.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient92 = okHttpClient50.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient45.setConnectionPool(connectionPool88);
        com.squareup.okhttp.OkHttpClient okHttpClient94 = okHttpClient37.setConnectionPool(connectionPool88);
        okHttpClient30.connectionPool = connectionPool88;
        okHttpClient7.connectionPool = connectionPool88;
        java.net.URL uRL97 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection98 = okHttpClient7.open(uRL97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient94);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = okHttpClient9.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient9.getAuthenticator();
        java.util.Set<com.squareup.okhttp.Route> routeSet13 = okHttpClient9.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient14.setAuthenticator(okAuthenticator21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient14.setResponseCache(responseCache23);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient14.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setHostnameVerifier(hostnameVerifier28);
        java.util.List<java.lang.String> strList30 = okHttpClient29.getTransports();
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient9.setTransports(strList30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ProxySelector proxySelector9 = okHttpClient8.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache11 = okHttpClient8.okResponseCache();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient8.hostnameVerifier;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient8.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean5 = okHttpClient4.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setHostnameVerifier(hostnameVerifier9);
        java.net.Proxy proxy11 = null;
        okHttpClient4.proxy = proxy11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient13.failedRoutes;
        okHttpClient4.failedRoutes = routeSet16;
        java.util.List<java.lang.String> strList18 = okHttpClient4.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = okHttpClient4.authenticator;
        java.net.ProxySelector proxySelector20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient4.setProxySelector(proxySelector20);
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient21.failedRoutes;
        okHttpClient2.failedRoutes = routeSet22;
        java.lang.Class<?> wildcardClass24 = routeSet22.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.CookieHandler cookieHandler9 = okHttpClient0.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.util.List<java.lang.String> strList63 = okHttpClient62.transports;
        java.util.List<java.lang.String> strList64 = okHttpClient62.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList64);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache14 = okHttpClient13.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache14);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler5 = okHttpClient2.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient6.failedRoutes = routeSet8;
        java.util.List<java.lang.String> strList11 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient6.transports = strList11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        okHttpClient13.followProtocolRedirects = true;
        java.net.Proxy proxy16 = okHttpClient13.proxy;
        java.net.Proxy proxy17 = okHttpClient13.getProxy();
        java.net.ResponseCache responseCache18 = okHttpClient13.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        java.net.Proxy proxy26 = null;
        okHttpClient19.proxy = proxy26;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient19.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = okHttpClient19.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient19.setAuthenticator(okAuthenticator30);
        java.net.ProxySelector proxySelector32 = null;
        okHttpClient19.proxySelector = proxySelector32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.ConnectionPool connectionPool38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setConnectionPool(connectionPool38);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory40);
        java.net.CookieHandler cookieHandler42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setCookieHandler(cookieHandler42);
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.setResponseCache(responseCache44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean47 = okHttpClient46.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient46.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient46.setHostnameVerifier(hostnameVerifier51);
        java.net.Proxy proxy53 = null;
        okHttpClient46.proxy = proxy53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setHostnameVerifier(hostnameVerifier56);
        java.util.Set<com.squareup.okhttp.Route> routeSet58 = okHttpClient55.failedRoutes;
        okHttpClient46.failedRoutes = routeSet58;
        java.util.List<java.lang.String> strList60 = okHttpClient46.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient46.authenticator;
        java.net.ProxySelector proxySelector62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient46.setProxySelector(proxySelector62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean65 = okHttpClient64.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient64.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray69 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet70 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet70, routeArray69);
        okHttpClient68.failedRoutes = routeSet70;
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient68.setResponseCache(responseCache73);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory75 = okHttpClient68.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient45.setSSLSocketFactory(sSLSocketFactory75);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory75);
        okHttpClient13.sslSocketFactory = sSLSocketFactory75;
        okHttpClient2.sslSocketFactory = sSLSocketFactory75;
        java.net.Proxy proxy81 = null;
        okHttpClient2.proxy = proxy81;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        okHttpClient4.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList7 = okHttpClient4.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList7);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        java.net.ResponseCache responseCache12 = null;
        okHttpClient4.responseCache = responseCache12;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.util.List<java.lang.String> strList10 = okHttpClient7.getTransports();
        java.net.CookieHandler cookieHandler11 = null;
        okHttpClient7.cookieHandler = cookieHandler11;
        boolean boolean13 = okHttpClient7.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient4.okResponseCache();
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient4.authenticator;
        boolean boolean10 = okHttpClient4.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setSSLSocketFactory(sSLSocketFactory10);
        com.squareup.okhttp.OkAuthenticator okAuthenticator12 = okHttpClient9.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator12);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = null;
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        java.net.ProxySelector proxySelector5 = okHttpClient0.proxySelector;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector5);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        java.net.Proxy proxy63 = okHttpClient5.getProxy();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = okHttpClient5.hostnameVerifier;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory65 = okHttpClient5.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory65);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        java.util.List<java.lang.String> strList34 = okHttpClient0.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList34);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient3.getHostnameVerifier();
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = okHttpClient3.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator8);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient9.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient9.setAuthenticator(okAuthenticator16);
        java.net.ResponseCache responseCache18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient9.setResponseCache(responseCache18);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient9.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = okHttpClient22.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient22.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient30.connectionPool;
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setCookieHandler(cookieHandler32);
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = okHttpClient30.hostnameVerifier;
        okHttpClient22.hostnameVerifier = hostnameVerifier34;
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = okHttpClient22.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient9.setHostnameVerifier(hostnameVerifier36);
        okHttpClient0.hostnameVerifier = hostnameVerifier36;
        java.util.Set<com.squareup.okhttp.Route> routeSet39 = okHttpClient0.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet39);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        java.util.List<java.lang.String> strList10 = okHttpClient0.transports;
        java.net.ResponseCache responseCache11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setResponseCache(responseCache11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient12.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory2 = okHttpClient1.sslSocketFactory;
        java.net.Proxy proxy3 = null;
        okHttpClient1.proxy = proxy3;
        java.net.CookieHandler cookieHandler5 = okHttpClient1.cookieHandler;
        com.squareup.okhttp.OkAuthenticator okAuthenticator6 = okHttpClient1.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator6);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.getAuthenticator();
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient4.cookieHandler = cookieHandler8;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient4.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setAuthenticator(okAuthenticator18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        okHttpClient11.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient4.setConnectionPool(connectionPool25);
        java.util.List<java.lang.String> strList28 = okHttpClient27.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList28;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        boolean boolean11 = okHttpClient0.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.copyWithDefaults();
        java.net.Proxy proxy13 = okHttpClient12.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        java.net.ProxySelector proxySelector3 = okHttpClient2.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector3);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache5 = okHttpClient4.responseCache;
        java.util.Set<com.squareup.okhttp.Route> routeSet6 = okHttpClient4.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.authenticator;
        java.net.ProxySelector proxySelector8 = okHttpClient4.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient5.connectionPool;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy17 = null;
        okHttpClient16.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.connectionPool;
        okHttpClient19.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient16.setConnectionPool(connectionPool33);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient16.setHostnameVerifier(hostnameVerifier36);
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient37.failedRoutes;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient5.setConnectionPool(connectionPool39);
        java.util.List<java.lang.String> strList41 = okHttpClient5.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient5.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator42);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.util.List<java.lang.String> strList8 = okHttpClient7.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList8);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient6.failedRoutes = routeSet8;
        java.util.List<java.lang.String> strList11 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient6.transports = strList11;
        okHttpClient3.transports = strList11;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient3.copyWithDefaults();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setAuthenticator(okAuthenticator15);
        java.net.Proxy proxy17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.setProxy(proxy17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient0.getSslSocketFactory();
        java.util.Set<com.squareup.okhttp.Route> routeSet5 = okHttpClient0.failedRoutes;
        java.net.ResponseCache responseCache6 = okHttpClient0.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache6);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient2.proxy = proxy4;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient8.setHostnameVerifier(hostnameVerifier9);
        java.net.ResponseCache responseCache11 = okHttpClient10.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient0.getAuthenticator();
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.setResponseCache(responseCache12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setProxySelector(proxySelector25);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient31.authenticator;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient31.responseCache = responseCache33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.getProxySelector();
        okHttpClient24.proxySelector = proxySelector36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient17.setProxySelector(proxySelector36);
        java.net.Proxy proxy39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient17.setProxy(proxy39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = okHttpClient9.getHostnameVerifier();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = hostnameVerifier10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier10);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        java.net.Proxy proxy3 = okHttpClient0.getProxy();
        java.net.ProxySelector proxySelector4 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.ConnectionPool connectionPool9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setConnectionPool(connectionPool9);
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray20 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet21 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet21, routeArray20);
        okHttpClient19.failedRoutes = routeSet21;
        java.net.ResponseCache responseCache24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setResponseCache(responseCache24);
        java.net.ResponseCache responseCache26 = okHttpClient19.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory27 = okHttpClient19.getSslSocketFactory();
        okHttpClient10.sslSocketFactory = sSLSocketFactory27;
        okHttpClient0.sslSocketFactory = sSLSocketFactory27;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean31 = okHttpClient30.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient30.copyWithDefaults();
        java.net.CookieHandler cookieHandler35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setCookieHandler(cookieHandler35);
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.getConnectionPool();
        okHttpClient0.connectionPool = connectionPool37;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient0.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory39);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.ProxySelector proxySelector4 = null;
        okHttpClient3.proxySelector = proxySelector4;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient3.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient3.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.getConnectionPool();
        java.net.ProxySelector proxySelector4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setProxySelector(proxySelector4);
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient5.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean8 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient7.setHostnameVerifier(hostnameVerifier12);
        java.net.Proxy proxy14 = null;
        okHttpClient7.proxy = proxy14;
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = okHttpClient7.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient7.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient28.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient18.setAuthenticator(okAuthenticator31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient33.setHostnameVerifier(hostnameVerifier38);
        java.net.Proxy proxy40 = null;
        okHttpClient33.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setHostnameVerifier(hostnameVerifier43);
        java.util.Set<com.squareup.okhttp.Route> routeSet45 = okHttpClient42.failedRoutes;
        okHttpClient33.failedRoutes = routeSet45;
        java.util.List<java.lang.String> strList47 = okHttpClient33.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = okHttpClient33.authenticator;
        java.net.ProxySelector proxySelector49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient33.setProxySelector(proxySelector49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray56 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet57 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet57, routeArray56);
        okHttpClient55.failedRoutes = routeSet57;
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient55.setResponseCache(responseCache60);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory62 = okHttpClient55.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient33.setSSLSocketFactory(sSLSocketFactory62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient32.setSSLSocketFactory(sSLSocketFactory62);
        okHttpClient7.sslSocketFactory = sSLSocketFactory62;
        okHttpClient5.sslSocketFactory = sSLSocketFactory62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient6.failedRoutes = routeSet8;
        java.util.List<java.lang.String> strList11 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient6.transports = strList11;
        okHttpClient3.transports = strList11;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient3.copyWithDefaults();
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setAuthenticator(okAuthenticator15);
        okHttpClient16.followProtocolRedirects = true;
        java.net.Proxy proxy19 = okHttpClient16.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy19);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        java.net.ResponseCache responseCache7 = okHttpClient0.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache7);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        boolean boolean11 = okHttpClient0.getFollowProtocolRedirects();
        java.net.Proxy proxy12 = okHttpClient0.getProxy();
        java.net.ResponseCache responseCache13 = null;
        okHttpClient0.responseCache = responseCache13;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy12);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        java.net.ResponseCache responseCache5 = null;
        okHttpClient3.responseCache = responseCache5;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient3.getHostnameVerifier();
        java.net.Proxy proxy8 = null;
        okHttpClient3.proxy = proxy8;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient3.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool7 = null;
        okHttpClient0.connectionPool = connectionPool7;
        java.util.List<java.lang.String> strList9 = okHttpClient0.transports;
        java.lang.Class<?> wildcardClass10 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient7.getSslSocketFactory();
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient7.setCookieHandler(cookieHandler13);
        java.net.Proxy proxy15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setProxy(proxy15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setHostnameVerifier(hostnameVerifier22);
        java.util.Set<com.squareup.okhttp.Route> routeSet24 = okHttpClient21.failedRoutes;
        okHttpClient12.failedRoutes = routeSet24;
        java.util.List<java.lang.String> strList26 = okHttpClient12.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator27 = okHttpClient12.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        java.util.Set<com.squareup.okhttp.Route> routeSet35 = okHttpClient32.failedRoutes;
        okHttpClient28.failedRoutes = routeSet35;
        okHttpClient12.failedRoutes = routeSet35;
        okHttpClient4.failedRoutes = routeSet35;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet35);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient5.sslSocketFactory;
        java.net.Proxy proxy8 = okHttpClient5.proxy;
        java.net.Proxy proxy9 = okHttpClient5.proxy;
        java.net.CookieHandler cookieHandler10 = okHttpClient5.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.ResponseCache responseCache12 = okHttpClient7.responseCache;
        java.net.Proxy proxy13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient7.setProxy(proxy13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler17 = okHttpClient15.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        boolean boolean25 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        java.net.Proxy proxy29 = okHttpClient26.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient26.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool35 = okHttpClient34.connectionPool;
        java.net.CookieHandler cookieHandler36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setCookieHandler(cookieHandler36);
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = okHttpClient34.hostnameVerifier;
        okHttpClient26.hostnameVerifier = hostnameVerifier38;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient26.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient18.setHostnameVerifier(hostnameVerifier40);
        okHttpClient15.hostnameVerifier = hostnameVerifier40;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient7.setHostnameVerifier(hostnameVerifier40);
        java.net.ProxySelector proxySelector44 = okHttpClient7.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector44);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.Proxy proxy12 = okHttpClient7.getProxy();
        boolean boolean13 = okHttpClient7.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient14.setAuthenticator(okAuthenticator21);
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient14.setResponseCache(responseCache23);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient14.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient14.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setHostnameVerifier(hostnameVerifier28);
        java.util.List<java.lang.String> strList30 = okHttpClient29.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList30;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient7.setTransports(strList30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient10.getTransports();
        java.net.ResponseCache responseCache12 = okHttpClient10.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache11 = okHttpClient0.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        java.net.CookieHandler cookieHandler7 = okHttpClient0.getCookieHandler();
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setResponseCache(responseCache8);
        java.net.ProxySelector proxySelector10 = okHttpClient0.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector10);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient5.sslSocketFactory;
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setCookieHandler(cookieHandler8);
        java.lang.Class<?> wildcardClass10 = okHttpClient5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        java.net.URL uRL6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection7 = okHttpClient0.open(uRL6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient3.getConnectionPool();
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient3.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient3.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache6 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.ProxySelector proxySelector9 = okHttpClient0.getProxySelector();
        java.util.List<java.lang.String> strList10 = okHttpClient0.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        boolean boolean10 = okHttpClient7.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setProxy(proxy11);
        java.util.Set<com.squareup.okhttp.Route> routeSet13 = okHttpClient7.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet13);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.getConnectionPool();
        java.net.ResponseCache responseCache13 = null;
        okHttpClient0.responseCache = responseCache13;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient12.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator13);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        boolean boolean11 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory12);
        java.net.ProxySelector proxySelector14 = okHttpClient13.getProxySelector();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient13.sslSocketFactory;
        java.net.ResponseCache responseCache16 = okHttpClient13.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.ProxySelector proxySelector1 = null;
        okHttpClient0.proxySelector = proxySelector1;
        java.net.Proxy proxy3 = okHttpClient0.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient(okHttpClient4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory7);
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient4.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient14.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient4.setAuthenticator(okAuthenticator17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        java.net.Proxy proxy26 = null;
        okHttpClient19.proxy = proxy26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        java.util.Set<com.squareup.okhttp.Route> routeSet31 = okHttpClient28.failedRoutes;
        okHttpClient19.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList33 = okHttpClient19.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient19.authenticator;
        java.net.ProxySelector proxySelector35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient19.setProxySelector(proxySelector35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean38 = okHttpClient37.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient37.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient37.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray42 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet43 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet43, routeArray42);
        okHttpClient41.failedRoutes = routeSet43;
        java.net.ResponseCache responseCache46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient41.setResponseCache(responseCache46);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory48 = okHttpClient41.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory48);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory48);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory52 = okHttpClient0.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory52);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        java.net.CookieHandler cookieHandler7 = okHttpClient0.getCookieHandler();
        java.net.URL uRL8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection9 = okHttpClient0.open(uRL8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        java.util.List<java.lang.String> strList3 = okHttpClient2.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList3);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        boolean boolean6 = okHttpClient0.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        java.net.CookieHandler cookieHandler3 = null;
        okHttpClient0.cookieHandler = cookieHandler3;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        java.util.List<java.lang.String> strList12 = okHttpClient7.getTransports();
        java.net.ProxySelector proxySelector13 = okHttpClient7.getProxySelector();
        java.net.ProxySelector proxySelector14 = okHttpClient7.proxySelector;
        java.net.ProxySelector proxySelector15 = okHttpClient7.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient16.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient(okHttpClient18);
        com.squareup.okhttp.ConnectionPool connectionPool20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setConnectionPool(connectionPool20);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory22);
        java.net.Proxy proxy24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setProxy(proxy24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache28 = okHttpClient23.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient(okHttpClient31);
        java.net.Proxy proxy33 = null;
        okHttpClient32.proxy = proxy33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray36 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet37 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet37, routeArray36);
        okHttpClient35.failedRoutes = routeSet37;
        java.util.List<java.lang.String> strList40 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient35.transports = strList40;
        okHttpClient32.transports = strList40;
        okHttpClient23.transports = strList40;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        okHttpClient7.transports = strList40;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList40);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.net.CookieHandler cookieHandler10 = okHttpClient9.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setCookieHandler(cookieHandler19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient21.setHostnameVerifier(hostnameVerifier26);
        java.net.Proxy proxy28 = okHttpClient21.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient(okHttpClient29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool32 = okHttpClient31.connectionPool;
        java.net.CookieHandler cookieHandler33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setCookieHandler(cookieHandler33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setHostnameVerifier(hostnameVerifier36);
        java.net.Proxy proxy38 = okHttpClient35.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean40 = okHttpClient39.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient39.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient39.copyWithDefaults();
        java.net.CookieHandler cookieHandler44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setCookieHandler(cookieHandler44);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient43.getAuthenticator();
        okHttpClient35.authenticator = okAuthenticator46;
        okHttpClient34.authenticator = okAuthenticator46;
        okHttpClient21.authenticator = okAuthenticator46;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient20.setAuthenticator(okAuthenticator46);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        java.net.ResponseCache responseCache56 = okHttpClient55.responseCache;
        java.util.Set<com.squareup.okhttp.Route> routeSet57 = okHttpClient55.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = okHttpClient55.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient50.setAuthenticator(okAuthenticator58);
        java.net.ProxySelector proxySelector60 = okHttpClient50.getProxySelector();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = okHttpClient50.hostnameVerifier;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier61);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient16.authenticator;
        java.net.ResponseCache responseCache18 = null;
        okHttpClient16.responseCache = responseCache18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        java.net.ProxySelector proxySelector21 = okHttpClient20.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient0.setProxySelector(proxySelector21);
        java.net.CookieHandler cookieHandler23 = okHttpClient22.getCookieHandler();
        java.net.CookieHandler cookieHandler24 = okHttpClient22.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler24);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean5 = okHttpClient4.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient8.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setConnectionPool(connectionPool9);
        java.net.Proxy proxy11 = okHttpClient0.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray23 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet24 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet24, routeArray23);
        okHttpClient22.failedRoutes = routeSet24;
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient22.setResponseCache(responseCache27);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory29 = okHttpClient22.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean32 = okHttpClient31.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient31.setHostnameVerifier(hostnameVerifier36);
        boolean boolean38 = okHttpClient31.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setHostnameVerifier(hostnameVerifier40);
        java.net.Proxy proxy42 = okHttpClient39.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient39.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool48 = okHttpClient47.connectionPool;
        java.net.CookieHandler cookieHandler49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient47.setCookieHandler(cookieHandler49);
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = okHttpClient47.hostnameVerifier;
        okHttpClient39.hostnameVerifier = hostnameVerifier51;
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = okHttpClient39.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient31.setHostnameVerifier(hostnameVerifier53);
        okHttpClient0.hostnameVerifier = hostnameVerifier53;
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient0.setCookieHandler(cookieHandler56);
        java.net.CookieHandler cookieHandler58 = okHttpClient0.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler58);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient9.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setFollowProtocolRedirects(false);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient27.setHostnameVerifier(hostnameVerifier28);
        java.util.Set<com.squareup.okhttp.Route> routeSet30 = okHttpClient27.failedRoutes;
        okHttpClient18.failedRoutes = routeSet30;
        java.util.List<java.lang.String> strList32 = okHttpClient18.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator33 = okHttpClient18.authenticator;
        java.net.ProxySelector proxySelector34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient18.setProxySelector(proxySelector34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        java.net.Proxy proxy39 = okHttpClient36.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient(okHttpClient42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient44.connectionPool;
        java.net.CookieHandler cookieHandler46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setCookieHandler(cookieHandler46);
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = okHttpClient44.hostnameVerifier;
        okHttpClient36.hostnameVerifier = hostnameVerifier48;
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = okHttpClient36.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient18.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.ConnectionPool connectionPool52 = okHttpClient51.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean54 = okHttpClient53.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient53.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray58 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet59 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet59, routeArray58);
        okHttpClient57.failedRoutes = routeSet59;
        java.net.CookieHandler cookieHandler62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient57.setCookieHandler(cookieHandler62);
        com.squareup.okhttp.ConnectionPool connectionPool64 = okHttpClient57.getConnectionPool();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient57.hostnameVerifier;
        okHttpClient51.hostnameVerifier = hostnameVerifier65;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient17.setHostnameVerifier(hostnameVerifier65);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient9.setHostnameVerifier(hostnameVerifier65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache4 = okHttpClient0.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean6 = okHttpClient5.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient5.failedRoutes = routeSet12;
        java.net.ResponseCache responseCache14 = okHttpClient5.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient5.sslSocketFactory;
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList19;
        okHttpClient5.transports = strList19;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList8 = okHttpClient4.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.setAuthenticator(okAuthenticator17);
        java.net.ProxySelector proxySelector19 = okHttpClient18.proxySelector;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient20.connectionPool;
        okHttpClient9.connectionPool = connectionPool21;
        java.net.ProxySelector proxySelector23 = okHttpClient9.proxySelector;
        java.net.ResponseCache responseCache24 = okHttpClient9.responseCache;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = responseCache24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache24);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = okHttpClient0.responseCache;
        java.net.CookieHandler cookieHandler5 = null;
        okHttpClient0.cookieHandler = cookieHandler5;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache4);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setProxySelector(proxySelector25);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient31.authenticator;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient31.responseCache = responseCache33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.getProxySelector();
        okHttpClient24.proxySelector = proxySelector36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient17.setProxySelector(proxySelector36);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient38.sslSocketFactory;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setSSLSocketFactory(sSLSocketFactory40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy11 = okHttpClient10.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient10.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = null;
        okHttpClient10.sslSocketFactory = sSLSocketFactory13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setCookieHandler(cookieHandler20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        okHttpClient19.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setConnectionPool(connectionPool25);
        okHttpClient0.connectionPool = connectionPool25;
        java.lang.Class<?> wildcardClass29 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient4.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList8 = okHttpClient4.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache9 = okHttpClient4.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache9);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        okHttpClient9.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient0.connectionPool;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient0.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient9.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient13.connectionPool;
        okHttpClient0.connectionPool = connectionPool14;
        java.util.Set<com.squareup.okhttp.Route> routeSet16 = okHttpClient0.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet16);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        okHttpClient3.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        java.net.Proxy proxy13 = okHttpClient6.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient16.connectionPool;
        java.net.CookieHandler cookieHandler18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setCookieHandler(cookieHandler18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        java.net.Proxy proxy23 = okHttpClient20.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        java.net.CookieHandler cookieHandler29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setCookieHandler(cookieHandler29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = okHttpClient28.getAuthenticator();
        okHttpClient20.authenticator = okAuthenticator31;
        okHttpClient19.authenticator = okAuthenticator31;
        okHttpClient6.authenticator = okAuthenticator31;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient3.setAuthenticator(okAuthenticator31);
        java.net.ResponseCache responseCache36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient3.setResponseCache(responseCache36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        java.net.Proxy proxy17 = null;
        okHttpClient10.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setHostnameVerifier(hostnameVerifier20);
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient19.failedRoutes;
        okHttpClient10.failedRoutes = routeSet22;
        java.util.List<java.lang.String> strList24 = okHttpClient10.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient10.authenticator;
        java.net.ProxySelector proxySelector26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setProxySelector(proxySelector26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        java.net.Proxy proxy31 = okHttpClient28.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient28.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.connectionPool;
        java.net.CookieHandler cookieHandler38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setCookieHandler(cookieHandler38);
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient36.hostnameVerifier;
        okHttpClient28.hostnameVerifier = hostnameVerifier40;
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient10.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient43.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        java.net.CookieHandler cookieHandler54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient49.setCookieHandler(cookieHandler54);
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient49.getConnectionPool();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient49.hostnameVerifier;
        okHttpClient43.hostnameVerifier = hostnameVerifier57;
        okHttpClient0.hostnameVerifier = hostnameVerifier57;
        boolean boolean60 = okHttpClient0.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean60 = okHttpClient59.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient59.setHostnameVerifier(hostnameVerifier61);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient59.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient59.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkAuthenticator okAuthenticator66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient59.setAuthenticator(okAuthenticator66);
        java.net.ResponseCache responseCache68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient59.setResponseCache(responseCache68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient70.setHostnameVerifier(hostnameVerifier71);
        java.util.Set<com.squareup.okhttp.Route> routeSet73 = okHttpClient70.failedRoutes;
        okHttpClient69.failedRoutes = routeSet73;
        okHttpClient7.failedRoutes = routeSet73;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet73);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient5.failedRoutes = routeSet8;
        com.squareup.okhttp.ConnectionPool connectionPool11 = okHttpClient5.connectionPool;
        java.net.ResponseCache responseCache12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient5.setResponseCache(responseCache12);
        java.net.ResponseCache responseCache14 = null;
        okHttpClient13.responseCache = responseCache14;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache5 = null;
        okHttpClient4.responseCache = responseCache5;
        java.net.CookieHandler cookieHandler7 = okHttpClient4.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setHostnameVerifier(hostnameVerifier13);
        java.util.Set<com.squareup.okhttp.Route> routeSet15 = okHttpClient12.failedRoutes;
        okHttpClient8.failedRoutes = routeSet15;
        java.net.ResponseCache responseCache17 = okHttpClient8.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory18 = okHttpClient8.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        java.net.ResponseCache responseCache24 = okHttpClient23.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient23.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient8.setConnectionPool(connectionPool25);
        okHttpClient4.connectionPool = connectionPool25;
        java.net.Proxy proxy28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient4.setProxy(proxy28);
        java.net.CookieHandler cookieHandler30 = okHttpClient4.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool31 = okHttpClient4.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool31);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient7.getResponseCache();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = okHttpClient7.hostnameVerifier;
        java.net.Proxy proxy12 = okHttpClient7.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy12);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        java.net.CookieHandler cookieHandler8 = okHttpClient7.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient7.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool9);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray16 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet17 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet17, routeArray16);
        okHttpClient15.failedRoutes = routeSet17;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient15.setCookieHandler(cookieHandler21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray28 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet29 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet29, routeArray28);
        okHttpClient27.failedRoutes = routeSet29;
        java.net.ResponseCache responseCache32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient27.setResponseCache(responseCache32);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = okHttpClient27.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient22.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient10.setSSLSocketFactory(sSLSocketFactory34);
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient41.authenticator;
        java.net.ResponseCache responseCache43 = null;
        okHttpClient41.responseCache = responseCache43;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = okHttpClient41.getHostnameVerifier();
        java.net.Proxy proxy46 = okHttpClient41.getProxy();
        java.net.Proxy proxy47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient41.setProxy(proxy47);
        com.squareup.okhttp.ConnectionPool connectionPool49 = okHttpClient48.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean51 = okHttpClient50.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient50.copyWithDefaults();
        java.net.CookieHandler cookieHandler55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient54.setCookieHandler(cookieHandler55);
        com.squareup.okhttp.OkAuthenticator okAuthenticator57 = okHttpClient54.getAuthenticator();
        java.net.CookieHandler cookieHandler58 = null;
        okHttpClient54.cookieHandler = cookieHandler58;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory60 = okHttpClient54.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean62 = okHttpClient61.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient61.setHostnameVerifier(hostnameVerifier63);
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient61.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient61.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkAuthenticator okAuthenticator68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient61.setAuthenticator(okAuthenticator68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean71 = okHttpClient70.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient70.setHostnameVerifier(hostnameVerifier72);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient70.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool75 = okHttpClient74.connectionPool;
        okHttpClient61.connectionPool = connectionPool75;
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient54.setConnectionPool(connectionPool75);
        java.util.List<java.lang.String> strList78 = okHttpClient77.transports;
        okHttpClient48.transports = strList78;
        okHttpClient36.transports = strList78;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList78);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache14 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory15 = okHttpClient0.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory15);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient6.hostnameVerifier;
        okHttpClient6.followProtocolRedirects = true;
        okHttpClient6.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier7);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient9.connectionPool;
        okHttpClient4.connectionPool = connectionPool10;
        boolean boolean12 = okHttpClient4.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        okHttpClient0.hostnameVerifier = hostnameVerifier6;
        com.squareup.okhttp.ConnectionPool connectionPool8 = okHttpClient0.connectionPool;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory3;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray11 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet12 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet12, routeArray11);
        okHttpClient10.failedRoutes = routeSet12;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient10.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setResponseCache(responseCache19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        java.util.Set<com.squareup.okhttp.Route> routeSet4 = okHttpClient0.failedRoutes;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory5;
        boolean boolean7 = okHttpClient0.getFollowProtocolRedirects();
        java.net.Proxy proxy8 = null;
        okHttpClient0.proxy = proxy8;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setResponseCache(responseCache10);
        java.net.ResponseCache responseCache12 = okHttpClient11.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setFollowProtocolRedirects(true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        java.net.CookieHandler cookieHandler7 = okHttpClient0.getCookieHandler();
        okHttpClient0.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray14 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet15 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet15, routeArray14);
        okHttpClient13.failedRoutes = routeSet15;
        java.util.List<java.lang.String> strList18 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient13.transports = strList18;
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = null;
        okHttpClient13.authenticator = okAuthenticator20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient(okHttpClient22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setCookieHandler(cookieHandler26);
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = okHttpClient24.hostnameVerifier;
        okHttpClient13.hostnameVerifier = hostnameVerifier28;
        okHttpClient12.hostnameVerifier = hostnameVerifier28;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean32 = okHttpClient31.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient31.setHostnameVerifier(hostnameVerifier36);
        java.net.Proxy proxy38 = okHttpClient31.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient(okHttpClient39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool42 = okHttpClient41.connectionPool;
        java.net.CookieHandler cookieHandler43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setCookieHandler(cookieHandler43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setHostnameVerifier(hostnameVerifier46);
        java.net.Proxy proxy48 = okHttpClient45.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean50 = okHttpClient49.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient49.setHostnameVerifier(hostnameVerifier51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient49.copyWithDefaults();
        java.net.CookieHandler cookieHandler54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient53.setCookieHandler(cookieHandler54);
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = okHttpClient53.getAuthenticator();
        okHttpClient45.authenticator = okAuthenticator56;
        okHttpClient44.authenticator = okAuthenticator56;
        okHttpClient31.authenticator = okAuthenticator56;
        okHttpClient12.authenticator = okAuthenticator56;
        com.squareup.okhttp.ConnectionPool connectionPool61 = okHttpClient12.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool61);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray13 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet14 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet14, routeArray13);
        okHttpClient12.failedRoutes = routeSet14;
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setResponseCache(responseCache17);
        java.net.ResponseCache responseCache19 = okHttpClient12.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient12.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient4.setConnectionPool(connectionPool20);
        java.net.CookieHandler cookieHandler22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setCookieHandler(cookieHandler22);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = okHttpClient23.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory24);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient2.setProxy(proxy5);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient2.setFollowProtocolRedirects(false);
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        java.net.CookieHandler cookieHandler10 = null;
        okHttpClient8.cookieHandler = cookieHandler10;
        java.util.List<java.lang.String> strList12 = okHttpClient8.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = null;
        okHttpClient13.proxy = proxy20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setHostnameVerifier(hostnameVerifier23);
        java.util.Set<com.squareup.okhttp.Route> routeSet25 = okHttpClient22.failedRoutes;
        okHttpClient13.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList27 = okHttpClient13.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient13.authenticator;
        java.net.ProxySelector proxySelector29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient13.setProxySelector(proxySelector29);
        java.lang.String[] strArray32 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        okHttpClient13.transports = strList33;
        okHttpClient8.transports = strList33;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient5.connectionPool;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy17 = null;
        okHttpClient16.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.connectionPool;
        okHttpClient19.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient16.setConnectionPool(connectionPool33);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient16.setHostnameVerifier(hostnameVerifier36);
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient37.failedRoutes;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient5.setConnectionPool(connectionPool39);
        java.net.ResponseCache responseCache41 = null;
        okHttpClient5.responseCache = responseCache41;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool3 = okHttpClient2.connectionPool;
        java.net.CookieHandler cookieHandler4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setCookieHandler(cookieHandler4);
        java.net.Proxy proxy6 = null;
        okHttpClient5.proxy = proxy6;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient8.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient8.setAuthenticator(okAuthenticator15);
        java.net.ResponseCache responseCache17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient8.setResponseCache(responseCache17);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient8.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient8.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setHostnameVerifier(hostnameVerifier29);
        java.net.Proxy proxy31 = null;
        okHttpClient24.proxy = proxy31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setHostnameVerifier(hostnameVerifier34);
        java.util.Set<com.squareup.okhttp.Route> routeSet36 = okHttpClient33.failedRoutes;
        okHttpClient24.failedRoutes = routeSet36;
        java.util.List<java.lang.String> strList38 = okHttpClient24.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator39 = okHttpClient24.authenticator;
        java.net.ProxySelector proxySelector40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient24.setProxySelector(proxySelector40);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray47 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet48 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet48, routeArray47);
        okHttpClient46.failedRoutes = routeSet48;
        java.net.ResponseCache responseCache51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient46.setResponseCache(responseCache51);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory53 = okHttpClient46.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient24.setSSLSocketFactory(sSLSocketFactory53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean56 = okHttpClient55.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient55.setHostnameVerifier(hostnameVerifier57);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient55.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient55.setHostnameVerifier(hostnameVerifier60);
        boolean boolean62 = okHttpClient55.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient63.setHostnameVerifier(hostnameVerifier64);
        java.net.Proxy proxy66 = okHttpClient63.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient63.setHostnameVerifier(hostnameVerifier67);
        com.squareup.okhttp.OkHttpClient okHttpClient69 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient(okHttpClient69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient69.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool72 = okHttpClient71.connectionPool;
        java.net.CookieHandler cookieHandler73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient71.setCookieHandler(cookieHandler73);
        javax.net.ssl.HostnameVerifier hostnameVerifier75 = okHttpClient71.hostnameVerifier;
        okHttpClient63.hostnameVerifier = hostnameVerifier75;
        javax.net.ssl.HostnameVerifier hostnameVerifier77 = okHttpClient63.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient55.setHostnameVerifier(hostnameVerifier77);
        okHttpClient24.hostnameVerifier = hostnameVerifier77;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient23.setHostnameVerifier(hostnameVerifier77);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient5.setHostnameVerifier(hostnameVerifier77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setCookieHandler(cookieHandler13);
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient12.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory16 = okHttpClient12.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray23 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet24 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet24, routeArray23);
        okHttpClient22.failedRoutes = routeSet24;
        java.net.ResponseCache responseCache27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient22.setResponseCache(responseCache27);
        java.util.List<java.lang.String> strList29 = okHttpClient28.getTransports();
        java.util.List<java.lang.String> strList30 = okHttpClient28.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean32 = okHttpClient31.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient31.setHostnameVerifier(hostnameVerifier33);
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient31.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkAuthenticator okAuthenticator38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient31.setAuthenticator(okAuthenticator38);
        java.util.List<java.lang.String> strList40 = okHttpClient31.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean42 = okHttpClient41.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient41.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient41.setAuthenticator(okAuthenticator48);
        java.net.ResponseCache responseCache50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient41.setResponseCache(responseCache50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient41.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient41.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient54.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient57.setHostnameVerifier(hostnameVerifier58);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = new com.squareup.okhttp.OkHttpClient(okHttpClient59);
        com.squareup.okhttp.ConnectionPool connectionPool61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient59.setConnectionPool(connectionPool61);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient59.setSSLSocketFactory(sSLSocketFactory63);
        java.net.CookieHandler cookieHandler65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient64.setCookieHandler(cookieHandler65);
        java.net.ResponseCache responseCache67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient64.setResponseCache(responseCache67);
        okHttpClient68.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier72 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient71.setHostnameVerifier(hostnameVerifier72);
        com.squareup.okhttp.OkHttpClient okHttpClient74 = new com.squareup.okhttp.OkHttpClient(okHttpClient73);
        com.squareup.okhttp.OkAuthenticator okAuthenticator75 = okHttpClient74.authenticator;
        java.net.ResponseCache responseCache76 = null;
        okHttpClient74.responseCache = responseCache76;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.copyWithDefaults();
        java.net.ProxySelector proxySelector79 = okHttpClient78.getProxySelector();
        okHttpClient68.proxySelector = proxySelector79;
        okHttpClient56.proxySelector = proxySelector79;
        com.squareup.okhttp.OkHttpClient okHttpClient82 = okHttpClient31.setProxySelector(proxySelector79);
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient28.setProxySelector(proxySelector79);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = okHttpClient7.setProxySelector(proxySelector79);
        com.squareup.okhttp.OkAuthenticator okAuthenticator85 = okHttpClient7.getAuthenticator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator85);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.authenticator;
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        okHttpClient3.hostnameVerifier = hostnameVerifier5;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient3.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList5;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        okHttpClient13.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean17 = okHttpClient16.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setHostnameVerifier(hostnameVerifier21);
        java.net.Proxy proxy23 = okHttpClient16.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        java.net.Proxy proxy33 = okHttpClient30.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        java.net.CookieHandler cookieHandler39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setCookieHandler(cookieHandler39);
        com.squareup.okhttp.OkAuthenticator okAuthenticator41 = okHttpClient38.getAuthenticator();
        okHttpClient30.authenticator = okAuthenticator41;
        okHttpClient29.authenticator = okAuthenticator41;
        okHttpClient16.authenticator = okAuthenticator41;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient13.setAuthenticator(okAuthenticator41);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient5.setAuthenticator(okAuthenticator41);
        com.squareup.okhttp.ConnectionPool connectionPool47 = okHttpClient5.getConnectionPool();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool47);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool1 = null;
        okHttpClient0.connectionPool = connectionPool1;
        java.net.ResponseCache responseCache3 = null;
        okHttpClient0.responseCache = responseCache3;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.ConnectionPool connectionPool9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setConnectionPool(connectionPool9);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory11);
        java.net.CookieHandler cookieHandler13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setCookieHandler(cookieHandler13);
        java.net.ResponseCache responseCache15 = okHttpClient14.getResponseCache();
        java.net.ProxySelector proxySelector16 = okHttpClient14.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = okHttpClient14.getAuthenticator();
        java.util.Set<com.squareup.okhttp.Route> routeSet18 = okHttpClient14.failedRoutes;
        okHttpClient0.failedRoutes = routeSet18;
        java.lang.Class<?> wildcardClass20 = routeSet18.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setResponseCache(responseCache10);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient7.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier12);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = null;
        okHttpClient3.sslSocketFactory = sSLSocketFactory5;
        com.squareup.okhttp.ConnectionPool connectionPool7 = okHttpClient3.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray9 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet10 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet10, routeArray9);
        okHttpClient8.failedRoutes = routeSet10;
        java.util.List<java.lang.String> strList13 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient8.transports = strList13;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        okHttpClient15.followProtocolRedirects = true;
        java.net.Proxy proxy18 = okHttpClient15.proxy;
        java.net.Proxy proxy19 = okHttpClient15.getProxy();
        java.net.Proxy proxy20 = okHttpClient15.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean22 = okHttpClient21.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient21.setHostnameVerifier(hostnameVerifier23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient21.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient21.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient21.setAuthenticator(okAuthenticator28);
        java.net.Proxy proxy30 = okHttpClient29.proxy;
        java.net.ProxySelector proxySelector31 = okHttpClient29.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool33 = null;
        okHttpClient32.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        java.net.CookieHandler cookieHandler40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setCookieHandler(cookieHandler40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = okHttpClient39.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient32.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient29.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient15.setAuthenticator(okAuthenticator42);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient3.setAuthenticator(okAuthenticator42);
        java.net.URL uRL47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection48 = okHttpClient46.open(uRL47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.ResponseCache responseCache12 = okHttpClient7.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        java.net.Proxy proxy20 = null;
        okHttpClient13.proxy = proxy20;
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient13.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = okHttpClient13.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient13.setAuthenticator(okAuthenticator24);
        java.net.ProxySelector proxySelector26 = null;
        okHttpClient13.proxySelector = proxySelector26;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.ConnectionPool connectionPool32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setConnectionPool(connectionPool32);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory34);
        java.net.CookieHandler cookieHandler36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setCookieHandler(cookieHandler36);
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setResponseCache(responseCache38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean41 = okHttpClient40.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient40.setHostnameVerifier(hostnameVerifier45);
        java.net.Proxy proxy47 = null;
        okHttpClient40.proxy = proxy47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient49.setHostnameVerifier(hostnameVerifier50);
        java.util.Set<com.squareup.okhttp.Route> routeSet52 = okHttpClient49.failedRoutes;
        okHttpClient40.failedRoutes = routeSet52;
        java.util.List<java.lang.String> strList54 = okHttpClient40.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator55 = okHttpClient40.authenticator;
        java.net.ProxySelector proxySelector56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient40.setProxySelector(proxySelector56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray63 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet64 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet64, routeArray63);
        okHttpClient62.failedRoutes = routeSet64;
        java.net.ResponseCache responseCache67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient62.setResponseCache(responseCache67);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory69 = okHttpClient62.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient40.setSSLSocketFactory(sSLSocketFactory69);
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient39.setSSLSocketFactory(sSLSocketFactory69);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient13.setSSLSocketFactory(sSLSocketFactory69);
        okHttpClient7.sslSocketFactory = sSLSocketFactory69;
        java.net.Proxy proxy74 = okHttpClient7.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy74);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        java.util.List<java.lang.String> strList12 = okHttpClient7.getTransports();
        java.net.ProxySelector proxySelector13 = okHttpClient7.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray19 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet20 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet20, routeArray19);
        okHttpClient18.failedRoutes = routeSet20;
        java.net.ResponseCache responseCache23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setResponseCache(responseCache23);
        java.net.ResponseCache responseCache25 = okHttpClient18.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory26 = okHttpClient18.getSslSocketFactory();
        java.net.CookieHandler cookieHandler27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient18.setCookieHandler(cookieHandler27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean30 = okHttpClient29.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient29.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray34 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet35 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet35, routeArray34);
        okHttpClient33.failedRoutes = routeSet35;
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient33.setResponseCache(responseCache38);
        java.net.ResponseCache responseCache40 = okHttpClient33.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory41 = okHttpClient33.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient18.setSSLSocketFactory(sSLSocketFactory41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient7.setSSLSocketFactory(sSLSocketFactory41);
        java.net.Proxy proxy44 = okHttpClient7.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy44);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.Proxy proxy9 = okHttpClient8.proxy;
        java.net.ProxySelector proxySelector10 = okHttpClient8.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool12 = null;
        okHttpClient11.connectionPool = connectionPool12;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean15 = okHttpClient14.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient14.copyWithDefaults();
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setCookieHandler(cookieHandler19);
        com.squareup.okhttp.OkAuthenticator okAuthenticator21 = okHttpClient18.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient11.setAuthenticator(okAuthenticator21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient8.setAuthenticator(okAuthenticator21);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory31 = okHttpClient24.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean33 = okHttpClient32.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setHostnameVerifier(hostnameVerifier34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.connectionPool;
        okHttpClient24.connectionPool = connectionPool37;
        okHttpClient8.connectionPool = connectionPool37;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool37);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = okHttpClient0.sslSocketFactory;
        java.util.List<java.lang.String> strList4 = okHttpClient0.getTransports();
        java.net.Proxy proxy5 = okHttpClient0.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy5);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = okHttpClient4.getHostnameVerifier();
        java.net.ResponseCache responseCache8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setResponseCache(responseCache8);
        java.net.ResponseCache responseCache10 = okHttpClient9.responseCache;
        java.net.CookieHandler cookieHandler11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setCookieHandler(cookieHandler11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.ProxySelector proxySelector2 = okHttpClient1.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector2);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = okHttpClient0.getAuthenticator();
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool18 = okHttpClient17.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool19 = okHttpClient17.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet20 = okHttpClient17.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient17.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        okHttpClient0.connectionPool = connectionPool25;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = okHttpClient4.getAuthenticator();
        java.net.CookieHandler cookieHandler8 = null;
        okHttpClient4.cookieHandler = cookieHandler8;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient4.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkAuthenticator okAuthenticator18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient11.setAuthenticator(okAuthenticator18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean21 = okHttpClient20.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient20.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient24.connectionPool;
        okHttpClient11.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient4.setConnectionPool(connectionPool25);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient28.setHostnameVerifier(hostnameVerifier33);
        java.net.Proxy proxy35 = null;
        okHttpClient28.proxy = proxy35;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient37.setHostnameVerifier(hostnameVerifier38);
        java.util.Set<com.squareup.okhttp.Route> routeSet40 = okHttpClient37.failedRoutes;
        okHttpClient28.failedRoutes = routeSet40;
        java.util.List<java.lang.String> strList42 = okHttpClient28.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = okHttpClient28.authenticator;
        java.net.ProxySelector proxySelector44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient28.setProxySelector(proxySelector44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient46.setHostnameVerifier(hostnameVerifier47);
        java.net.Proxy proxy49 = okHttpClient46.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier50 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient46.setHostnameVerifier(hostnameVerifier50);
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient53 = new com.squareup.okhttp.OkHttpClient(okHttpClient52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool55 = okHttpClient54.connectionPool;
        java.net.CookieHandler cookieHandler56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient54.setCookieHandler(cookieHandler56);
        javax.net.ssl.HostnameVerifier hostnameVerifier58 = okHttpClient54.hostnameVerifier;
        okHttpClient46.hostnameVerifier = hostnameVerifier58;
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = okHttpClient46.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient28.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean63 = okHttpClient62.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient62.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient62.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool67 = okHttpClient66.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient66.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList70 = okHttpClient66.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean72 = okHttpClient71.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient71.setHostnameVerifier(hostnameVerifier73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = okHttpClient71.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray76 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet77 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet77, routeArray76);
        okHttpClient75.failedRoutes = routeSet77;
        java.net.ResponseCache responseCache80 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient75.setResponseCache(responseCache80);
        java.net.ResponseCache responseCache82 = okHttpClient75.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory83 = okHttpClient75.getSslSocketFactory();
        okHttpClient66.sslSocketFactory = sSLSocketFactory83;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient61.setSSLSocketFactory(sSLSocketFactory83);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient27.setSSLSocketFactory(sSLSocketFactory83);
        boolean boolean87 = okHttpClient27.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient7.getSslSocketFactory();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient7.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool13);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.OkAuthenticator okAuthenticator4 = okHttpClient3.getAuthenticator();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient3.getConnectionPool();
        java.net.Proxy proxy6 = okHttpClient3.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy6);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient4.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient4.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setFollowProtocolRedirects(false);
        java.lang.Class<?> wildcardClass12 = okHttpClient11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.ConnectionPool connectionPool34 = okHttpClient33.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray36 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet37 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet37, routeArray36);
        okHttpClient35.failedRoutes = routeSet37;
        java.util.List<java.lang.String> strList40 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient35.transports = strList40;
        java.net.ResponseCache responseCache42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient35.setResponseCache(responseCache42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean45 = okHttpClient44.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient44.setHostnameVerifier(hostnameVerifier46);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient44.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool49 = okHttpClient48.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient48.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet51 = okHttpClient48.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient48.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkAuthenticator okAuthenticator54 = okHttpClient53.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient43.setAuthenticator(okAuthenticator54);
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient33.setAuthenticator(okAuthenticator54);
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient56.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier57);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory7;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory9 = okHttpClient0.sslSocketFactory;
        java.net.ResponseCache responseCache10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient0.setResponseCache(responseCache10);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache12 = okHttpClient0.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache12);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        boolean boolean4 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setProxy(proxy5);
        java.net.CookieHandler cookieHandler7 = okHttpClient0.getCookieHandler();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = cookieHandler7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler7);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient11.copyWithDefaults();
        java.lang.Class<?> wildcardClass13 = okHttpClient11.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient8.connectionPool;
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setCookieHandler(cookieHandler10);
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = okHttpClient8.hostnameVerifier;
        okHttpClient0.hostnameVerifier = hostnameVerifier12;
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = okHttpClient0.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        java.net.CookieHandler cookieHandler20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setCookieHandler(cookieHandler20);
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient19.getAuthenticator();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient19.sslSocketFactory;
        okHttpClient0.sslSocketFactory = sSLSocketFactory23;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean26 = okHttpClient25.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient25.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient25.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient25.setAuthenticator(okAuthenticator32);
        java.util.List<java.lang.String> strList34 = okHttpClient25.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient35.setHostnameVerifier(hostnameVerifier40);
        com.squareup.okhttp.OkAuthenticator okAuthenticator42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient35.setAuthenticator(okAuthenticator42);
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient35.setResponseCache(responseCache44);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient35.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient35.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient48.setHostnameVerifier(hostnameVerifier49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient(okHttpClient53);
        com.squareup.okhttp.ConnectionPool connectionPool55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient53.setConnectionPool(connectionPool55);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory57 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient53.setSSLSocketFactory(sSLSocketFactory57);
        java.net.CookieHandler cookieHandler59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient58.setCookieHandler(cookieHandler59);
        java.net.ResponseCache responseCache61 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.setResponseCache(responseCache61);
        okHttpClient62.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient65.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient(okHttpClient67);
        com.squareup.okhttp.OkAuthenticator okAuthenticator69 = okHttpClient68.authenticator;
        java.net.ResponseCache responseCache70 = null;
        okHttpClient68.responseCache = responseCache70;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.copyWithDefaults();
        java.net.ProxySelector proxySelector73 = okHttpClient72.getProxySelector();
        okHttpClient62.proxySelector = proxySelector73;
        okHttpClient50.proxySelector = proxySelector73;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient25.setProxySelector(proxySelector73);
        okHttpClient0.proxySelector = proxySelector73;
        java.net.ProxySelector proxySelector78 = okHttpClient0.getProxySelector();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector78);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        com.squareup.okhttp.ConnectionPool connectionPool9 = okHttpClient6.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient10.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkAuthenticator okAuthenticator14 = okHttpClient13.authenticator;
        java.net.ResponseCache responseCache15 = null;
        okHttpClient13.responseCache = responseCache15;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        java.net.ProxySelector proxySelector18 = okHttpClient17.getProxySelector();
        okHttpClient6.proxySelector = proxySelector18;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        boolean boolean23 = okHttpClient20.followProtocolRedirects;
        java.net.ProxySelector proxySelector24 = okHttpClient20.getProxySelector();
        java.util.List<java.lang.String> strList25 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient20.transports = strList25;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList25;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient6.setTransports(strList25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList25);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        okHttpClient0.transports = strList22;
        java.net.ResponseCache responseCache25 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean27 = okHttpClient26.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setHostnameVerifier(hostnameVerifier28);
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        java.util.Set<com.squareup.okhttp.Route> routeSet33 = okHttpClient30.failedRoutes;
        okHttpClient26.failedRoutes = routeSet33;
        java.net.ResponseCache responseCache35 = okHttpClient26.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory36 = okHttpClient26.sslSocketFactory;
        java.lang.String[] strArray39 = new java.lang.String[] { "", "hi!" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        okHttpClient26.transports = strList40;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList40;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient0.setTransports((java.util.List<java.lang.String>) strList40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient0.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        java.net.Proxy proxy16 = okHttpClient13.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean18 = okHttpClient17.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.copyWithDefaults();
        java.net.CookieHandler cookieHandler22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setCookieHandler(cookieHandler22);
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient21.getAuthenticator();
        okHttpClient13.authenticator = okAuthenticator24;
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = okHttpClient13.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient0.setAuthenticator(okAuthenticator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        okHttpClient3.followProtocolRedirects = false;
        java.util.List<java.lang.String> strList6 = okHttpClient3.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient3.failedRoutes;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkAuthenticator okAuthenticator17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient10.setAuthenticator(okAuthenticator17);
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient10.setResponseCache(responseCache19);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient10.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient23.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.ConnectionPool connectionPool30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setConnectionPool(connectionPool30);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient28.setSSLSocketFactory(sSLSocketFactory32);
        java.net.CookieHandler cookieHandler34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient33.setCookieHandler(cookieHandler34);
        java.net.ResponseCache responseCache36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.setResponseCache(responseCache36);
        okHttpClient37.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient40.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient(okHttpClient42);
        com.squareup.okhttp.OkAuthenticator okAuthenticator44 = okHttpClient43.authenticator;
        java.net.ResponseCache responseCache45 = null;
        okHttpClient43.responseCache = responseCache45;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.copyWithDefaults();
        java.net.ProxySelector proxySelector48 = okHttpClient47.getProxySelector();
        okHttpClient37.proxySelector = proxySelector48;
        okHttpClient25.proxySelector = proxySelector48;
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient0.setProxySelector(proxySelector48);
        java.lang.Class<?> wildcardClass52 = okHttpClient0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier10;
        boolean boolean12 = okHttpClient7.followProtocolRedirects;
        java.net.URL uRL13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection14 = okHttpClient7.open(uRL13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        boolean boolean3 = okHttpClient0.followProtocolRedirects;
        java.net.ResponseCache responseCache4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(responseCache4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient8);
        com.squareup.okhttp.ConnectionPool connectionPool10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setConnectionPool(connectionPool10);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient8.setSSLSocketFactory(sSLSocketFactory12);
        java.net.Proxy proxy14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setProxy(proxy14);
        com.squareup.okhttp.OkAuthenticator okAuthenticator16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.setAuthenticator(okAuthenticator16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setHostnameVerifier(hostnameVerifier23);
        java.net.Proxy proxy25 = null;
        okHttpClient18.proxy = proxy25;
        boolean boolean27 = okHttpClient18.followProtocolRedirects;
        boolean boolean28 = okHttpClient18.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray30 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet31 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet31, routeArray30);
        okHttpClient29.failedRoutes = routeSet31;
        java.util.List<java.lang.String> strList34 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient29.transports = strList34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient36.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        java.net.Proxy proxy40 = null;
        okHttpClient39.proxy = proxy40;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean43 = okHttpClient42.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient42.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient42.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient42.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkAuthenticator okAuthenticator49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient42.setAuthenticator(okAuthenticator49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient55.connectionPool;
        okHttpClient42.connectionPool = connectionPool56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient39.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient29.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient18.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient13.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient5.setConnectionPool(connectionPool56);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy64 = okHttpClient63.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = okHttpClient63.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory66 = null;
        okHttpClient63.sslSocketFactory = sSLSocketFactory66;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean69 = okHttpClient68.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient68.setHostnameVerifier(hostnameVerifier70);
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient68.copyWithDefaults();
        java.net.CookieHandler cookieHandler73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient72.setCookieHandler(cookieHandler73);
        com.squareup.okhttp.OkHttpClient okHttpClient75 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient76 = new com.squareup.okhttp.OkHttpClient(okHttpClient75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient75.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool78 = okHttpClient77.connectionPool;
        okHttpClient72.connectionPool = connectionPool78;
        com.squareup.okhttp.OkHttpClient okHttpClient80 = okHttpClient63.setConnectionPool(connectionPool78);
        com.squareup.okhttp.OkHttpClient okHttpClient81 = okHttpClient62.setConnectionPool(connectionPool78);
        com.squareup.okhttp.OkHttpClient okHttpClient82 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean83 = okHttpClient82.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier84 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient85 = okHttpClient82.setHostnameVerifier(hostnameVerifier84);
        com.squareup.okhttp.OkHttpClient okHttpClient86 = okHttpClient82.copyWithDefaults();
        java.net.ResponseCache responseCache87 = okHttpClient86.responseCache;
        javax.net.ssl.HostnameVerifier hostnameVerifier88 = okHttpClient86.hostnameVerifier;
        okHttpClient81.hostnameVerifier = hostnameVerifier88;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier88);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        java.util.List<java.lang.String> strList12 = okHttpClient7.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient13.setAuthenticator(okAuthenticator20);
        java.util.List<java.lang.String> strList22 = okHttpClient13.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient23.setHostnameVerifier(hostnameVerifier28);
        java.net.Proxy proxy30 = null;
        okHttpClient23.proxy = proxy30;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient32.setHostnameVerifier(hostnameVerifier33);
        java.util.Set<com.squareup.okhttp.Route> routeSet35 = okHttpClient32.failedRoutes;
        okHttpClient23.failedRoutes = routeSet35;
        java.util.List<java.lang.String> strList37 = okHttpClient23.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator38 = okHttpClient23.authenticator;
        java.net.ProxySelector proxySelector39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient23.setProxySelector(proxySelector39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setHostnameVerifier(hostnameVerifier42);
        java.net.Proxy proxy44 = okHttpClient41.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient41.setHostnameVerifier(hostnameVerifier45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient(okHttpClient47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        java.net.CookieHandler cookieHandler51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient49.setCookieHandler(cookieHandler51);
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = okHttpClient49.hostnameVerifier;
        okHttpClient41.hostnameVerifier = hostnameVerifier53;
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = okHttpClient41.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient23.setHostnameVerifier(hostnameVerifier55);
        com.squareup.okhttp.ConnectionPool connectionPool57 = okHttpClient56.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray63 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet64 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet64, routeArray63);
        okHttpClient62.failedRoutes = routeSet64;
        java.net.CookieHandler cookieHandler67 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient62.setCookieHandler(cookieHandler67);
        com.squareup.okhttp.ConnectionPool connectionPool69 = okHttpClient62.getConnectionPool();
        javax.net.ssl.HostnameVerifier hostnameVerifier70 = okHttpClient62.hostnameVerifier;
        okHttpClient56.hostnameVerifier = hostnameVerifier70;
        okHttpClient13.hostnameVerifier = hostnameVerifier70;
        okHttpClient7.hostnameVerifier = hostnameVerifier70;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier70);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory2 = okHttpClient1.sslSocketFactory;
        java.net.CookieHandler cookieHandler3 = okHttpClient1.getCookieHandler();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory4 = okHttpClient1.sslSocketFactory;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory4);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.Proxy proxy12 = null;
        okHttpClient0.proxy = proxy12;
        java.net.URL uRL14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection15 = okHttpClient0.open(uRL14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient9.connectionPool;
        okHttpClient4.connectionPool = connectionPool10;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkAuthenticator okAuthenticator19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient12.setAuthenticator(okAuthenticator19);
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient12.setResponseCache(responseCache21);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient12.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient25.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.ConnectionPool connectionPool32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient30.setConnectionPool(connectionPool32);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient30.setSSLSocketFactory(sSLSocketFactory34);
        java.net.CookieHandler cookieHandler36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient35.setCookieHandler(cookieHandler36);
        java.net.ResponseCache responseCache38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient35.setResponseCache(responseCache38);
        okHttpClient39.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient42.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient(okHttpClient44);
        com.squareup.okhttp.OkAuthenticator okAuthenticator46 = okHttpClient45.authenticator;
        java.net.ResponseCache responseCache47 = null;
        okHttpClient45.responseCache = responseCache47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        java.net.ProxySelector proxySelector50 = okHttpClient49.getProxySelector();
        okHttpClient39.proxySelector = proxySelector50;
        okHttpClient27.proxySelector = proxySelector50;
        okHttpClient4.proxySelector = proxySelector50;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory54 = okHttpClient4.getSslSocketFactory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory54);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        java.net.Proxy proxy1 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = okHttpClient0.getHostnameVerifier();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory3 = null;
        okHttpClient0.sslSocketFactory = sSLSocketFactory3;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray11 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet12 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet12, routeArray11);
        okHttpClient10.failedRoutes = routeSet12;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setCookieHandler(cookieHandler15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient10.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient0.copyWithDefaults();
        java.net.ResponseCache responseCache14 = okHttpClient0.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.ConnectionPool connectionPool19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setConnectionPool(connectionPool19);
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setHostnameVerifier(hostnameVerifier21);
        java.net.Proxy proxy23 = okHttpClient22.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        com.squareup.okhttp.ConnectionPool connectionPool28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setConnectionPool(connectionPool28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient29.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient29.setAuthenticator(okAuthenticator32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        okHttpClient37.followProtocolRedirects = false;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean41 = okHttpClient40.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient40.setHostnameVerifier(hostnameVerifier45);
        java.net.Proxy proxy47 = okHttpClient40.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient(okHttpClient48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient48.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool51 = okHttpClient50.connectionPool;
        java.net.CookieHandler cookieHandler52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient50.setCookieHandler(cookieHandler52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier55 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = okHttpClient54.setHostnameVerifier(hostnameVerifier55);
        java.net.Proxy proxy57 = okHttpClient54.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        java.net.CookieHandler cookieHandler63 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient62.setCookieHandler(cookieHandler63);
        com.squareup.okhttp.OkAuthenticator okAuthenticator65 = okHttpClient62.getAuthenticator();
        okHttpClient54.authenticator = okAuthenticator65;
        okHttpClient53.authenticator = okAuthenticator65;
        okHttpClient40.authenticator = okAuthenticator65;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient37.setAuthenticator(okAuthenticator65);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient29.setAuthenticator(okAuthenticator65);
        okHttpClient22.authenticator = okAuthenticator65;
        okHttpClient0.authenticator = okAuthenticator65;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray17 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet18 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet18, routeArray17);
        okHttpClient16.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setResponseCache(responseCache21);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient16.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        java.net.CookieHandler cookieHandler25 = okHttpClient24.getCookieHandler();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient26.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = new com.squareup.okhttp.OkHttpClient(okHttpClient28);
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = okHttpClient29.authenticator;
        java.net.ResponseCache responseCache31 = null;
        okHttpClient29.responseCache = responseCache31;
        javax.net.ssl.HostnameVerifier hostnameVerifier33 = okHttpClient29.getHostnameVerifier();
        java.net.Proxy proxy34 = null;
        okHttpClient29.proxy = proxy34;
        java.net.ResponseCache responseCache36 = okHttpClient29.getResponseCache();
        java.net.Proxy proxy37 = okHttpClient29.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier39 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.setHostnameVerifier(hostnameVerifier39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient40);
        com.squareup.okhttp.ConnectionPool connectionPool42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setConnectionPool(connectionPool42);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient40.setSSLSocketFactory(sSLSocketFactory44);
        java.net.CookieHandler cookieHandler46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setCookieHandler(cookieHandler46);
        java.net.ResponseCache responseCache48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.setResponseCache(responseCache48);
        okHttpClient49.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient52.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient(okHttpClient54);
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = okHttpClient55.authenticator;
        java.net.ResponseCache responseCache57 = null;
        okHttpClient55.responseCache = responseCache57;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient55.copyWithDefaults();
        java.net.ProxySelector proxySelector60 = okHttpClient59.getProxySelector();
        okHttpClient49.proxySelector = proxySelector60;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient29.setProxySelector(proxySelector60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient24.setProxySelector(proxySelector60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient10.setHostnameVerifier(hostnameVerifier15);
        java.net.Proxy proxy17 = null;
        okHttpClient10.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient19.setHostnameVerifier(hostnameVerifier20);
        java.util.Set<com.squareup.okhttp.Route> routeSet22 = okHttpClient19.failedRoutes;
        okHttpClient10.failedRoutes = routeSet22;
        java.util.List<java.lang.String> strList24 = okHttpClient10.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = okHttpClient10.authenticator;
        java.net.ProxySelector proxySelector26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient10.setProxySelector(proxySelector26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        java.net.Proxy proxy31 = okHttpClient28.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient28.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient(okHttpClient34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool37 = okHttpClient36.connectionPool;
        java.net.CookieHandler cookieHandler38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setCookieHandler(cookieHandler38);
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = okHttpClient36.hostnameVerifier;
        okHttpClient28.hostnameVerifier = hostnameVerifier40;
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = okHttpClient28.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient10.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.ConnectionPool connectionPool44 = okHttpClient43.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray50 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet51 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet51, routeArray50);
        okHttpClient49.failedRoutes = routeSet51;
        java.net.CookieHandler cookieHandler54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient49.setCookieHandler(cookieHandler54);
        com.squareup.okhttp.ConnectionPool connectionPool56 = okHttpClient49.getConnectionPool();
        javax.net.ssl.HostnameVerifier hostnameVerifier57 = okHttpClient49.hostnameVerifier;
        okHttpClient43.hostnameVerifier = hostnameVerifier57;
        okHttpClient0.hostnameVerifier = hostnameVerifier57;
        java.net.ResponseCache responseCache60 = null;
        okHttpClient0.responseCache = responseCache60;
        java.net.Proxy proxy62 = null;
        okHttpClient0.proxy = proxy62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier57);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setAuthenticator(okAuthenticator11);
        java.net.Proxy proxy13 = okHttpClient12.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient14 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray15 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet16 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet16, routeArray15);
        okHttpClient14.failedRoutes = routeSet16;
        java.util.List<java.lang.String> strList19 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient14.transports = strList19;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient14);
        okHttpClient21.followProtocolRedirects = true;
        java.net.Proxy proxy24 = okHttpClient21.proxy;
        java.net.Proxy proxy25 = okHttpClient21.getProxy();
        java.net.Proxy proxy26 = okHttpClient21.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean28 = okHttpClient27.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient27.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient27.setAuthenticator(okAuthenticator34);
        java.net.Proxy proxy36 = okHttpClient35.proxy;
        java.net.ProxySelector proxySelector37 = okHttpClient35.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool39 = null;
        okHttpClient38.connectionPool = connectionPool39;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean42 = okHttpClient41.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.copyWithDefaults();
        java.net.CookieHandler cookieHandler46 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient45.setCookieHandler(cookieHandler46);
        com.squareup.okhttp.OkAuthenticator okAuthenticator48 = okHttpClient45.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient38.setAuthenticator(okAuthenticator48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient35.setAuthenticator(okAuthenticator48);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = okHttpClient21.setAuthenticator(okAuthenticator48);
        okHttpClient12.authenticator = okAuthenticator48;
        boolean boolean53 = okHttpClient12.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        com.squareup.okhttp.ConnectionPool connectionPool6 = okHttpClient4.connectionPool;
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setFollowProtocolRedirects(true);
        com.squareup.okhttp.ConnectionPool connectionPool12 = okHttpClient11.connectionPool;
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = okHttpClient11.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator13);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.net.CookieHandler cookieHandler5 = okHttpClient0.getCookieHandler();
        java.net.ProxySelector proxySelector6 = okHttpClient0.getProxySelector();
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient0.failedRoutes;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient0.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient38.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList42 = okHttpClient38.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean44 = okHttpClient43.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setHostnameVerifier(hostnameVerifier45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray48 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet49 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet49, routeArray48);
        okHttpClient47.failedRoutes = routeSet49;
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient47.setResponseCache(responseCache52);
        java.net.ResponseCache responseCache54 = okHttpClient47.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient47.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient33.setSSLSocketFactory(sSLSocketFactory55);
        java.net.Proxy proxy58 = null;
        okHttpClient33.proxy = proxy58;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient1 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler3 = okHttpClient2.cookieHandler;
        boolean boolean4 = okHttpClient2.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        java.net.CookieHandler cookieHandler5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setCookieHandler(cookieHandler5);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache7 = okHttpClient4.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler10 = okHttpClient9.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean8 = okHttpClient7.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient7.setHostnameVerifier(hostnameVerifier9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray12 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet13 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet13, routeArray12);
        okHttpClient11.failedRoutes = routeSet13;
        java.net.ResponseCache responseCache16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient11.setResponseCache(responseCache16);
        java.net.ResponseCache responseCache18 = okHttpClient11.responseCache;
        okHttpClient11.followProtocolRedirects = false;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = null;
        okHttpClient11.sslSocketFactory = sSLSocketFactory21;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean24 = okHttpClient23.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient23.setHostnameVerifier(hostnameVerifier25);
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient23.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray28 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet29 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet29, routeArray28);
        okHttpClient27.failedRoutes = routeSet29;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient27.copyWithDefaults();
        java.net.CookieHandler cookieHandler33 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = okHttpClient27.setCookieHandler(cookieHandler33);
        java.util.List<java.lang.String> strList35 = okHttpClient27.transports;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList35;
        okHttpClient11.transports = strList35;
        okHttpClient0.transports = strList35;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList35;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList35);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        java.util.Set<com.squareup.okhttp.Route> routeSet10 = okHttpClient0.failedRoutes;
        java.net.ResponseCache responseCache11 = okHttpClient0.getResponseCache();
        java.net.CookieHandler cookieHandler12 = okHttpClient0.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler12);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.OkAuthenticator okAuthenticator38 = okHttpClient37.authenticator;
        java.net.ResponseCache responseCache39 = null;
        okHttpClient37.responseCache = responseCache39;
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = okHttpClient37.getHostnameVerifier();
        java.net.Proxy proxy42 = okHttpClient37.getProxy();
        java.net.Proxy proxy43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient37.setProxy(proxy43);
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient44.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean47 = okHttpClient46.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient46.copyWithDefaults();
        java.net.CookieHandler cookieHandler51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient50.setCookieHandler(cookieHandler51);
        com.squareup.okhttp.OkAuthenticator okAuthenticator53 = okHttpClient50.getAuthenticator();
        java.net.CookieHandler cookieHandler54 = null;
        okHttpClient50.cookieHandler = cookieHandler54;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory56 = okHttpClient50.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean58 = okHttpClient57.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient57.setHostnameVerifier(hostnameVerifier59);
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient57.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient57.setHostnameVerifier(hostnameVerifier62);
        com.squareup.okhttp.OkAuthenticator okAuthenticator64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient57.setAuthenticator(okAuthenticator64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean67 = okHttpClient66.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient66.setHostnameVerifier(hostnameVerifier68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = okHttpClient66.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool71 = okHttpClient70.connectionPool;
        okHttpClient57.connectionPool = connectionPool71;
        com.squareup.okhttp.OkHttpClient okHttpClient73 = okHttpClient50.setConnectionPool(connectionPool71);
        java.util.List<java.lang.String> strList74 = okHttpClient73.transports;
        okHttpClient44.transports = strList74;
        // The following exception was thrown during execution in test generation
        try {
            com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient0.setTransports(strList74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: transports doesn't contain http/1.1: [, hi!]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList74);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient10.getTransports();
        boolean boolean12 = okHttpClient10.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.setFollowProtocolRedirects(true);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient15.setHostnameVerifier(hostnameVerifier16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient(okHttpClient17);
        com.squareup.okhttp.ConnectionPool connectionPool19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setConnectionPool(connectionPool19);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient17.setSSLSocketFactory(sSLSocketFactory21);
        java.net.Proxy proxy23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient22.setProxy(proxy23);
        com.squareup.okhttp.OkAuthenticator okAuthenticator25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient22.setAuthenticator(okAuthenticator25);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache27 = okHttpClient22.okResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        java.net.Proxy proxy32 = null;
        okHttpClient31.proxy = proxy32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray35 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet36 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet36, routeArray35);
        okHttpClient34.failedRoutes = routeSet36;
        java.util.List<java.lang.String> strList39 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient34.transports = strList39;
        okHttpClient31.transports = strList39;
        okHttpClient22.transports = strList39;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList39;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList39;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList39;
        okHttpClient10.transports = strList39;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList39);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        boolean boolean10 = okHttpClient7.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setProxy(proxy11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        com.squareup.okhttp.ConnectionPool connectionPool17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setConnectionPool(connectionPool17);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient15.setSSLSocketFactory(sSLSocketFactory19);
        java.net.Proxy proxy21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient20.setProxy(proxy21);
        com.squareup.okhttp.OkAuthenticator okAuthenticator23 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient20.setAuthenticator(okAuthenticator23);
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean26 = okHttpClient25.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier27 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient25.setHostnameVerifier(hostnameVerifier27);
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient25.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient25.setHostnameVerifier(hostnameVerifier30);
        java.net.Proxy proxy32 = null;
        okHttpClient25.proxy = proxy32;
        boolean boolean34 = okHttpClient25.followProtocolRedirects;
        boolean boolean35 = okHttpClient25.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray37 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet38 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet38, routeArray37);
        okHttpClient36.failedRoutes = routeSet38;
        java.util.List<java.lang.String> strList41 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient36.transports = strList41;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient43.setHostnameVerifier(hostnameVerifier44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient(okHttpClient45);
        java.net.Proxy proxy47 = null;
        okHttpClient46.proxy = proxy47;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean50 = okHttpClient49.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient49.setHostnameVerifier(hostnameVerifier51);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient49.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier54 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient49.setHostnameVerifier(hostnameVerifier54);
        com.squareup.okhttp.OkAuthenticator okAuthenticator56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient49.setAuthenticator(okAuthenticator56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean59 = okHttpClient58.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient58.setHostnameVerifier(hostnameVerifier60);
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient58.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool63 = okHttpClient62.connectionPool;
        okHttpClient49.connectionPool = connectionPool63;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient46.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient36.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient25.setConnectionPool(connectionPool63);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient20.setConnectionPool(connectionPool63);
        java.net.CookieHandler cookieHandler69 = null;
        okHttpClient20.cookieHandler = cookieHandler69;
        okHttpClient20.followProtocolRedirects = false;
        com.squareup.okhttp.ConnectionPool connectionPool73 = okHttpClient20.connectionPool;
        okHttpClient7.connectionPool = connectionPool73;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool73);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.copyWithDefaults();
        java.net.CookieHandler cookieHandler10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient4.setCookieHandler(cookieHandler10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray17 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet18 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet18, routeArray17);
        okHttpClient16.failedRoutes = routeSet18;
        java.net.ResponseCache responseCache21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setResponseCache(responseCache21);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient16.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient11.setSSLSocketFactory(sSLSocketFactory23);
        boolean boolean25 = okHttpClient11.getFollowProtocolRedirects();
        com.squareup.okhttp.OkHttpClient okHttpClient26 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray27 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet28 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet28, routeArray27);
        okHttpClient26.failedRoutes = routeSet28;
        java.util.List<java.lang.String> strList31 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient26.transports = strList31;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient26);
        java.net.CookieHandler cookieHandler34 = okHttpClient26.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean36 = okHttpClient35.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier37 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient35.setHostnameVerifier(hostnameVerifier37);
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient39.setHostnameVerifier(hostnameVerifier40);
        java.net.Proxy proxy42 = okHttpClient39.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean44 = okHttpClient43.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setHostnameVerifier(hostnameVerifier45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.copyWithDefaults();
        java.net.CookieHandler cookieHandler48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.setCookieHandler(cookieHandler48);
        com.squareup.okhttp.OkAuthenticator okAuthenticator50 = okHttpClient47.getAuthenticator();
        okHttpClient39.authenticator = okAuthenticator50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient38.setAuthenticator(okAuthenticator50);
        okHttpClient26.authenticator = okAuthenticator50;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient11.setAuthenticator(okAuthenticator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setFollowProtocolRedirects(true);
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        okHttpClient7.hostnameVerifier = hostnameVerifier8;
        boolean boolean10 = okHttpClient7.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient7.setProxy(proxy11);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache13 = okHttpClient7.okResponseCache();
        java.net.ResponseCache responseCache14 = okHttpClient7.responseCache;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache14);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setFollowProtocolRedirects(false);
        java.net.Proxy proxy13 = null;
        okHttpClient0.proxy = proxy13;
        java.net.ProxySelector proxySelector15 = okHttpClient0.proxySelector;
        java.net.CookieHandler cookieHandler16 = okHttpClient0.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler16);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setFollowProtocolRedirects(false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        java.net.CookieHandler cookieHandler8 = okHttpClient0.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean10 = okHttpClient9.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        java.net.Proxy proxy16 = okHttpClient13.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean18 = okHttpClient17.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient17.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient17.copyWithDefaults();
        java.net.CookieHandler cookieHandler22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient21.setCookieHandler(cookieHandler22);
        com.squareup.okhttp.OkAuthenticator okAuthenticator24 = okHttpClient21.getAuthenticator();
        okHttpClient13.authenticator = okAuthenticator24;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient12.setAuthenticator(okAuthenticator24);
        okHttpClient0.authenticator = okAuthenticator24;
        java.net.Proxy proxy28 = null;
        okHttpClient0.proxy = proxy28;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache30 = okHttpClient0.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache30);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        java.net.Proxy proxy11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient0.setProxy(proxy11);
        java.net.Proxy proxy13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.setProxy(proxy13);
        java.net.ProxySelector proxySelector15 = okHttpClient14.proxySelector;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector15);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler5 = okHttpClient2.cookieHandler;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray7 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet8 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet8, routeArray7);
        okHttpClient6.failedRoutes = routeSet8;
        java.util.List<java.lang.String> strList11 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient6.transports = strList11;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient6);
        okHttpClient13.followProtocolRedirects = true;
        java.net.Proxy proxy16 = okHttpClient13.proxy;
        java.net.Proxy proxy17 = okHttpClient13.getProxy();
        java.net.ResponseCache responseCache18 = okHttpClient13.responseCache;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        java.net.Proxy proxy26 = null;
        okHttpClient19.proxy = proxy26;
        com.squareup.okhttp.OkAuthenticator okAuthenticator28 = okHttpClient19.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator29 = okHttpClient19.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient19.setAuthenticator(okAuthenticator30);
        java.net.ProxySelector proxySelector32 = null;
        okHttpClient19.proxySelector = proxySelector32;
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient34.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = new com.squareup.okhttp.OkHttpClient(okHttpClient36);
        com.squareup.okhttp.ConnectionPool connectionPool38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setConnectionPool(connectionPool38);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory40 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient36.setSSLSocketFactory(sSLSocketFactory40);
        java.net.CookieHandler cookieHandler42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient41.setCookieHandler(cookieHandler42);
        java.net.ResponseCache responseCache44 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.setResponseCache(responseCache44);
        com.squareup.okhttp.OkHttpClient okHttpClient46 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean47 = okHttpClient46.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient46.setHostnameVerifier(hostnameVerifier48);
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient46.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier51 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient46.setHostnameVerifier(hostnameVerifier51);
        java.net.Proxy proxy53 = null;
        okHttpClient46.proxy = proxy53;
        com.squareup.okhttp.OkHttpClient okHttpClient55 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient55.setHostnameVerifier(hostnameVerifier56);
        java.util.Set<com.squareup.okhttp.Route> routeSet58 = okHttpClient55.failedRoutes;
        okHttpClient46.failedRoutes = routeSet58;
        java.util.List<java.lang.String> strList60 = okHttpClient46.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient46.authenticator;
        java.net.ProxySelector proxySelector62 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient46.setProxySelector(proxySelector62);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean65 = okHttpClient64.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier66 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient67 = okHttpClient64.setHostnameVerifier(hostnameVerifier66);
        com.squareup.okhttp.OkHttpClient okHttpClient68 = okHttpClient64.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray69 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet70 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet70, routeArray69);
        okHttpClient68.failedRoutes = routeSet70;
        java.net.ResponseCache responseCache73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient68.setResponseCache(responseCache73);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory75 = okHttpClient68.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient46.setSSLSocketFactory(sSLSocketFactory75);
        com.squareup.okhttp.OkHttpClient okHttpClient77 = okHttpClient45.setSSLSocketFactory(sSLSocketFactory75);
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient19.setSSLSocketFactory(sSLSocketFactory75);
        okHttpClient13.sslSocketFactory = sSLSocketFactory75;
        okHttpClient2.sslSocketFactory = sSLSocketFactory75;
        java.net.CookieHandler cookieHandler81 = okHttpClient2.cookieHandler;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler81);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient3.setHostnameVerifier(hostnameVerifier4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient3.getSslSocketFactory();
        java.net.CookieHandler cookieHandler7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient3.setCookieHandler(cookieHandler7);
        java.net.ResponseCache responseCache9 = null;
        okHttpClient8.responseCache = responseCache9;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        java.net.Proxy proxy4 = null;
        okHttpClient3.proxy = proxy4;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean7 = okHttpClient6.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient6.setHostnameVerifier(hostnameVerifier8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient6.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient6.setHostnameVerifier(hostnameVerifier11);
        com.squareup.okhttp.OkAuthenticator okAuthenticator13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient6.setAuthenticator(okAuthenticator13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean16 = okHttpClient15.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient15.setHostnameVerifier(hostnameVerifier17);
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient15.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool20 = okHttpClient19.connectionPool;
        okHttpClient6.connectionPool = connectionPool20;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient3.setConnectionPool(connectionPool20);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache23 = okHttpClient22.okResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory24 = null;
        okHttpClient22.sslSocketFactory = sSLSocketFactory24;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache23);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = okHttpClient5.getSslSocketFactory();
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okAuthenticator7);
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        com.squareup.okhttp.ConnectionPool connectionPool10 = okHttpClient5.connectionPool;
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient5.setProxySelector(proxySelector11);
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient13.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient(okHttpClient15);
        java.net.Proxy proxy17 = null;
        okHttpClient16.proxy = proxy17;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean20 = okHttpClient19.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier21 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient19.setHostnameVerifier(hostnameVerifier21);
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient19.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier24 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient25 = okHttpClient19.setHostnameVerifier(hostnameVerifier24);
        com.squareup.okhttp.OkAuthenticator okAuthenticator26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient19.setAuthenticator(okAuthenticator26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool33 = okHttpClient32.connectionPool;
        okHttpClient19.connectionPool = connectionPool33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient16.setConnectionPool(connectionPool33);
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient16.setHostnameVerifier(hostnameVerifier36);
        java.util.Set<com.squareup.okhttp.Route> routeSet38 = okHttpClient37.failedRoutes;
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient37.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient5.setConnectionPool(connectionPool39);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        java.net.CookieHandler cookieHandler10 = okHttpClient5.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler10);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        java.net.ProxySelector proxySelector59 = okHttpClient58.proxySelector;
        java.net.CookieHandler cookieHandler60 = null;
        okHttpClient58.cookieHandler = cookieHandler60;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector59);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.setHostnameVerifier(hostnameVerifier5);
        java.util.Set<com.squareup.okhttp.Route> routeSet7 = okHttpClient4.failedRoutes;
        okHttpClient0.failedRoutes = routeSet7;
        java.net.ResponseCache responseCache9 = okHttpClient0.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory10 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean12 = okHttpClient11.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier13 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient11.setHostnameVerifier(hostnameVerifier13);
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient11.copyWithDefaults();
        java.net.ResponseCache responseCache16 = okHttpClient15.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool17 = okHttpClient15.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setConnectionPool(connectionPool17);
        java.net.CookieHandler cookieHandler19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient0.setCookieHandler(cookieHandler19);
        java.net.ProxySelector proxySelector21 = okHttpClient0.getProxySelector();
        com.squareup.okhttp.OkAuthenticator okAuthenticator22 = okHttpClient0.authenticator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator22);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.net.ResponseCache responseCache9 = null;
        okHttpClient8.responseCache = responseCache9;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.OkAuthenticator okAuthenticator15 = okHttpClient0.authenticator;
        java.net.ProxySelector proxySelector16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient0.setProxySelector(proxySelector16);
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        java.net.Proxy proxy21 = okHttpClient18.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier22 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = okHttpClient18.setHostnameVerifier(hostnameVerifier22);
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient25 = new com.squareup.okhttp.OkHttpClient(okHttpClient24);
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient26.connectionPool;
        java.net.CookieHandler cookieHandler28 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient29 = okHttpClient26.setCookieHandler(cookieHandler28);
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = okHttpClient26.hostnameVerifier;
        okHttpClient18.hostnameVerifier = hostnameVerifier30;
        javax.net.ssl.HostnameVerifier hostnameVerifier32 = okHttpClient18.getHostnameVerifier();
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient0.setHostnameVerifier(hostnameVerifier32);
        com.squareup.okhttp.OkHttpClient okHttpClient34 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean35 = okHttpClient34.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier36 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient34.setHostnameVerifier(hostnameVerifier36);
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient34.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool39 = okHttpClient38.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient38.setFollowProtocolRedirects(true);
        java.util.List<java.lang.String> strList42 = okHttpClient38.transports;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean44 = okHttpClient43.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient43.setHostnameVerifier(hostnameVerifier45);
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient43.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray48 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet49 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet49, routeArray48);
        okHttpClient47.failedRoutes = routeSet49;
        java.net.ResponseCache responseCache52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient47.setResponseCache(responseCache52);
        java.net.ResponseCache responseCache54 = okHttpClient47.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory55 = okHttpClient47.getSslSocketFactory();
        okHttpClient38.sslSocketFactory = sSLSocketFactory55;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient33.setSSLSocketFactory(sSLSocketFactory55);
        com.squareup.okhttp.ConnectionPool connectionPool58 = okHttpClient33.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool58);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory5 = okHttpClient4.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient4.copyWithDefaults();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = okHttpClient6.getProxySelector();
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache8 = okHttpClient6.okResponseCache();
        okHttpClient6.followProtocolRedirects = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache8);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        java.net.ProxySelector proxySelector11 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient9.setProxySelector(proxySelector11);
        okHttpClient9.followProtocolRedirects = false;
        java.util.List<java.lang.String> strList15 = okHttpClient9.getTransports();
        com.squareup.okhttp.OkHttpClient okHttpClient16 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean17 = okHttpClient16.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient16.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient16.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient16.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory23 = okHttpClient16.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool29 = okHttpClient28.connectionPool;
        okHttpClient16.connectionPool = connectionPool29;
        java.net.Proxy proxy31 = okHttpClient16.proxy;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean33 = okHttpClient32.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier34 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient32.setHostnameVerifier(hostnameVerifier34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient32.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient38 = okHttpClient32.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory39 = okHttpClient32.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient40 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean41 = okHttpClient40.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier42 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient43 = okHttpClient40.setHostnameVerifier(hostnameVerifier42);
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient40.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool45 = okHttpClient44.connectionPool;
        okHttpClient32.connectionPool = connectionPool45;
        javax.net.ssl.SSLSocketFactory sSLSocketFactory47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient32.setSSLSocketFactory(sSLSocketFactory47);
        java.net.ResponseCache responseCache49 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient50 = okHttpClient32.setResponseCache(responseCache49);
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean52 = okHttpClient51.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier53 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient51.setHostnameVerifier(hostnameVerifier53);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient51.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier56 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient57 = okHttpClient51.setHostnameVerifier(hostnameVerifier56);
        com.squareup.okhttp.OkAuthenticator okAuthenticator58 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient59 = okHttpClient51.setAuthenticator(okAuthenticator58);
        java.net.ResponseCache responseCache60 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient61 = okHttpClient51.setResponseCache(responseCache60);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient51.setFollowProtocolRedirects(false);
        com.squareup.okhttp.OkHttpClient okHttpClient64 = okHttpClient51.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier65 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient64.setHostnameVerifier(hostnameVerifier65);
        com.squareup.okhttp.OkHttpClient okHttpClient67 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier68 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient67.setHostnameVerifier(hostnameVerifier68);
        com.squareup.okhttp.OkHttpClient okHttpClient70 = new com.squareup.okhttp.OkHttpClient(okHttpClient69);
        com.squareup.okhttp.ConnectionPool connectionPool71 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient72 = okHttpClient69.setConnectionPool(connectionPool71);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory73 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient74 = okHttpClient69.setSSLSocketFactory(sSLSocketFactory73);
        java.net.CookieHandler cookieHandler75 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient76 = okHttpClient74.setCookieHandler(cookieHandler75);
        java.net.ResponseCache responseCache77 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient78 = okHttpClient74.setResponseCache(responseCache77);
        okHttpClient78.followProtocolRedirects = true;
        com.squareup.okhttp.OkHttpClient okHttpClient81 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier82 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient83 = okHttpClient81.setHostnameVerifier(hostnameVerifier82);
        com.squareup.okhttp.OkHttpClient okHttpClient84 = new com.squareup.okhttp.OkHttpClient(okHttpClient83);
        com.squareup.okhttp.OkAuthenticator okAuthenticator85 = okHttpClient84.authenticator;
        java.net.ResponseCache responseCache86 = null;
        okHttpClient84.responseCache = responseCache86;
        com.squareup.okhttp.OkHttpClient okHttpClient88 = okHttpClient84.copyWithDefaults();
        java.net.ProxySelector proxySelector89 = okHttpClient88.getProxySelector();
        okHttpClient78.proxySelector = proxySelector89;
        okHttpClient66.proxySelector = proxySelector89;
        okHttpClient50.proxySelector = proxySelector89;
        com.squareup.okhttp.OkHttpClient okHttpClient93 = okHttpClient16.setProxySelector(proxySelector89);
        okHttpClient9.proxySelector = proxySelector89;
        java.net.CookieHandler cookieHandler95 = okHttpClient9.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler95);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        java.net.ResponseCache responseCache7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setResponseCache(responseCache7);
        java.util.List<java.lang.String> strList9 = okHttpClient0.getTransports();
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList9;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList9);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient2.setFollowProtocolRedirects(false);
        java.net.CookieHandler cookieHandler5 = okHttpClient2.cookieHandler;
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = okHttpClient2.getHostnameVerifier();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(hostnameVerifier6);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setProxySelector(proxySelector7);
        com.squareup.okhttp.Route[] routeArray9 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet10 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet10, routeArray9);
        okHttpClient6.failedRoutes = routeSet10;
        java.net.CookieHandler cookieHandler13 = okHttpClient6.cookieHandler;
        com.squareup.okhttp.ConnectionPool connectionPool14 = okHttpClient6.connectionPool;
        java.util.List<java.lang.String> strList15 = okHttpClient6.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList15);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        com.squareup.okhttp.OkAuthenticator okAuthenticator7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient0.setAuthenticator(okAuthenticator7);
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient0.setResponseCache(responseCache9);
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient11.setHostnameVerifier(hostnameVerifier12);
        java.util.Set<com.squareup.okhttp.Route> routeSet14 = okHttpClient11.failedRoutes;
        okHttpClient10.failedRoutes = routeSet14;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient10.setFollowProtocolRedirects(true);
        java.net.Proxy proxy18 = null;
        okHttpClient10.proxy = proxy18;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.util.Set<com.squareup.okhttp.Route> routeSet12 = okHttpClient9.failedRoutes;
        okHttpClient0.failedRoutes = routeSet12;
        java.util.List<java.lang.String> strList14 = okHttpClient0.transports;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache15 = okHttpClient0.okResponseCache();
        java.net.Proxy proxy16 = okHttpClient0.proxy;
        java.net.CookieHandler cookieHandler17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient0.setCookieHandler(cookieHandler17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.Proxy proxy8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setProxy(proxy8);
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient7.setAuthenticator(okAuthenticator10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean13 = okHttpClient12.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier14 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient15 = okHttpClient12.setHostnameVerifier(hostnameVerifier14);
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient12.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier17 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = okHttpClient12.setHostnameVerifier(hostnameVerifier17);
        java.net.Proxy proxy19 = null;
        okHttpClient12.proxy = proxy19;
        boolean boolean21 = okHttpClient12.followProtocolRedirects;
        boolean boolean22 = okHttpClient12.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient23 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray24 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet25 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet25, routeArray24);
        okHttpClient23.failedRoutes = routeSet25;
        java.util.List<java.lang.String> strList28 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient23.transports = strList28;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient30.setHostnameVerifier(hostnameVerifier31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient(okHttpClient32);
        java.net.Proxy proxy34 = null;
        okHttpClient33.proxy = proxy34;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean37 = okHttpClient36.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier38 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient39 = okHttpClient36.setHostnameVerifier(hostnameVerifier38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient36.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier41 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient36.setHostnameVerifier(hostnameVerifier41);
        com.squareup.okhttp.OkAuthenticator okAuthenticator43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient36.setAuthenticator(okAuthenticator43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean46 = okHttpClient45.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier47 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient48 = okHttpClient45.setHostnameVerifier(hostnameVerifier47);
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient45.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient49.connectionPool;
        okHttpClient36.connectionPool = connectionPool50;
        com.squareup.okhttp.OkHttpClient okHttpClient52 = okHttpClient33.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient23.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = okHttpClient12.setConnectionPool(connectionPool50);
        com.squareup.okhttp.OkHttpClient okHttpClient55 = okHttpClient7.setConnectionPool(connectionPool50);
        java.net.CookieHandler cookieHandler56 = null;
        okHttpClient7.cookieHandler = cookieHandler56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = new com.squareup.okhttp.OkHttpClient(okHttpClient7);
        okHttpClient7.followProtocolRedirects = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient55);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray12 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet13 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet13, routeArray12);
        okHttpClient11.failedRoutes = routeSet13;
        java.util.List<java.lang.String> strList16 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient11.transports = strList16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient20);
        java.net.Proxy proxy22 = null;
        okHttpClient21.proxy = proxy22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.setAuthenticator(okAuthenticator31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient37.connectionPool;
        okHttpClient24.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient11.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient0.setConnectionPool(connectionPool38);
        java.net.Proxy proxy43 = okHttpClient42.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient44 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier45 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient46 = okHttpClient44.setHostnameVerifier(hostnameVerifier45);
        java.net.CookieHandler cookieHandler47 = null;
        okHttpClient46.cookieHandler = cookieHandler47;
        java.lang.String[] strArray50 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList51;
        com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS = strList51;
        okHttpClient46.transports = strList51;
        com.squareup.okhttp.OkHttpClient okHttpClient56 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient57 = new com.squareup.okhttp.OkHttpClient(okHttpClient56);
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient56.copyWithDefaults();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory59 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient60 = okHttpClient56.setSSLSocketFactory(sSLSocketFactory59);
        com.squareup.okhttp.OkAuthenticator okAuthenticator61 = okHttpClient56.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient62 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean63 = okHttpClient62.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier64 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient65 = okHttpClient62.setHostnameVerifier(hostnameVerifier64);
        com.squareup.okhttp.OkHttpClient okHttpClient66 = okHttpClient62.copyWithDefaults();
        java.net.ResponseCache responseCache67 = okHttpClient66.responseCache;
        com.squareup.okhttp.ConnectionPool connectionPool68 = okHttpClient66.connectionPool;
        com.squareup.okhttp.OkHttpClient okHttpClient69 = okHttpClient56.setConnectionPool(connectionPool68);
        okHttpClient46.connectionPool = connectionPool68;
        com.squareup.okhttp.OkHttpClient okHttpClient71 = okHttpClient42.setConnectionPool(connectionPool68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient71);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.setHostnameVerifier(hostnameVerifier10);
        java.net.ProxySelector proxySelector12 = okHttpClient11.getProxySelector();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory13 = okHttpClient11.sslSocketFactory;
        java.net.CookieHandler cookieHandler14 = okHttpClient11.getCookieHandler();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(cookieHandler14);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient2.setSSLSocketFactory(sSLSocketFactory6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(cookieHandler8);
        java.net.ResponseCache responseCache10 = okHttpClient9.getResponseCache();
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient9.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient(okHttpClient9);
        java.net.ResponseCache responseCache13 = okHttpClient12.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache13);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        com.squareup.okhttp.OkHttpClient okHttpClient3 = new com.squareup.okhttp.OkHttpClient(okHttpClient2);
        com.squareup.okhttp.ConnectionPool connectionPool4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool4);
        javax.net.ssl.HostnameVerifier hostnameVerifier6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient5.setHostnameVerifier(hostnameVerifier6);
        com.squareup.okhttp.OkAuthenticator okAuthenticator8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient5.setAuthenticator(okAuthenticator8);
        com.squareup.okhttp.OkHttpClient okHttpClient10 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean11 = okHttpClient10.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier12 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient13 = okHttpClient10.setHostnameVerifier(hostnameVerifier12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient10.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray15 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet16 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet16, routeArray15);
        okHttpClient14.failedRoutes = routeSet16;
        java.net.ResponseCache responseCache19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient14.setResponseCache(responseCache19);
        java.net.ResponseCache responseCache21 = okHttpClient14.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory22 = okHttpClient14.getSslSocketFactory();
        okHttpClient5.sslSocketFactory = sSLSocketFactory22;
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache24 = okHttpClient5.okResponseCache();
        com.squareup.okhttp.ConnectionPool connectionPool25 = okHttpClient5.connectionPool;
        java.net.CookieHandler cookieHandler26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient5.setCookieHandler(cookieHandler26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean29 = okHttpClient28.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier30 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient28.setHostnameVerifier(hostnameVerifier30);
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient28.copyWithDefaults();
        java.net.ResponseCache responseCache33 = okHttpClient32.responseCache;
        java.util.Set<com.squareup.okhttp.Route> routeSet34 = okHttpClient32.failedRoutes;
        com.squareup.okhttp.OkAuthenticator okAuthenticator35 = okHttpClient32.authenticator;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient5.setAuthenticator(okAuthenticator35);
        boolean boolean37 = okHttpClient36.followProtocolRedirects;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeSet34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.net.ResponseCache responseCache11 = okHttpClient4.getResponseCache();
        javax.net.ssl.SSLSocketFactory sSLSocketFactory12 = okHttpClient4.getSslSocketFactory();
        java.util.List<java.lang.String> strList13 = okHttpClient4.transports;
        boolean boolean14 = okHttpClient4.getFollowProtocolRedirects();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(sSLSocketFactory12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray1 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet2 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet2, routeArray1);
        okHttpClient0.failedRoutes = routeSet2;
        java.util.List<java.lang.String> strList5 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient0.transports = strList5;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = new com.squareup.okhttp.OkHttpClient(okHttpClient0);
        okHttpClient7.followProtocolRedirects = true;
        java.net.Proxy proxy10 = okHttpClient7.proxy;
        java.net.Proxy proxy11 = okHttpClient7.getProxy();
        java.net.Proxy proxy12 = okHttpClient7.getProxy();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean14 = okHttpClient13.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient13.setHostnameVerifier(hostnameVerifier15);
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient13.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient19 = okHttpClient13.setHostnameVerifier(hostnameVerifier18);
        com.squareup.okhttp.OkAuthenticator okAuthenticator20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient13.setAuthenticator(okAuthenticator20);
        java.net.Proxy proxy22 = okHttpClient21.proxy;
        java.net.ProxySelector proxySelector23 = okHttpClient21.getProxySelector();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.ConnectionPool connectionPool25 = null;
        okHttpClient24.connectionPool = connectionPool25;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean28 = okHttpClient27.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient27.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = okHttpClient27.copyWithDefaults();
        java.net.CookieHandler cookieHandler32 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient33 = okHttpClient31.setCookieHandler(cookieHandler32);
        com.squareup.okhttp.OkAuthenticator okAuthenticator34 = okHttpClient31.getAuthenticator();
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient24.setAuthenticator(okAuthenticator34);
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient21.setAuthenticator(okAuthenticator34);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient7.setAuthenticator(okAuthenticator34);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory38 = null;
        okHttpClient7.sslSocketFactory = sSLSocketFactory38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxySelector23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okAuthenticator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        java.net.Proxy proxy9 = okHttpClient6.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient6.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.connectionPool;
        java.net.CookieHandler cookieHandler16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setCookieHandler(cookieHandler16);
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient14.hostnameVerifier;
        okHttpClient6.hostnameVerifier = hostnameVerifier18;
        okHttpClient0.hostnameVerifier = hostnameVerifier18;
        java.util.List<java.lang.String> strList21 = okHttpClient0.getTransports();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList21);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator10 = okHttpClient0.authenticator;
        com.squareup.okhttp.OkAuthenticator okAuthenticator11 = null;
        okHttpClient0.authenticator = okAuthenticator11;
        java.net.CookieHandler cookieHandler13 = null;
        okHttpClient0.cookieHandler = cookieHandler13;
        java.net.CookieHandler cookieHandler15 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient16 = okHttpClient0.setCookieHandler(cookieHandler15);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory17 = okHttpClient0.sslSocketFactory;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean19 = okHttpClient18.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier20 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient21 = okHttpClient18.setHostnameVerifier(hostnameVerifier20);
        com.squareup.okhttp.OkHttpClient okHttpClient22 = okHttpClient18.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient24 = okHttpClient18.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector25 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient26 = okHttpClient24.setProxySelector(proxySelector25);
        com.squareup.okhttp.ConnectionPool connectionPool27 = okHttpClient24.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient28 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient28.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkHttpClient okHttpClient31 = new com.squareup.okhttp.OkHttpClient(okHttpClient30);
        com.squareup.okhttp.OkAuthenticator okAuthenticator32 = okHttpClient31.authenticator;
        java.net.ResponseCache responseCache33 = null;
        okHttpClient31.responseCache = responseCache33;
        com.squareup.okhttp.OkHttpClient okHttpClient35 = okHttpClient31.copyWithDefaults();
        java.net.ProxySelector proxySelector36 = okHttpClient35.getProxySelector();
        okHttpClient24.proxySelector = proxySelector36;
        com.squareup.okhttp.OkHttpClient okHttpClient38 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient39 = new com.squareup.okhttp.OkHttpClient(okHttpClient38);
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient38.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient41 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean42 = okHttpClient41.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier43 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient44 = okHttpClient41.setHostnameVerifier(hostnameVerifier43);
        com.squareup.okhttp.OkHttpClient okHttpClient45 = okHttpClient41.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient47 = okHttpClient41.setFollowProtocolRedirects(true);
        java.net.ProxySelector proxySelector48 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient49 = okHttpClient47.setProxySelector(proxySelector48);
        com.squareup.okhttp.ConnectionPool connectionPool50 = okHttpClient47.getConnectionPool();
        com.squareup.okhttp.OkHttpClient okHttpClient51 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier52 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient53 = okHttpClient51.setHostnameVerifier(hostnameVerifier52);
        com.squareup.okhttp.OkHttpClient okHttpClient54 = new com.squareup.okhttp.OkHttpClient(okHttpClient53);
        com.squareup.okhttp.OkAuthenticator okAuthenticator55 = okHttpClient54.authenticator;
        java.net.ResponseCache responseCache56 = null;
        okHttpClient54.responseCache = responseCache56;
        com.squareup.okhttp.OkHttpClient okHttpClient58 = okHttpClient54.copyWithDefaults();
        java.net.ProxySelector proxySelector59 = okHttpClient58.getProxySelector();
        okHttpClient47.proxySelector = proxySelector59;
        okHttpClient40.proxySelector = proxySelector59;
        com.squareup.okhttp.OkHttpClient okHttpClient62 = okHttpClient24.setProxySelector(proxySelector59);
        com.squareup.okhttp.OkHttpClient okHttpClient63 = okHttpClient0.setProxySelector(proxySelector59);
        java.net.URL uRL64 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.HttpURLConnection httpURLConnection65 = okHttpClient0.open(uRL64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(proxySelector59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient63);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setFollowProtocolRedirects(true);
        javax.net.ssl.SSLSocketFactory sSLSocketFactory7 = okHttpClient0.getSslSocketFactory();
        com.squareup.okhttp.OkHttpClient okHttpClient8 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean9 = okHttpClient8.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient8.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = okHttpClient8.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool13 = okHttpClient12.connectionPool;
        okHttpClient0.connectionPool = connectionPool13;
        java.net.Proxy proxy15 = okHttpClient0.proxy;
        java.net.Proxy proxy16 = okHttpClient0.getProxy();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(sSLSocketFactory7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy16);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        com.squareup.okhttp.OkAuthenticator okAuthenticator9 = okHttpClient0.authenticator;
        java.util.List<java.lang.String> strList10 = okHttpClient0.transports;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okAuthenticator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(strList10);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.Route[] routeArray5 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet6 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet6, routeArray5);
        okHttpClient4.failedRoutes = routeSet6;
        java.net.ResponseCache responseCache9 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient10 = okHttpClient4.setResponseCache(responseCache9);
        java.util.List<java.lang.String> strList11 = okHttpClient10.getTransports();
        boolean boolean12 = okHttpClient10.followProtocolRedirects;
        okHttpClient10.followProtocolRedirects = false;
        java.net.ResponseCache responseCache15 = okHttpClient10.getResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(responseCache15);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier5 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient6 = okHttpClient0.setHostnameVerifier(hostnameVerifier5);
        java.net.Proxy proxy7 = null;
        okHttpClient0.proxy = proxy7;
        boolean boolean9 = okHttpClient0.followProtocolRedirects;
        boolean boolean10 = okHttpClient0.followProtocolRedirects;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.Route[] routeArray12 = new com.squareup.okhttp.Route[] {};
        java.util.LinkedHashSet<com.squareup.okhttp.Route> routeSet13 = new java.util.LinkedHashSet<com.squareup.okhttp.Route>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.squareup.okhttp.Route>) routeSet13, routeArray12);
        okHttpClient11.failedRoutes = routeSet13;
        java.util.List<java.lang.String> strList16 = com.squareup.okhttp.OkHttpClient.DEFAULT_TRANSPORTS;
        okHttpClient11.transports = strList16;
        com.squareup.okhttp.OkHttpClient okHttpClient18 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier19 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient20 = okHttpClient18.setHostnameVerifier(hostnameVerifier19);
        com.squareup.okhttp.OkHttpClient okHttpClient21 = new com.squareup.okhttp.OkHttpClient(okHttpClient20);
        java.net.Proxy proxy22 = null;
        okHttpClient21.proxy = proxy22;
        com.squareup.okhttp.OkHttpClient okHttpClient24 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean25 = okHttpClient24.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier26 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient27 = okHttpClient24.setHostnameVerifier(hostnameVerifier26);
        com.squareup.okhttp.OkHttpClient okHttpClient28 = okHttpClient24.copyWithDefaults();
        javax.net.ssl.HostnameVerifier hostnameVerifier29 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient30 = okHttpClient24.setHostnameVerifier(hostnameVerifier29);
        com.squareup.okhttp.OkAuthenticator okAuthenticator31 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient32 = okHttpClient24.setAuthenticator(okAuthenticator31);
        com.squareup.okhttp.OkHttpClient okHttpClient33 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean34 = okHttpClient33.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier35 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient36 = okHttpClient33.setHostnameVerifier(hostnameVerifier35);
        com.squareup.okhttp.OkHttpClient okHttpClient37 = okHttpClient33.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool38 = okHttpClient37.connectionPool;
        okHttpClient24.connectionPool = connectionPool38;
        com.squareup.okhttp.OkHttpClient okHttpClient40 = okHttpClient21.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient41 = okHttpClient11.setConnectionPool(connectionPool38);
        com.squareup.okhttp.OkHttpClient okHttpClient42 = okHttpClient0.setConnectionPool(connectionPool38);
        com.squareup.okhttp.internal.http.OkResponseCache okResponseCache43 = okHttpClient42.okResponseCache();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(routeArray12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strList16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(okResponseCache43);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
        javax.net.ssl.HostnameVerifier hostnameVerifier2 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient3 = okHttpClient0.setHostnameVerifier(hostnameVerifier2);
        com.squareup.okhttp.OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool5 = okHttpClient4.connectionPool;
        java.net.CookieHandler cookieHandler6 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient7 = okHttpClient4.setCookieHandler(cookieHandler6);
        java.net.CookieHandler cookieHandler8 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient9 = okHttpClient4.setCookieHandler(cookieHandler8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient9);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        com.squareup.okhttp.OkHttpClient okHttpClient0 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier1 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier1);
        java.net.Proxy proxy3 = okHttpClient0.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier4 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient5 = okHttpClient0.setHostnameVerifier(hostnameVerifier4);
        com.squareup.okhttp.OkHttpClient okHttpClient6 = new com.squareup.okhttp.OkHttpClient();
        javax.net.ssl.HostnameVerifier hostnameVerifier7 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient8 = okHttpClient6.setHostnameVerifier(hostnameVerifier7);
        java.net.Proxy proxy9 = okHttpClient6.proxy;
        javax.net.ssl.HostnameVerifier hostnameVerifier10 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient11 = okHttpClient6.setHostnameVerifier(hostnameVerifier10);
        com.squareup.okhttp.OkHttpClient okHttpClient12 = new com.squareup.okhttp.OkHttpClient();
        com.squareup.okhttp.OkHttpClient okHttpClient13 = new com.squareup.okhttp.OkHttpClient(okHttpClient12);
        com.squareup.okhttp.OkHttpClient okHttpClient14 = okHttpClient12.copyWithDefaults();
        com.squareup.okhttp.ConnectionPool connectionPool15 = okHttpClient14.connectionPool;
        java.net.CookieHandler cookieHandler16 = null;
        com.squareup.okhttp.OkHttpClient okHttpClient17 = okHttpClient14.setCookieHandler(cookieHandler16);
        javax.net.ssl.HostnameVerifier hostnameVerifier18 = okHttpClient14.hostnameVerifier;
        okHttpClient6.hostnameVerifier = hostnameVerifier18;
        okHttpClient0.hostnameVerifier = hostnameVerifier18;
        com.squareup.okhttp.ConnectionPool connectionPool21 = okHttpClient0.connectionPool;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(proxy9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(connectionPool15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(okHttpClient17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(hostnameVerifier18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(connectionPool21);
    }
}

