/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 02:00:12 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.internal.http.OkResponseCache;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      okHttpClient0.transports = okHttpClient0.DEFAULT_TRANSPORTS;
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      CookieManager cookieManager0 = new CookieManager();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      OkHttpClient okHttpClient2 = okHttpClient0.setTransports(okHttpClient1.transports);
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      OkHttpClient okHttpClient3 = new OkHttpClient();
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
      SSLSocketFactory sSLSocketFactory1 = okHttpClient1.getSslSocketFactory();
      ResponseCache responseCache1 = okHttpClient3.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient1.responseCache);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient0.setConnectionPool(okHttpClient0.connectionPool);
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      OkHttpClient okHttpClient3 = okHttpClient0.setCookieHandler(okHttpClient1.cookieHandler);
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(okHttpClient2.cookieHandler);
      List<String> list0 = okHttpClient0.getTransports();
      OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      OkHttpClient okHttpClient5 = okHttpClient1.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      OkResponseCache okResponseCache0 = okHttpClient4.okResponseCache();
      boolean boolean0 = false;
      OkHttpClient okHttpClient6 = okHttpClient2.setFollowProtocolRedirects(boolean0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      String string0 = "Cookie";
      String string1 = " bytes";
      int int0 = 1645;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string1, uRLStreamHandler0);
      // Undeclared exception!
      try { 
        okHttpClient6.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: cookie
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(okHttpClient0.proxy);
      String string0 = "x\\'h<CP|*";
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient3.DEFAULT_TRANSPORTS;
      int int0 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient4 = okHttpClient1.setAuthenticator(okHttpClient3.authenticator);
      OkHttpClient okHttpClient5 = okHttpClient4.setHostnameVerifier(okHttpClient3.hostnameVerifier);
      OkResponseCache okResponseCache0 = okHttpClient4.okResponseCache();
      OkHttpClient okHttpClient6 = okHttpClient4.setTransports(okHttpClient3.transports);
      OkHttpClient okHttpClient7 = okHttpClient3.setHostnameVerifier(okHttpClient2.hostnameVerifier);
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient2.transports;
      URL uRL0 = MockURL.URL(string0, string0, int0, string0, uRLStreamHandler0);
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: x\\'h<cp|*
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      String string0 = "f\\6FI@W@h}e8Tn";
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string1 = "";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte byte0 = (byte)113;
      byte byte1 = (byte) (-115);
      byte byte2 = (byte)114;
      byte byte3 = (byte) (-80);
      byte byte4 = (byte)102;
      byte byte5 = (byte)53;
      byte byte6 = (byte) (-3);
      byte byte7 = (byte)102;
      String string0 = "https";
      String string1 = "<gcR+Znb_MZ%GZ";
      int int0 = 2023;
      String string2 = "3qVfWdg@9\"0.o\\r$";
      URLStreamHandler uRLStreamHandler0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(okHttpClient0.proxySelector);
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieHandler cookieHandler0 = CookieHandler.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieHandler0);
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      CookieManager cookieManager0 = new CookieManager();
      CookieHandler cookieHandler1 = CookieHandler.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieManager0);
      List<String> list0 = okHttpClient0.getTransports();
      OkHttpClient okHttpClient3 = okHttpClient0.setSSLSocketFactory(okHttpClient1.sslSocketFactory);
      CookieHandler cookieHandler2 = okHttpClient3.getCookieHandler();
      OkHttpClient okHttpClient4 = okHttpClient1.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
      String string0 = "Dg;pb/kBVy#+;bOmx";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = okHttpClient0.getProxy();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      List<String> list0 = okHttpClient0.getTransports();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      okHttpClient2.transports = okHttpClient1.DEFAULT_TRANSPORTS;
      OkHttpClient okHttpClient3 = okHttpClient1.setAuthenticator(okAuthenticator0);
      OkHttpClient okHttpClient4 = okHttpClient0.setAuthenticator(okHttpClient2.authenticator);
      OkHttpClient okHttpClient5 = okHttpClient3.setProxySelector(okHttpClient0.proxySelector);
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      OkHttpClient okHttpClient6 = okHttpClient0.setProxySelector(okHttpClient2.proxySelector);
      OkHttpClient okHttpClient7 = okHttpClient2.setAuthenticator(okHttpClient1.authenticator);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      String string0 = "https";
      boolean boolean0 = NetworkHandling.sendMessageOnTcp(evoSuiteLocalAddress0, string0);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxySelector(okHttpClient0.proxySelector);
      OkHttpClient okHttpClient4 = okHttpClient1.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient4.open(uRL0);
      HttpURLConnection httpURLConnection1 = okHttpClient3.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      ResponseCache responseCache1 = ResponseCache.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(responseCache0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = null;
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(okHttpClient1.hostnameVerifier);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      Proxy proxy0 = okHttpClient1.getProxy();
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      OkHttpClient okHttpClient3 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
      List<String> list0 = okHttpClient1.getTransports();
      boolean boolean0 = true;
      OkHttpClient okHttpClient4 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient5 = okHttpClient4.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      OkHttpClient okHttpClient6 = okHttpClient5.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      List<String> list1 = OkHttpClient.DEFAULT_TRANSPORTS;
      okHttpClient1.transports = list1;
      OkHttpClient okHttpClient7 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      OkHttpClient okHttpClient8 = okHttpClient7.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      OkHttpClient okHttpClient9 = okHttpClient3.setCookieHandler(okHttpClient5.cookieHandler);
      // Undeclared exception!
      try { 
        okHttpClient9.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      boolean boolean0 = false;
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(boolean0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      ProxySelector.setDefault(proxySelector1);
      ProxySelector.setDefault(proxySelector1);
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient1.connectionPool);
      okHttpClient1.transports = okHttpClient2.DEFAULT_TRANSPORTS;
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient2.cookieHandler);
      OkHttpClient okHttpClient5 = okHttpClient1.setCookieHandler(okHttpClient2.cookieHandler);
      OkHttpClient okHttpClient6 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      OkHttpClient okHttpClient7 = okHttpClient1.copyWithDefaults();
      boolean boolean0 = okHttpClient5.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      HostnameVerifier hostnameVerifier0 = okHttpClient2.getHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(okHttpClient0.cookieHandler);
      OkAuthenticator okAuthenticator1 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient4 = okHttpClient2.setProxySelector(okHttpClient3.proxySelector);
      okHttpClient4.transports = okHttpClient3.DEFAULT_TRANSPORTS;
      OkHttpClient okHttpClient5 = okHttpClient3.setAuthenticator(okAuthenticator1);
      OkHttpClient okHttpClient6 = okHttpClient0.copyWithDefaults();
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient2.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = (-63);
      long long0 = 1L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      int int1 = connectionPool0.getSpdyConnectionCount();
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient2.getSslSocketFactory();
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      OkHttpClient okHttpClient4 = okHttpClient3.setConnectionPool(connectionPool0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okAuthenticator0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      okHttpClient0.transports = list0;
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      okHttpClient1.authenticator = okHttpClient0.authenticator;
      OkHttpClient okHttpClient2 = okHttpClient1.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      HostnameVerifier hostnameVerifier1 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient1.responseCache);
      OkHttpClient okHttpClient4 = okHttpClient1.setHostnameVerifier(hostnameVerifier1);
      okHttpClient4.hostnameVerifier = hostnameVerifier0;
      ConnectionPool connectionPool0 = okHttpClient1.getConnectionPool();
      ResponseCache responseCache0 = okHttpClient2.getResponseCache();
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient6 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      String string0 = "+8+Q3~}\\s*r-/";
      MockFile mockFile0 = new MockFile(string0);
      long long0 = 9223372036854775807L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient7 = okHttpClient6.setResponseCache(httpResponseCache0);
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)113;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-115);
      byteArray0[1] = byte1;
      byte byte2 = (byte)114;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-80);
      byteArray0[3] = byte3;
      byte byte4 = (byte)102;
      byteArray0[4] = byte4;
      byte byte5 = (byte)53;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-3);
      byteArray0[6] = byte6;
      byte byte7 = (byte)102;
      byteArray0[7] = byte7;
      byte byte8 = (byte)80;
      byteArray0[8] = byte8;
      boolean boolean0 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      String string0 = "https";
      String string1 = "<gcR+Znb_MZ%GZ";
      int int0 = 2023;
      String string2 = "3qVfWdg@9\"0.o\\r$";
      URLStreamHandler uRLStreamHandler0 = null;
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      URL uRL0 = MockURL.URL(string0, string1, int0, string2, uRLStreamHandler0);
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
  }
}
