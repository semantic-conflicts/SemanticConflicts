/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 01:58:28 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.internal.http.HttpEngine;
import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import java.net.CacheRequest;
import java.net.CacheResponse;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Stream;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient2 = okHttpClient0.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      OkResponseCache okResponseCache0 = okHttpClient3.okResponseCache();
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      Proxy proxy0 = okHttpClient1.getProxy();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL0 = mockFile0.toURL();
      String string1 = "x8<";
      OkHttpClient okHttpClient4 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      String string2 = "";
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      OkHttpClient okHttpClient3 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      okHttpClient3.authenticator = okHttpClient2.authenticator;
      OkHttpClient okHttpClient4 = okHttpClient1.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      OkHttpClient okHttpClient5 = okHttpClient0.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient5.open(uRL0);
      okHttpClient0.authenticator = okHttpClient1.authenticator;
      OkHttpClient okHttpClient6 = okHttpClient1.copyWithDefaults();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      okHttpClient6.sslSocketFactory = sSLSocketFactory0;
      List<String> list0 = okHttpClient4.getTransports();
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      OkHttpClient okHttpClient7 = okHttpClient6.setSSLSocketFactory(okHttpClient4.sslSocketFactory);
      OkHttpClient okHttpClient8 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      boolean boolean0 = false;
      OkHttpClient okHttpClient9 = okHttpClient6.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      OkHttpClient okHttpClient10 = okHttpClient4.setFollowProtocolRedirects(boolean0);
      URL uRL1 = MockURL.getHttpExample();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL1, okHttpClient10, okResponseCache0, okHttpClient1.failedRoutes);
      HostnameVerifier hostnameVerifier0 = httpsURLConnectionImpl0.getHostnameVerifier();
      OkHttpClient okHttpClient11 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient12 = okHttpClient8.setConnectionPool(okHttpClient4.connectionPool);
      OkHttpClient okHttpClient13 = okHttpClient11.setAuthenticator(okHttpClient2.authenticator);
      ConnectionPool connectionPool0 = okHttpClient4.getConnectionPool();
      boolean boolean1 = okHttpClient6.getFollowProtocolRedirects();
      OkHttpClient okHttpClient14 = okHttpClient2.setProxySelector(okHttpClient6.proxySelector);
      OkHttpClient okHttpClient15 = okHttpClient12.setProxy(okHttpClient5.proxy);
      OkHttpClient okHttpClient16 = okHttpClient9.setSSLSocketFactory(okHttpClient11.sslSocketFactory);
      OkHttpClient okHttpClient17 = okHttpClient9.setResponseCache(okHttpClient8.responseCache);
      HostnameVerifier hostnameVerifier1 = okHttpClient17.getHostnameVerifier();
      OkHttpClient okHttpClient18 = okHttpClient15.setTransports(okHttpClient0.transports);
      CookieHandler cookieHandler0 = okHttpClient5.getCookieHandler();
      ProxySelector proxySelector0 = okHttpClient3.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient2 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      List<String> list0 = okHttpClient2.getTransports();
      Proxy proxy0 = okHttpClient2.getProxy();
      OkHttpClient okHttpClient3 = okHttpClient0.setAuthenticator(okHttpClient2.authenticator);
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
      OkHttpClient okHttpClient4 = okHttpClient2.copyWithDefaults();
      OkHttpClient okHttpClient5 = okHttpClient4.copyWithDefaults();
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "https";
      int int0 = 1067;
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      int int1 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int1, string0, uRLStreamHandler0);
      String string1 = "r";
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      String string0 = "https";
      int int0 = 1069;
      String string1 = "vxr}q";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string1, string0, int0, string1, uRLStreamHandler0);
      String string2 = "r";
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: vxr}q
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      ConnectionPool connectionPool0 = okHttpClient2.getConnectionPool();
      OkHttpClient okHttpClient3 = okHttpClient0.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      int int0 = 1907;
      long long0 = 10L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient1.getSslSocketFactory();
      OkHttpClient okHttpClient2 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Stream<String> stream0 = linkedList0.parallelStream();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      okHttpClient2.hostnameVerifier = okHttpClient1.hostnameVerifier;
      OkHttpClient okHttpClient3 = okHttpClient1.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient4 = okHttpClient3.setCookieHandler(okHttpClient2.cookieHandler);
      boolean boolean0 = false;
      OkHttpClient okHttpClient5 = okHttpClient3.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient6 = okHttpClient5.copyWithDefaults();
      okHttpClient6.sslSocketFactory = okHttpClient4.sslSocketFactory;
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = okHttpClient1.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient3 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      okHttpClient2.sslSocketFactory = okHttpClient1.sslSocketFactory;
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient5 = okHttpClient4.setTransports(okHttpClient2.transports);
      OkHttpClient okHttpClient6 = okHttpClient4.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient7 = okHttpClient6.setAuthenticator(okHttpClient0.authenticator);
      // Undeclared exception!
      try { 
        okHttpClient2.setTransports(okHttpClient0.transports);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      long long0 = 2476L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      String string0 = "https";
      int int0 = 1069;
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      int int1 = 0;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string0, int1, string0, uRLStreamHandler0);
      String string1 = "r";
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, string1, uRLStreamHandler1);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL1);
  }
}
