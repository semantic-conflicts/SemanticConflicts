/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 02:27:06 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.Address;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.Route;
import com.squareup.okhttp.TunnelRequest;
import com.squareup.okhttp.internal.http.HttpURLConnectionImpl;
import com.squareup.okhttp.internal.http.HttpsURLConnectionImpl;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.OkResponseCacheAdapter;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.io.InputStream;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpCookie;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkAuthenticator okAuthenticator0 = null;
      OkHttpClient okHttpClient0 = new OkHttpClient();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "}ywh#X+L~(Z&\"G-";
      int int0 = 1;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      String string1 = "close";
      URLStreamHandler uRLStreamHandler1 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string1, string0, int0, string0, uRLStreamHandler1);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: close
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      OkHttpClient okHttpClient4 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient3 = okHttpClient2.setResponseCache(okHttpClient0.responseCache);
      OkHttpClient okHttpClient4 = okHttpClient3.setProxySelector(okHttpClient2.proxySelector);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient4.DEFAULT_TRANSPORTS;
      Proxy proxy0 = okHttpClient0.getProxy();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      int int0 = 0;
      long long0 = (-85L);
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient5 = okHttpClient2.setConnectionPool(connectionPool0);
      OkHttpClient okHttpClient6 = okHttpClient5.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      OkHttpClient okHttpClient7 = okHttpClient5.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      LinkedList<HttpCookie> linkedList0 = new LinkedList<HttpCookie>();
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient8 = okHttpClient2.setCookieHandler(cookieManager0);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient8.open(uRL0);
      OkHttpClient okHttpClient9 = okHttpClient3.setConnectionPool(okHttpClient8.connectionPool);
      OkHttpClient okHttpClient10 = okHttpClient9.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      HttpURLConnection httpURLConnection1 = okHttpClient1.open(uRL0);
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      OkHttpClient okHttpClient11 = okHttpClient5.setSSLSocketFactory(okHttpClient10.sslSocketFactory);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      okHttpClient0.authenticator = okHttpClient1.authenticator;
      OkHttpClient okHttpClient3 = okHttpClient0.setProxy(okHttpClient1.proxy);
      Proxy proxy0 = okHttpClient1.getProxy();
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
      OkHttpClient okHttpClient4 = new OkHttpClient(okHttpClient3);
      OkHttpClient okHttpClient5 = new OkHttpClient();
      OkHttpClient okHttpClient6 = new OkHttpClient();
      OkHttpClient okHttpClient7 = okHttpClient5.setConnectionPool(okHttpClient3.connectionPool);
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      OkHttpClient okHttpClient8 = okHttpClient7.setResponseCache(okHttpClient4.responseCache);
      okHttpClient7.transports = okHttpClient6.transports;
      List<String> list0 = okHttpClient2.getTransports();
      OkHttpClient okHttpClient9 = okHttpClient7.setCookieHandler(okHttpClient0.cookieHandler);
      OkHttpClient okHttpClient10 = okHttpClient6.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient11 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      OkHttpClient okHttpClient12 = okHttpClient11.setConnectionPool(okHttpClient5.connectionPool);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient11.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setAuthenticator(okHttpClient0.authenticator);
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      OkHttpClient okHttpClient3 = okHttpClient0.setAuthenticator(okHttpClient1.authenticator);
      boolean boolean0 = okHttpClient0.getFollowProtocolRedirects();
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      OkHttpClient okHttpClient4 = okHttpClient0.copyWithDefaults();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = "https";
      String string1 = "n.";
      URL uRL0 = MockURL.URL(string0, string0, string1);
      HttpURLConnection httpURLConnection0 = okHttpClient0.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient3 = okHttpClient2.copyWithDefaults();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient3 = okHttpClient2.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      String string0 = "http/1.1";
      MockFile mockFile0 = new MockFile(string0);
      URL uRL0 = mockFile0.toURL();
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient1.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setCookieHandler(okHttpClient0.cookieHandler);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      Proxy proxy0 = okHttpClient1.getProxy();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      CookieHandler cookieHandler0 = okHttpClient1.getCookieHandler();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      HttpsURLConnectionImpl httpsURLConnectionImpl0 = new HttpsURLConnectionImpl(uRL0, okHttpClient0, okResponseCache0, okHttpClient0.failedRoutes);
      SSLSocketFactory sSLSocketFactory0 = httpsURLConnectionImpl0.getSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      OkHttpClient okHttpClient3 = okHttpClient0.setProxySelector(okHttpClient1.proxySelector);
      OkHttpClient okHttpClient4 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieManager cookieManager0 = new CookieManager();
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient3 = okHttpClient0.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
      Proxy proxy0 = okHttpClient2.getProxy();
      ProxySelector proxySelector0 = okHttpClient2.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      OkHttpClient okHttpClient4 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      OkHttpClient okHttpClient5 = okHttpClient3.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      OkHttpClient okHttpClient6 = okHttpClient5.setTransports(okHttpClient3.DEFAULT_TRANSPORTS);
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient6.open(uRL0);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient7 = okHttpClient3.copyWithDefaults();
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      boolean boolean0 = true;
      OkHttpClient okHttpClient8 = okHttpClient1.setFollowProtocolRedirects(boolean0);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient6.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      okHttpClient0.hostnameVerifier = hostnameVerifier0;
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(okHttpClient0.cookieHandler);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(okHttpClient3.transports);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      okHttpClient0.transports = okHttpClient1.transports;
      okHttpClient1.hostnameVerifier = okHttpClient0.hostnameVerifier;
      HostnameVerifier hostnameVerifier0 = okHttpClient1.getHostnameVerifier();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      OkHttpClient okHttpClient2 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      ProxySelector proxySelector1 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient3 = okHttpClient2.setCookieHandler(okHttpClient0.cookieHandler);
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      String string0 = "SbS=";
      String string1 = "m}!^VQYiLhhO>z(::}R";
      String string2 = null;
      // Undeclared exception!
      try { 
        MockURL.URL(string0, string1, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = okHttpClient0.getTransports();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      boolean boolean0 = false;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      boolean boolean1 = okHttpClient0.getFollowProtocolRedirects();
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(proxySelector0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setConnectionPool(okHttpClient0.connectionPool);
      OkHttpClient okHttpClient3 = okHttpClient1.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setAuthenticator(okHttpClient0.authenticator);
      OkHttpClient okHttpClient3 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      OkHttpClient okHttpClient4 = okHttpClient3.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      ResponseCache responseCache0 = ResponseCache.getDefault();
      OkHttpClient okHttpClient5 = okHttpClient2.setResponseCache(responseCache0);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      OkResponseCache okResponseCache0 = okHttpClient2.okResponseCache();
      OkHttpClient okHttpClient3 = okHttpClient2.setAuthenticator(okHttpClient0.authenticator);
      OkHttpClient okHttpClient4 = okHttpClient2.setAuthenticator(okHttpClient0.authenticator);
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      OkHttpClient okHttpClient5 = okHttpClient0.setSSLSocketFactory(okHttpClient3.sslSocketFactory);
      OkHttpClient okHttpClient6 = okHttpClient1.setConnectionPool(okHttpClient5.connectionPool);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      OkHttpClient okHttpClient3 = okHttpClient2.setProxy(okHttpClient0.proxy);
      OkHttpClient okHttpClient4 = okHttpClient0.setProxy(okHttpClient1.proxy);
      ConnectionPool connectionPool0 = okHttpClient4.getConnectionPool();
      OkHttpClient okHttpClient5 = okHttpClient0.copyWithDefaults();
      Proxy proxy0 = okHttpClient2.getProxy();
      OkHttpClient okHttpClient6 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      ProxySelector proxySelector0 = okHttpClient1.getProxySelector();
      okHttpClient4.hostnameVerifier = okHttpClient1.hostnameVerifier;
      OkAuthenticator okAuthenticator0 = okHttpClient2.getAuthenticator();
      OkHttpClient okHttpClient7 = okHttpClient4.setSSLSocketFactory(sSLSocketFactory0);
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
      OkAuthenticator okAuthenticator1 = okHttpClient2.getAuthenticator();
      OkHttpClient okHttpClient8 = okHttpClient5.setAuthenticator(okHttpClient0.authenticator);
      OkHttpClient okHttpClient9 = okHttpClient3.setSSLSocketFactory(sSLSocketFactory0);
      OkHttpClient okHttpClient10 = okHttpClient5.setResponseCache(okHttpClient1.responseCache);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = null;
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      okHttpClient0.authenticator = okAuthenticator0;
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      String string0 = "https";
      String string1 = "n.";
      URL uRL0 = MockURL.URL(string0, string0, string1);
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient2 = okHttpClient1.copyWithDefaults();
      okHttpClient1.hostnameVerifier = okHttpClient0.hostnameVerifier;
      okHttpClient0.authenticator = okHttpClient1.authenticator;
      OkHttpClient okHttpClient3 = okHttpClient0.setProxy(okHttpClient1.proxy);
      Proxy proxy0 = okHttpClient1.getProxy();
      OkAuthenticator okAuthenticator0 = okHttpClient1.getAuthenticator();
      OkHttpClient okHttpClient4 = okHttpClient0.setProxySelector(okHttpClient3.proxySelector);
      OkHttpClient okHttpClient5 = okHttpClient0.setResponseCache(okHttpClient3.responseCache);
      OkHttpClient okHttpClient6 = okHttpClient5.setSSLSocketFactory(okHttpClient2.sslSocketFactory);
      OkHttpClient okHttpClient7 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient8 = okHttpClient5.setConnectionPool(okHttpClient3.connectionPool);
      OkHttpClient okHttpClient9 = okHttpClient8.setResponseCache(okHttpClient6.responseCache);
      ProxySelector proxySelector0 = okHttpClient4.getProxySelector();
      OkHttpClient okHttpClient10 = okHttpClient8.setResponseCache(okHttpClient6.responseCache);
      okHttpClient8.transports = okHttpClient6.transports;
      List<String> list0 = okHttpClient2.getTransports();
      OkHttpClient okHttpClient11 = okHttpClient8.setCookieHandler(okHttpClient0.cookieHandler);
      OkHttpClient okHttpClient12 = okHttpClient7.setTransports(okHttpClient2.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient13 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      OkHttpClient okHttpClient14 = okHttpClient13.setConnectionPool(okHttpClient9.connectionPool);
  }
}
