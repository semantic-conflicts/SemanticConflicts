/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 02:13:25 GMT 2020
 */

package com.squareup.okhttp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.squareup.okhttp.ConnectionPool;
import com.squareup.okhttp.HttpResponseCache;
import com.squareup.okhttp.OkAuthenticator;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.okhttp.internal.http.OkResponseCache;
import com.squareup.okhttp.internal.http.RawHeaders;
import java.net.CookieHandler;
import java.net.CookieManager;
import java.net.CookiePolicy;
import java.net.CookieStore;
import java.net.HttpURLConnection;
import java.net.Proxy;
import java.net.ProxySelector;
import java.net.ResponseCache;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.stream.Stream;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OkHttpClient_ESTest extends OkHttpClient_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFileExample();
      long long0 = 1L;
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      ProxySelector proxySelector1 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      URL uRL0 = MockURL.getHttpExample();
      HttpURLConnection httpURLConnection0 = okHttpClient1.open(uRL0);
      OkHttpClient okHttpClient2 = okHttpClient1.setProxy(okHttpClient0.proxy);
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      OkHttpClient okHttpClient4 = okHttpClient2.setCookieHandler(okHttpClient0.cookieHandler);
      okHttpClient3.sslSocketFactory = okHttpClient0.sslSocketFactory;
      OkHttpClient okHttpClient5 = okHttpClient2.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      OkHttpClient okHttpClient6 = okHttpClient5.setHostnameVerifier(okHttpClient1.hostnameVerifier);
      OkHttpClient okHttpClient7 = okHttpClient0.copyWithDefaults();
      OkHttpClient okHttpClient8 = okHttpClient7.setFollowProtocolRedirects(okHttpClient1.followProtocolRedirects);
      OkHttpClient okHttpClient9 = okHttpClient8.setCookieHandler(okHttpClient4.cookieHandler);
      OkHttpClient okHttpClient10 = okHttpClient8.setCookieHandler(okHttpClient0.cookieHandler);
      boolean boolean0 = false;
      OkHttpClient okHttpClient11 = okHttpClient9.setFollowProtocolRedirects(boolean0);
      HttpURLConnection httpURLConnection1 = okHttpClient9.open(uRL0);
      OkHttpClient okHttpClient12 = okHttpClient1.setProxy(okHttpClient7.proxy);
      HostnameVerifier hostnameVerifier0 = okHttpClient0.getHostnameVerifier();
      OkHttpClient okHttpClient13 = okHttpClient3.setCookieHandler(okHttpClient9.cookieHandler);
      OkHttpClient okHttpClient14 = okHttpClient6.setHostnameVerifier(okHttpClient4.hostnameVerifier);
      OkHttpClient okHttpClient15 = okHttpClient13.setAuthenticator(okHttpClient10.authenticator);
      okHttpClient9.authenticator = okHttpClient11.authenticator;
      OkHttpClient okHttpClient16 = okHttpClient14.setAuthenticator(okHttpClient5.authenticator);
      okHttpClient16.hostnameVerifier = okHttpClient3.hostnameVerifier;
      OkHttpClient okHttpClient17 = okHttpClient0.setCookieHandler(okHttpClient7.cookieHandler);
      OkHttpClient okHttpClient18 = okHttpClient13.setFollowProtocolRedirects(okHttpClient6.followProtocolRedirects);
      OkHttpClient okHttpClient19 = okHttpClient3.setCookieHandler(okHttpClient18.cookieHandler);
      okHttpClient19.sslSocketFactory = okHttpClient2.sslSocketFactory;
      OkHttpClient okHttpClient20 = okHttpClient7.setProxy(okHttpClient18.proxy);
      boolean boolean1 = okHttpClient6.getFollowProtocolRedirects();
      Proxy proxy0 = okHttpClient18.getProxy();
      boolean boolean2 = true;
      OkHttpClient okHttpClient21 = okHttpClient10.setFollowProtocolRedirects(boolean2);
      OkHttpClient okHttpClient22 = okHttpClient10.setProxy(okHttpClient7.proxy);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(linkedList0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      ResponseCache responseCache0 = okHttpClient1.getResponseCache();
      okHttpClient0.sslSocketFactory = okHttpClient1.sslSocketFactory;
      OkHttpClient.DEFAULT_TRANSPORTS = okHttpClient1.DEFAULT_TRANSPORTS;
      OkHttpClient okHttpClient2 = okHttpClient0.setResponseCache(okHttpClient1.responseCache);
      OkHttpClient okHttpClient3 = okHttpClient2.setFollowProtocolRedirects(okHttpClient0.followProtocolRedirects);
      SSLSocketFactory sSLSocketFactory0 = okHttpClient0.getSslSocketFactory();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      okHttpClient2.hostnameVerifier = hostnameVerifier0;
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      SSLSocketFactory sSLSocketFactory1 = okHttpClient1.getSslSocketFactory();
      OkHttpClient okHttpClient4 = okHttpClient1.setConnectionPool(okHttpClient2.connectionPool);
      OkHttpClient okHttpClient5 = okHttpClient2.setSSLSocketFactory(okHttpClient0.sslSocketFactory);
      OkResponseCache okResponseCache0 = okHttpClient5.okResponseCache();
      OkHttpClient okHttpClient6 = okHttpClient3.setTransports(OkHttpClient.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient7 = okHttpClient3.setTransports(okHttpClient1.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient8 = okHttpClient5.setTransports(okHttpClient6.transports);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RawHeaders rawHeaders0 = new RawHeaders();
      List<String> list0 = rawHeaders0.toNameValueBlock();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      EvoSuiteLocalAddress evoSuiteLocalAddress0 = null;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)90;
      byte byte1 = (byte) (-17);
      byteArray0[2] = byte1;
      byte byte2 = (byte)81;
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-53);
      boolean boolean0 = NetworkHandling.sendDataOnTcp(evoSuiteLocalAddress0, byteArray0);
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient2 = okHttpClient0.setProxySelector(okHttpClient0.proxySelector);
      URL uRL0 = MockURL.getFileExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: file
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      boolean boolean0 = okHttpClient1.getFollowProtocolRedirects();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      List<String> list0 = OkHttpClient.DEFAULT_TRANSPORTS;
      OkHttpClient okHttpClient1 = okHttpClient0.setTransports(list0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      OkHttpClient okHttpClient0 = null;
      OkHttpClient okHttpClient1 = null;
      try {
        okHttpClient1 = new OkHttpClient(okHttpClient0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = ProxySelector.getDefault();
      OkHttpClient okHttpClient1 = okHttpClient0.setProxySelector(proxySelector0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      List<String> list0 = okHttpClient2.getTransports();
      OkHttpClient okHttpClient3 = okHttpClient2.setConnectionPool(okHttpClient0.connectionPool);
      OkHttpClient okHttpClient4 = okHttpClient3.setAuthenticator(okHttpClient1.authenticator);
      OkHttpClient okHttpClient5 = okHttpClient0.setCookieHandler(okHttpClient1.cookieHandler);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkResponseCache okResponseCache0 = okHttpClient1.okResponseCache();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ConnectionPool connectionPool0 = okHttpClient0.getConnectionPool();
      List<Locale.LanguageRange> list0 = null;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags(list0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = okHttpClient0.copyWithDefaults();
      CookieHandler cookieHandler0 = okHttpClient0.getCookieHandler();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: ftp
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkAuthenticator okAuthenticator0 = mock(OkAuthenticator.class, new ViolatedAssumptionAnswer());
      SSLSocketFactory sSLSocketFactory0 = HttpsURLConnection.getDefaultSSLSocketFactory();
      OkHttpClient okHttpClient1 = okHttpClient0.setSSLSocketFactory(sSLSocketFactory0);
      OkHttpClient okHttpClient2 = okHttpClient0.setAuthenticator(okAuthenticator0);
      OkHttpClient okHttpClient3 = okHttpClient1.setHostnameVerifier(okHttpClient0.hostnameVerifier);
      URL uRL0 = null;
      // Undeclared exception!
      try { 
        okHttpClient3.open(uRL0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
      boolean boolean0 = true;
      OkHttpClient okHttpClient1 = okHttpClient0.setFollowProtocolRedirects(boolean0);
      OkAuthenticator okAuthenticator0 = okHttpClient0.getAuthenticator();
      OkHttpClient okHttpClient2 = okHttpClient1.setProxySelector(okHttpClient0.proxySelector);
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      String string0 = "Connection";
      String string1 = "cannot write request body after response has been read";
      int int0 = 46;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(string0, string1, int0, string1, uRLStreamHandler0);
      // Undeclared exception!
      try { 
        okHttpClient0.open(uRL0);
      } catch(IllegalArgumentException e) {
         //
         // Unexpected protocol: connection
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      OkHttpClient okHttpClient1 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient2 = okHttpClient1.setResponseCache(okHttpClient0.responseCache);
      OkHttpClient okHttpClient3 = okHttpClient0.setConnectionPool(okHttpClient2.connectionPool);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Stream<Locale.LanguageRange> stream0 = linkedList0.parallelStream();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) okHttpClient0.transports, locale_FilteringMode0);
      // Undeclared exception!
      try { 
        okHttpClient0.setTransports(list0);
      } catch(IllegalArgumentException e) {
         //
         // transports doesn't contain http/1.1: []
         //
         verifyException("com.squareup.okhttp.OkHttpClient", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      OkHttpClient okHttpClient1 = okHttpClient0.setProxy(proxy0);
      ResponseCache responseCache0 = okHttpClient0.getResponseCache();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      CookieStore cookieStore0 = mock(CookieStore.class, new ViolatedAssumptionAnswer());
      CookiePolicy cookiePolicy0 = mock(CookiePolicy.class, new ViolatedAssumptionAnswer());
      CookieManager cookieManager0 = new CookieManager(cookieStore0, cookiePolicy0);
      OkHttpClient okHttpClient1 = okHttpClient0.setCookieHandler(cookieManager0);
      OkHttpClient okHttpClient2 = new OkHttpClient(okHttpClient0);
      OkHttpClient okHttpClient3 = okHttpClient2.setTransports(okHttpClient0.DEFAULT_TRANSPORTS);
      OkHttpClient okHttpClient4 = okHttpClient3.copyWithDefaults();
      OkHttpClient okHttpClient5 = okHttpClient0.setFollowProtocolRedirects(okHttpClient3.followProtocolRedirects);
      OkHttpClient okHttpClient6 = okHttpClient3.setResponseCache(okHttpClient2.responseCache);
      // Undeclared exception!
      try { 
        okHttpClient4.setTransports(okHttpClient0.transports);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      int int0 = 3611;
      long long0 = 0L;
      ConnectionPool connectionPool0 = new ConnectionPool(int0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setConnectionPool(connectionPool0);
      OkResponseCache okResponseCache0 = okHttpClient0.okResponseCache();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ProxySelector proxySelector0 = okHttpClient0.getProxySelector();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      HostnameVerifier hostnameVerifier0 = HttpsURLConnection.getDefaultHostnameVerifier();
      OkHttpClient okHttpClient1 = okHttpClient0.setHostnameVerifier(hostnameVerifier0);
      OkHttpClient okHttpClient2 = okHttpClient1.setHostnameVerifier(hostnameVerifier0);
      Proxy proxy0 = okHttpClient1.getProxy();
      Proxy proxy1 = okHttpClient2.getProxy();
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      OkHttpClient okHttpClient0 = new OkHttpClient();
      String string0 = ":2Zg0n)E6F(q]t\\;mGC";
      MockFile mockFile0 = new MockFile(string0, string0);
      long long0 = 300000L;
      HttpResponseCache httpResponseCache0 = new HttpResponseCache(mockFile0, long0);
      OkHttpClient okHttpClient1 = okHttpClient0.setResponseCache(httpResponseCache0);
  }
}
