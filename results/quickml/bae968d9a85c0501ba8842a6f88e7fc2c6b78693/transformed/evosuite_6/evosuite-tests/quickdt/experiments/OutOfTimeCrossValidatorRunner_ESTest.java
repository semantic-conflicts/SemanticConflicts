/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 22:59:12 GMT 2020
 */

package quickdt.experiments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import quickdt.data.AbstractInstance;
import quickdt.data.HashMapAttributes;
import quickdt.data.Instance;
import quickdt.experiments.OutOfTimeCrossValidatorRunner;
import quickdt.predictiveModels.PredictiveModelBuilder;
import quickdt.predictiveModels.randomForest.RandomForest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfTimeCrossValidatorRunner_ESTest extends OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      String[] stringArray0 = new String[9];
      String string0 = "";
      String string1 = "[2&%4`~5";
      stringArray0[1] = string0;
      String string2 = "T\\p1";
      stringArray0[4] = string2;
      String string3 = "";
      stringArray0[3] = string3;
      String string4 = "+PO";
      stringArray0[4] = string4;
      String string5 = "Wi$)`8k+!K";
      stringArray0[5] = string5;
      String string6 = ";6KR^~!,.F~o'M%HXIR";
      stringArray0[6] = string6;
      stringArray0[7] = stringArray0[2];
      String string7 = "";
      stringArray0[8] = string7;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      UnaryOperator<AbstractInstance> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      int int0 = (-1548);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "IN^-%Z1xx\\Wj51Fk";
      stringArray0[0] = string0;
      String string1 = "";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Vector<AbstractInstance> vector0 = new Vector<AbstractInstance>(int0);
      int int1 = 1;
      int int2 = 0;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(vector0, int1, int2);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 3482;
      int int1 = 1849;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      Instance instance0 = hashMapAttributes0.classification(stack0);
      boolean boolean0 = stack0.add((AbstractInstance) instance0);
      int int0 = 2;
      RandomForest randomForest0 = OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int0);
      int int1 = 16;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 1794;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      int int1 = 1307;
      int int2 = 4;
      PredictiveModelBuilder predictiveModelBuilder1 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int1, int2);
      int int3 = (-1015);
      PredictiveModelBuilder predictiveModelBuilder2 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int3, int2);
      int int4 = 1;
      int int5 = (-1522);
      PredictiveModelBuilder predictiveModelBuilder3 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int4, int5);
      int int6 = 0;
      int int7 = 2;
      PredictiveModelBuilder predictiveModelBuilder4 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int6, int7);
      PredictiveModelBuilder predictiveModelBuilder5 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      int int8 = Integer.MAX_VALUE;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int8);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      LinkedList<AbstractInstance> linkedList0 = new LinkedList<AbstractInstance>();
      int int0 = 0;
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      String string0 = "";
      Serializable serializable0 = hashMapAttributes0.put(string0, (Serializable) linkedList0);
      Instance instance0 = new Instance(hashMapAttributes0, hashMapAttributes0);
      boolean boolean0 = linkedList0.add((AbstractInstance) instance0);
      AbstractInstance abstractInstance0 = linkedList0.removeLast();
      int int1 = 60000;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(linkedList0, int0, int1);
  }
}
