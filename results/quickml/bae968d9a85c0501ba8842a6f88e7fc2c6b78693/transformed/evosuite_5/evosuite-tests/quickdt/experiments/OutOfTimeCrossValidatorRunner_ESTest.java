/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 22:55:08 GMT 2020
 */

package quickdt.experiments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import quickdt.data.AbstractInstance;
import quickdt.data.Attributes;
import quickdt.data.HashMapAttributes;
import quickdt.data.Instance;
import quickdt.experiments.OutOfTimeCrossValidatorRunner;
import quickdt.predictiveModels.PredictiveModelBuilder;
import quickdt.predictiveModels.randomForest.RandomForest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfTimeCrossValidatorRunner_ESTest extends OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      int int2 = 3;
      int int3 = 60000;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int2, int3);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      List<AbstractInstance> list0 = null;
      int int0 = 31;
      int int1 = (-64);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "jJ}_Lhz-I>x[";
      stringArray0[0] = string0;
      String string1 = "users_favorite_beer_id";
      stringArray0[1] = string1;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 0;
      int int1 = 539;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      int int0 = 0;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      Instance instance0 = hashMapAttributes0.classification(arrayList0);
      instance0.index = int0;
      boolean boolean0 = arrayList0.add((AbstractInstance) instance0);
      int int1 = 30;
      RandomForest randomForest0 = OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int0, int1);
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int1, int0);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      Serializable[] serializableArray0 = new Serializable[0];
      Attributes attributes0 = HashMapAttributes.create(serializableArray0);
      Instance instance0 = new Instance(attributes0, arrayList0);
      double double0 = 0.0;
      Instance instance1 = Instance.create((Serializable) instance0, double0, serializableArray0);
      int int0 = 5;
      boolean boolean0 = arrayList0.add((AbstractInstance) instance0);
      instance0.index = int0;
      boolean boolean1 = arrayList0.add((AbstractInstance) instance0);
      Instance instance2 = Instance.create((Serializable) instance0, (double) instance0.index, serializableArray0);
      int int1 = (-1868);
      int int2 = 60000;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int1, int2);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      int int0 = 40100;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      int int1 = Integer.MAX_VALUE;
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      Instance instance0 = new Instance(hashMapAttributes0, stack0);
      boolean boolean0 = stack0.add((AbstractInstance) instance0);
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int1);
  }
}
