/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Mon May 25 23:23:13 GMT 2020
 */

package quickdt.experiments;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "quickdt.experiments.OutOfTimeCrossValidatorRunner"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "UTF-8"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
    java.lang.System.setProperty("user.country", "BR"); 
    java.lang.System.setProperty("user.dir", "/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/quickml/bae968d9a85c0501ba8842a6f88e7fc2c6b78693/evosuite_11"); 
    java.lang.System.setProperty("user.home", "/server"); 
    java.lang.System.setProperty("user.language", "pt"); 
    java.lang.System.setProperty("user.name", "author-name"); 
    java.lang.System.setProperty("user.timezone", "Europe/Stockholm"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(OutOfTimeCrossValidatorRunner_ESTest_scaffolding.class.getClassLoader() ,
      "quickdt.predictiveModels.decisionTree.tree.Branch",
      "quickdt.crossValidation.OutOfTimeCrossValidator",
      "org.joda.time.DateTimeZone",
      "com.google.common.collect.ImmutableMultimap$Itr",
      "quickdt.predictiveModels.decisionTree.TreeBuilder$AttributeCharacteristics",
      "com.google.common.collect.Lists$RandomAccessPartition",
      "quickdt.predictiveModels.decisionTree.tree.Leaf",
      "com.google.common.collect.Collections2",
      "quickdt.crossValidation.DateTimeExtractor",
      "quickdt.predictiveModels.featureEngineering.AttributesEnricher",
      "org.apache.commons.io.filefilter.EmptyFileFilter",
      "com.google.common.collect.Sets$2",
      "quickdt.crossValidation.StationaryCrossValidator$DataSplit",
      "org.apache.commons.io.filefilter.TrueFileFilter",
      "com.google.common.collect.Sets$3",
      "com.google.common.collect.ImmutableCollection$ArrayBasedBuilder",
      "com.google.common.collect.Sets$1",
      "org.apache.commons.io.filefilter.AgeFileFilter",
      "com.thoughtworks.xstream.converters.Converter",
      "com.google.common.collect.RegularImmutableMap",
      "com.google.common.collect.RegularImmutableBiMap",
      "com.google.common.collect.ImmutableMultimap$Values",
      "com.thoughtworks.xstream.converters.SingleValueConverter",
      "org.javatuples.Septet",
      "org.javatuples.Pair",
      "org.apache.commons.io.filefilter.DirectoryFileFilter",
      "com.thoughtworks.xstream.persistence.PersistenceStrategy",
      "com.google.common.collect.AbstractMapEntry",
      "org.apache.commons.io.filefilter.SuffixFileFilter",
      "com.google.common.collect.ImmutableEnumMap$1",
      "com.google.common.collect.EmptyImmutableBiMap",
      "com.google.common.collect.ImmutableBiMap$Builder",
      "com.google.common.base.Predicate",
      "com.google.common.collect.ImmutableEnumMap$2",
      "com.thoughtworks.xstream.converters.ConverterLookup",
      "org.joda.time.chrono.ISOChronology",
      "org.joda.time.base.BaseLocal",
      "quickdt.predictiveModels.randomForest.RandomForestBuilder$1",
      "quickdt.predictiveModels.decisionTree.TreeBuilder",
      "com.google.common.collect.ImmutableMapEntry$TerminalEntry",
      "quickdt.data.HashMapAttributes",
      "com.google.common.base.Joiner",
      "org.apache.commons.io.filefilter.AndFileFilter",
      "quickdt.predictiveModels.downsamplingPredictiveModel.DownsamplingPredictiveModel",
      "com.google.common.collect.Lists$Partition",
      "com.google.common.collect.Lists",
      "com.thoughtworks.xstream.mapper.Mapper",
      "quickdt.experiments.TrainingDataGenerator2",
      "quickdt.predictiveModels.calibratedPredictiveModel.Calibrator",
      "org.apache.commons.io.filefilter.NameFileFilter",
      "com.google.common.collect.UnmodifiableListIterator",
      "org.joda.time.base.AbstractInstant",
      "com.google.common.io.PatternFilenameFilter",
      "com.google.common.collect.ImmutableMultimap",
      "com.google.common.collect.ImmutableSortedSet",
      "org.javatuples.Decade",
      "com.google.common.base.Absent",
      "org.javatuples.Octet",
      "org.joda.time.ReadWritablePeriod",
      "quickdt.predictiveModels.randomForest.RandomForestBuilder",
      "quickdt.predictiveModels.decisionTree.scorers.SplitDiffScorer",
      "com.google.common.base.Joiner$MapJoiner",
      "org.joda.time.LocalDateTime",
      "com.google.common.base.Equivalence$Equals",
      "quickdt.predictiveModels.decisionTree.tree.ClassificationCounter",
      "com.google.common.base.Equivalence$Wrapper",
      "org.apache.commons.io.filefilter.WildcardFilter",
      "com.google.common.base.Preconditions",
      "com.google.common.collect.ImmutableSortedSetFauxverideShim",
      "com.google.common.collect.ImmutableMapValues",
      "org.apache.commons.io.filefilter.IOFileFilter",
      "com.google.common.collect.ImmutableEntry",
      "com.google.common.base.Joiner$1",
      "org.apache.commons.io.filefilter.MagicNumberFileFilter",
      "com.google.common.base.Joiner$2",
      "com.google.common.collect.EmptyImmutableSetMultimap",
      "org.joda.time.YearMonthDay",
      "quickdt.predictiveModels.calibratedPredictiveModel.PAVCalibratedPredictiveModelBuilder",
      "com.google.common.collect.AbstractNavigableMap",
      "com.google.common.collect.ImmutableEnumMap",
      "com.google.common.collect.ImmutableCollection",
      "org.joda.time.DateTime$Property",
      "org.javatuples.Ennead",
      "quickdt.collections.ValueSummingMap",
      "org.joda.time.DateTimeField",
      "com.thoughtworks.xstream.core.BaseException",
      "com.google.common.collect.ImmutableCollection$Builder",
      "com.google.common.collect.ImmutableSetMultimap",
      "com.google.common.collect.BiMap",
      "quickdt.predictiveModels.decisionTree.scorers.MSEScorer",
      "com.google.common.collect.ImmutableSet",
      "com.google.common.collect.Lists$AbstractListWrapper",
      "com.google.common.collect.ImmutableMapEntry",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.joda.time.base.AbstractPeriod",
      "quickdt.crossValidation.WeightedAUCCrossValLoss$AUCPoint",
      "com.google.common.collect.ImmutableMapValues$1",
      "quickdt.predictiveModels.randomForest.UpdatableRandomForestBuilder",
      "quickdt.data.Instance",
      "org.apache.commons.io.filefilter.HiddenFileFilter",
      "com.google.common.collect.ImmutableEnumMap$2$1",
      "org.joda.time.ReadablePeriod",
      "com.google.common.collect.ImmutableMultimap$EntryCollection",
      "org.apache.commons.io.filefilter.FalseFileFilter",
      "com.google.common.collect.Lists$StringAsImmutableList",
      "com.google.common.collect.Lists$2",
      "com.google.common.collect.Maps$FilteredEntryBiMap",
      "org.apache.commons.io.FilenameUtils",
      "com.google.common.collect.Lists$1",
      "com.google.common.collect.RegularImmutableMap$NonTerminalMapEntry",
      "com.google.common.collect.ImmutableMultimap$Builder",
      "com.google.common.base.Equivalence$Identity",
      "org.joda.time.base.AbstractPartial",
      "org.joda.time.base.BasePartial",
      "org.joda.time.base.BaseDateTime",
      "com.google.common.collect.Multiset",
      "com.google.common.collect.ImmutableSetMultimap$EntrySet",
      "quickdt.predictiveModels.decisionTree.tree.Node$LeafDepthStats",
      "com.google.common.collect.AbstractMultimap",
      "org.joda.time.LocalTime",
      "com.google.common.base.Supplier",
      "quickdt.crossValidation.WeightedAUCCrossValLoss",
      "quickdt.predictiveModels.calibratedPredictiveModel.UpdatablePAVCalibratedPredictiveModelBuilder",
      "org.joda.time.base.BasePeriod",
      "com.google.common.collect.EmptyImmutableSet",
      "quickdt.predictiveModels.decisionTree.TreeBuilder$LessThanEqualThresholdPredicate",
      "com.google.common.collect.Maps$ImprovedAbstractMap",
      "org.apache.commons.io.filefilter.OrFileFilter",
      "com.google.common.collect.ImmutableList",
      "org.joda.time.TimeOfDay",
      "com.google.common.collect.Maps$FilteredEntrySortedMap",
      "org.joda.time.ReadableDuration",
      "org.joda.time.format.DateTimeFormatter",
      "org.joda.time.DateTime",
      "com.google.common.collect.ImmutableMap$Builder",
      "quickdt.predictiveModels.featureEngineering.FeatureEngineeringPredictiveModelBuilder",
      "com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping",
      "org.javatuples.Quartet",
      "quickdt.predictiveModels.decisionTree.Scorer",
      "com.google.common.collect.Maps$EntryTransformer",
      "org.joda.time.ReadWritableDateTime",
      "org.joda.time.Instant",
      "quickdt.crossValidation.RMSECrossValLoss",
      "org.apache.commons.io.filefilter.CanWriteFileFilter",
      "com.google.common.collect.ImmutableList$SubList",
      "com.google.common.collect.ListMultimap",
      "com.google.common.base.FunctionalEquivalence",
      "quickdt.predictiveModels.calibratedPredictiveModel.CalibratedPredictiveModel",
      "quickdt.crossValidation.WeightedAUCCrossValLoss$AUCData",
      "com.google.common.collect.RegularImmutableList",
      "com.google.common.base.Optional",
      "quickdt.predictiveModels.decisionTree.scorers.MSEScorer$CrossValidationCorrection",
      "quickdt.predictiveModels.randomForest.RandomForest",
      "com.google.common.collect.Lists$TransformingRandomAccessList",
      "org.joda.time.DateTimeFieldType",
      "quickdt.predictiveModels.calibratedPredictiveModel.PAVCalibrator",
      "org.apache.commons.io.filefilter.NotFileFilter",
      "org.javatuples.valueintf.IValue4",
      "org.javatuples.valueintf.IValue3",
      "com.google.common.collect.ImmutableMapKeySet",
      "org.javatuples.valueintf.IValue2",
      "org.javatuples.valueintf.IValue1",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy",
      "quickdt.predictiveModels.decisionTree.tree.CategoricalBranch",
      "org.javatuples.valueintf.IValue0",
      "quickdt.crossValidation.CrossValLoss",
      "com.thoughtworks.xstream.XStreamException",
      "org.apache.commons.io.filefilter.ConditionalFileFilter",
      "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets$1",
      "quickdt.Misc",
      "org.javatuples.Sextet",
      "com.google.common.collect.SortedMapDifference",
      "com.google.common.collect.RegularImmutableSet",
      "org.joda.time.base.AbstractDateTime",
      "com.thoughtworks.xstream.converters.ConverterMatcher",
      "com.google.common.collect.ImmutableListMultimap",
      "com.google.common.collect.ImmutableMultimap$1",
      "com.google.common.collect.Maps$AbstractFilteredMap",
      "org.javatuples.valueintf.IValue9",
      "com.google.common.base.Present",
      "org.javatuples.valueintf.IValue8",
      "org.javatuples.valueintf.IValue7",
      "org.javatuples.valueintf.IValue6",
      "org.javatuples.valueintf.IValue5",
      "com.google.common.collect.ImmutableMultimap$2",
      "org.apache.commons.io.filefilter.DelegateFileFilter",
      "com.google.common.collect.Iterables",
      "com.google.common.collect.ImmutableAsList",
      "com.google.common.collect.Sets$SetView",
      "com.google.common.collect.ImmutableSet$Builder",
      "com.google.common.collect.RegularImmutableAsList",
      "com.google.common.collect.Maps$FilteredEntryMap",
      "com.google.common.collect.SingletonImmutableSet",
      "quickdt.predictiveModels.featureEngineering.AttributesEnrichStrategy",
      "org.joda.time.PeriodType",
      "quickdt.crossValidation.StationaryCrossValidator",
      "com.google.common.collect.ImmutableSetMultimap$Builder",
      "com.google.common.collect.ImmutableMapEntrySet",
      "quickdt.predictiveModels.PredictiveModel",
      "quickdt.predictiveModels.downsamplingPredictiveModel.DownsamplingPredictiveModelBuilder",
      "quickdt.predictiveModels.featureEngineering.FeatureEngineeredPredictiveModel",
      "com.google.common.collect.ImmutableMultiset",
      "quickdt.data.AbstractInstance",
      "com.google.common.collect.ImmutableMultimap$Keys",
      "com.google.common.collect.Lists$TransformingSequentialList",
      "com.thoughtworks.xstream.io.StreamException",
      "com.google.common.collect.ObjectArrays",
      "org.joda.time.MutablePeriod",
      "quickdt.crossValidation.NonWeightedAUCCrossValLoss",
      "org.joda.time.MutableDateTime",
      "com.google.common.collect.ImmutableList$1",
      "com.google.common.collect.MapDifference",
      "org.joda.time.ReadableDateTime",
      "com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets",
      "com.google.common.collect.SortedIterable",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$XmlMapEntriesIterator",
      "org.apache.commons.io.filefilter.WildcardFileFilter",
      "org.javatuples.Unit",
      "com.google.common.collect.UnmodifiableIterator",
      "org.joda.time.DateMidnight",
      "quickdt.predictiveModels.decisionTree.tree.UpdatableLeaf",
      "quickdt.predictiveModels.calibratedPredictiveModel.PAVCalibrator$Observation",
      "com.google.common.collect.Maps$FilteredEntryNavigableMap",
      "quickdt.predictiveModels.UpdatablePredictiveModelBuilder",
      "com.twitter.common.stats.ReservoirSampler",
      "quickdt.predictiveModels.decisionTree.TreeBuilder$GreaterThanThresholdPredicate",
      "com.google.common.collect.ImmutableMapKeySet$1",
      "quickdt.crossValidation.CrossValidator",
      "com.google.common.collect.Lists$RandomAccessListWrapper",
      "com.google.common.collect.ImmutableEnumSet",
      "quickdt.crossValidation.MSECrossValLoss",
      "org.javatuples.Triplet",
      "com.google.common.collect.ImmutableList$ReverseImmutableList",
      "com.google.common.collect.SingletonImmutableList",
      "com.google.common.base.Function",
      "com.google.common.collect.ImmutableMap",
      "com.google.common.collect.AbstractIndexedListIterator",
      "com.google.common.collect.Maps$1",
      "org.joda.time.ReadableInstant",
      "org.apache.commons.io.filefilter.FileFileFilter",
      "com.google.common.collect.Sets",
      "quickdt.predictiveModels.PredictiveModelBuilder",
      "quickdt.data.Attributes",
      "org.joda.time.DurationFieldType",
      "org.joda.time.ReadWritableInstant",
      "quickdt.predictiveModels.decisionTree.Tree",
      "org.apache.commons.io.filefilter.CanReadFileFilter",
      "com.google.common.collect.ImmutableList$Builder",
      "quickdt.experiments.OutOfTimeCrossValidatorRunner",
      "org.apache.commons.io.IOCase",
      "quickdt.crossValidation.OnlineCrossValLoss",
      "com.google.common.collect.Multimap",
      "org.apache.commons.io.filefilter.SizeFileFilter",
      "com.google.common.collect.ImmutableBiMap",
      "org.joda.time.chrono.AssembledChronology",
      "com.google.common.collect.SingletonImmutableBiMap",
      "com.google.common.base.PairwiseEquivalence",
      "org.joda.time.chrono.BaseChronology",
      "org.javatuples.Tuple",
      "org.apache.commons.io.filefilter.RegexFileFilter",
      "org.joda.time.Period",
      "com.google.common.collect.RegularImmutableMap$EntrySet",
      "com.google.common.base.Equivalence",
      "org.joda.time.Chronology",
      "org.joda.time.field.AbstractReadableInstantFieldProperty",
      "com.google.common.collect.Maps",
      "com.google.common.collect.SetMultimap",
      "org.apache.commons.io.filefilter.PrefixFileFilter",
      "org.joda.time.LocalDate",
      "quickdt.predictiveModels.decisionTree.tree.Node",
      "org.javatuples.Quintet",
      "quickdt.predictiveModels.decisionTree.UpdatableTreeBuilder",
      "com.thoughtworks.xstream.persistence.AbstractFilePersistenceStrategy$ValidFilenameFilter",
      "org.joda.time.ReadablePartial",
      "quickdt.crossValidation.LogCrossValLoss"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.function.BiFunction", false, OutOfTimeCrossValidatorRunner_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(OutOfTimeCrossValidatorRunner_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "quickdt.experiments.OutOfTimeCrossValidatorRunner",
      "quickdt.data.HashMapAttributes",
      "com.google.common.base.Joiner",
      "com.google.common.base.Preconditions",
      "com.google.common.base.Joiner$1",
      "com.google.common.collect.Collections2",
      "com.google.common.base.Joiner$MapJoiner",
      "com.google.common.collect.Maps",
      "quickdt.data.AbstractInstance",
      "quickdt.data.Instance",
      "quickdt.predictiveModels.decisionTree.TreeBuilder",
      "quickdt.predictiveModels.decisionTree.scorers.MSEScorer",
      "quickdt.predictiveModels.decisionTree.scorers.MSEScorer$CrossValidationCorrection",
      "quickdt.predictiveModels.randomForest.RandomForestBuilder",
      "quickdt.predictiveModels.UpdatablePredictiveModelBuilder",
      "quickdt.predictiveModels.randomForest.UpdatableRandomForestBuilder",
      "com.google.common.collect.Lists",
      "quickdt.predictiveModels.randomForest.RandomForest",
      "quickdt.experiments.TrainingDataGenerator2",
      "com.google.common.collect.Iterables",
      "quickdt.predictiveModels.randomForest.RandomForestBuilder$1",
      "quickdt.predictiveModels.decisionTree.Tree",
      "quickdt.predictiveModels.decisionTree.tree.Node",
      "quickdt.predictiveModels.decisionTree.tree.Leaf",
      "quickdt.predictiveModels.decisionTree.tree.ClassificationCounter",
      "quickdt.collections.ValueSummingMap",
      "quickdt.predictiveModels.decisionTree.TreeBuilder$AttributeCharacteristics",
      "quickdt.Misc",
      "com.google.common.collect.Sets",
      "org.javatuples.Tuple",
      "org.javatuples.Pair",
      "quickdt.predictiveModels.decisionTree.tree.Branch",
      "quickdt.predictiveModels.decisionTree.tree.CategoricalBranch",
      "org.apache.commons.io.FilenameUtils",
      "org.apache.commons.io.IOCase",
      "org.apache.commons.io.filefilter.AbstractFileFilter",
      "org.apache.commons.io.filefilter.PrefixFileFilter"
    );
  }
}
