/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 23:14:57 GMT 2020
 */

package quickdt.experiments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import quickdt.data.AbstractInstance;
import quickdt.data.HashMapAttributes;
import quickdt.data.Instance;
import quickdt.experiments.OutOfTimeCrossValidatorRunner;
import quickdt.predictiveModels.PredictiveModelBuilder;
import quickdt.predictiveModels.randomForest.RandomForest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfTimeCrossValidatorRunner_ESTest extends OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      int int0 = (-3574);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      LinkedList<AbstractInstance> linkedList0 = new LinkedList<AbstractInstance>();
      int int0 = 1477;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(linkedList0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "lG?k";
      stringArray0[0] = string0;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      int int0 = 0;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      Instance instance0 = new Instance(hashMapAttributes0, hashMapAttributes0);
      boolean boolean0 = stack0.add((AbstractInstance) instance0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int1, int0);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 323;
      int int1 = (-160);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = (-1420);
      int int1 = 122;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 125;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      List<AbstractInstance> list0 = null;
      int int1 = 0;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int1, int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 2935;
      int int1 = 20;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      Vector<AbstractInstance> vector0 = new Vector<AbstractInstance>();
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      Instance instance0 = hashMapAttributes0.classification(vector0);
      boolean boolean0 = vector0.add((AbstractInstance) instance0);
      int int2 = 0;
      RandomForest randomForest0 = OutOfTimeCrossValidatorRunner.getRandomForest(vector0, int2, int1);
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      String string1 = "seller_id";
      stringArray0[1] = string1;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 40100;
      int int1 = 2327;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      LinkedList<AbstractInstance> linkedList0 = new LinkedList<AbstractInstance>();
      ListIterator<AbstractInstance> listIterator0 = linkedList0.listIterator();
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      String string0 = ";!";
      Serializable serializable0 = hashMapAttributes0.put(string0, (Serializable) linkedList0);
      Instance instance0 = hashMapAttributes0.classification(linkedList0);
      boolean boolean0 = linkedList0.add((AbstractInstance) instance0);
      int int2 = 443;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(linkedList0, int2, int0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      LinkedList<AbstractInstance> linkedList0 = new LinkedList<AbstractInstance>();
      AbstractInstance abstractInstance0 = null;
      boolean boolean0 = linkedList0.add(abstractInstance0);
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      double double0 = 0.005;
      Instance instance0 = new Instance(hashMapAttributes0, hashMapAttributes0, double0);
      boolean boolean1 = linkedList0.add((AbstractInstance) instance0);
      HashMapAttributes hashMapAttributes1 = new HashMapAttributes();
      Instance instance1 = hashMapAttributes1.classification(linkedList0);
      boolean boolean2 = linkedList0.add((AbstractInstance) instance1);
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(linkedList0, int0, int0);
  }
}
