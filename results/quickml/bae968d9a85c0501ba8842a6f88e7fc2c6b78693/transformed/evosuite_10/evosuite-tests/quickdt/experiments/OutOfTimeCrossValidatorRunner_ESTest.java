/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 23:18:02 GMT 2020
 */

package quickdt.experiments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import quickdt.data.AbstractInstance;
import quickdt.data.Attributes;
import quickdt.data.HashMapAttributes;
import quickdt.data.Instance;
import quickdt.experiments.OutOfTimeCrossValidatorRunner;
import quickdt.predictiveModels.PredictiveModelBuilder;
import quickdt.predictiveModels.randomForest.RandomForest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfTimeCrossValidatorRunner_ESTest extends OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      int int0 = (-4472);
      int int1 = (-2639);
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      int int2 = 871;
      int int3 = 4;
      PredictiveModelBuilder predictiveModelBuilder1 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int2, int3);
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      int int4 = 0;
      PredictiveModelBuilder predictiveModelBuilder2 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int2, int4);
      String[] stringArray0 = null;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      LinkedList<AbstractInstance> linkedList0 = new LinkedList<AbstractInstance>();
      int int0 = 1000;
      int int1 = 0;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(linkedList0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      int int0 = 40100;
      int int1 = 125;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      String[] stringArray0 = new String[3];
      String string0 = "targetMinorityProportion must be between 0 and 1 (was %s)";
      stringArray0[0] = string0;
      String string1 = "JfPk";
      stringArray0[1] = string1;
      String string2 = "F";
      stringArray0[2] = string2;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = (-4293);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int0);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 5;
      int int1 = (-1682);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "classification is not an instance of Integer or Double.  Classification value is ";
      stringArray0[0] = string0;
      String string1 = "tK[C6OTNGMgkQcC-9";
      stringArray0[1] = string1;
      String string2 = "@u6GHg!-ncjY";
      stringArray0[2] = string2;
      String string3 = "favorite_soccer_team_id";
      stringArray0[3] = string3;
      String string4 = "users_favorite_beer_id";
      stringArray0[4] = string4;
      String string5 = "user_iq";
      stringArray0[5] = string5;
      String string6 = "favorite_soccer_team_id";
      stringArray0[6] = string6;
      String string7 = "Values array cannot be null";
      stringArray0[7] = string7;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      int int0 = (-1);
      int int1 = 1586;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      Serializable[] serializableArray0 = new Serializable[0];
      Attributes attributes0 = HashMapAttributes.create(serializableArray0);
      double double0 = 963.0675;
      Instance instance0 = new Instance(attributes0, arrayList0);
      boolean boolean0 = arrayList0.add((AbstractInstance) instance0);
      Instance instance1 = new Instance(attributes0, arrayList0, double0);
      boolean boolean1 = arrayList0.add((AbstractInstance) instance1);
      Instance instance2 = Instance.create((Serializable) arrayList0, serializableArray0);
      boolean boolean2 = arrayList0.add((AbstractInstance) instance1);
      int int2 = 1770;
      RandomForest randomForest0 = OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int2, int2);
      String[] stringArray0 = null;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 0;
      int int1 = 2;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 11000)
  public void test8()  throws Throwable  {
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      stack0.clear();
      Attributes attributes0 = null;
      double double0 = 1.0E-14;
      Instance instance0 = new Instance(attributes0, stack0, double0);
      int int0 = 1558;
      stack0.setSize(int0);
      boolean boolean0 = stack0.add((AbstractInstance) instance0);
      int int1 = 40100;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int1, int1);
  }
}
