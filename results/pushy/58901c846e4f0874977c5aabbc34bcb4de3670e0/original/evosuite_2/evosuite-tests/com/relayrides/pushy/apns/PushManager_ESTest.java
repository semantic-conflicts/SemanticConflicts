/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 03:05:26 GMT 2020
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.ExpiredToken;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.CombinedChannelDuplexHandler;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.GlobalEventExecutor;
import java.nio.channels.spi.SelectorProvider;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      SSLContext sSLContext0 = null;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      SSLContext sSLContext1 = SSLContext.getDefault();
      int int0 = 0;
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext1, int0, nioEventLoopGroup0, nioEventLoopGroup0, priorityBlockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      SSLContext sSLContext0 = SSLContext.getDefault();
      int int0 = 9;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = null;
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, nioEventLoopGroup0, nioEventLoopGroup0, blockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      SSLContext sSLContext0 = null;
      int int0 = 0;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, nioEventLoopGroup0, nioEventLoopGroup0, priorityBlockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      SSLContext sSLContext0 = null;
      int int0 = 0;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      PriorityBlockingQueue<KnownBadPushNotification> priorityBlockingQueue0 = new PriorityBlockingQueue<KnownBadPushNotification>();
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, nioEventLoopGroup0, nioEventLoopGroup0, priorityBlockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      SelectorProvider selectorProvider0 = SelectorProvider.provider();
      LinkedTransferQueue<KnownBadPushNotification> linkedTransferQueue0 = new LinkedTransferQueue<KnownBadPushNotification>();
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.MISSING_TOPIC;
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      SSLContext sSLContext0 = SSLContext.getDefault();
      int int0 = (-1);
      int int1 = (-462);
      NioEventLoopGroup nioEventLoopGroup0 = null;
      try {
        nioEventLoopGroup0 = new NioEventLoopGroup(int1);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }
}
