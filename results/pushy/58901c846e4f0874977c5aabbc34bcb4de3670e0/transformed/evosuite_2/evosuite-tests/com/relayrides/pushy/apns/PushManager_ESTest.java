/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 20:25:14 GMT 2020
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.ExpiredToken;
import com.relayrides.pushy.apns.FailedConnectionListener;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandler;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelOutboundHandlerAdapter;
import io.netty.channel.CombinedChannelDuplexHandler;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.EventLoop;
import io.netty.channel.embedded.EmbeddedChannel;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.EventExecutor;
import io.netty.util.concurrent.GlobalEventExecutor;
import java.io.File;
import java.io.FileDescriptor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.channels.spi.SelectorProvider;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.time.Duration;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.AbstractQueuedSynchronizer;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;
import javax.net.ssl.SSLSessionContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      long long0 = (-1802L);
      boolean boolean1 = false;
      pushManager0.shutDownFinished = boolean1;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      String string0 = "Failed connection listeners may not be registered after a push manager has been shut down.";
      try { 
        SSLContext.getInstance(string0, string0);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      ChannelHandler[] channelHandlerArray0 = new ChannelHandler[4];
      ChannelInboundHandlerAdapter channelInboundHandlerAdapter0 = new ChannelInboundHandlerAdapter();
      channelHandlerArray0[0] = (ChannelHandler) channelInboundHandlerAdapter0;
      ChannelOutboundHandlerAdapter channelOutboundHandlerAdapter0 = new ChannelOutboundHandlerAdapter();
      channelHandlerArray0[1] = (ChannelHandler) channelOutboundHandlerAdapter0;
      CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelDuplexHandler> combinedChannelDuplexHandler0 = (CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelDuplexHandler>) mock(CombinedChannelDuplexHandler.class, new ViolatedAssumptionAnswer());
      ChannelDuplexHandler channelDuplexHandler0 = new ChannelDuplexHandler();
      CombinedChannelDuplexHandler<CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelDuplexHandler>, ChannelDuplexHandler> combinedChannelDuplexHandler1 = null;
      try {
        combinedChannelDuplexHandler1 = new CombinedChannelDuplexHandler<CombinedChannelDuplexHandler<ChannelInboundHandlerAdapter, ChannelDuplexHandler>, ChannelDuplexHandler>(combinedChannelDuplexHandler0, channelDuplexHandler0);
      } catch(IllegalArgumentException e) {
         //
         // inboundHandler must not implement ChannelOutboundHandler to get combined.
         //
         verifyException("io.netty.channel.CombinedChannelDuplexHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "An exception was thrown by a user handler's exceptionCaught() method while handling the following exception:";
      int int0 = 0;
      int int1 = (-4372);
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, int1);
      String string1 = "INVALID_TOKEN_SIZE";
      String string2 = "PARITY_BIT";
      try { 
        SSLContext.getInstance(string1, string2);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      String string0 = "Interrupted while waiting for closed connection's pending operations to finish.";
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0, throwable0);
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      String string1 = "";
      MockThrowable mockThrowable1 = new MockThrowable(string1);
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager1.dispatchThread, mockThrowable1);
      ApnsEnvironment apnsEnvironment0 = pushManager1.environment;
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ForkJoinPool forkJoinPool0 = null;
      try {
        forkJoinPool0 = new ForkJoinPool(pushManager1.concurrentConnectionCount, forkJoinPool_ForkJoinWorkerThreadFactory0, pushManager_DispatchThreadExceptionHandler0, pushManager0.shouldShutDownEventLoopGroup);
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ForkJoinPool", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.unfinishedConnectionCount, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, pushManager0.queue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      ApnsEnvironment apnsEnvironment1 = ApnsEnvironment.getSandboxEnvironment();
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      SSLContext sSLContext0 = pushManager0.sslContext;
      int int0 = (-185);
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int0, pushManager0.eventLoopGroup, pushManager0.listenerExecutorService, pushManager0.retryQueue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      LinkedBlockingQueue<KnownBadPushNotification> linkedBlockingQueue0 = pushManager0.retryQueue;
      pushManager0.retryQueue = linkedBlockingQueue0;
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      BlockingQueue<KnownBadPushNotification> blockingQueue1 = pushManager0.getQueue();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      pushManager0.shutDown = boolean0;
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
      } catch(IllegalStateException e) {
         //
         // Failed connection listeners may not be registered after a push manager has been shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      Thread thread0 = MockThread.currentThread();
      MockThrowable mockThrowable0 = new MockThrowable();
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.uncaughtException(thread0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      int int0 = 0;
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, int0, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, blockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      AbstractQueuedSynchronizer.ConditionObject abstractQueuedSynchronizer_ConditionObject0 = (AbstractQueuedSynchronizer.ConditionObject)pushManager0.connectionsFinished;
      MockDate mockDate0 = new MockDate();
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      pushManager0.connectionsFinished = (Condition) abstractQueuedSynchronizer_ConditionObject0;
      pushManager0.start();
      boolean boolean0 = pushManager0.isShutDown();
      pushManager0.createAndStartDispatchThread();
      Thread thread0 = pushManager0.createDispatchThread();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      pushManager0.createAndStartDispatchThread();
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = pushManager0.isStarted();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      String string0 = "";
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(string0);
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.MISSING_TOPIC;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      Thread thread0 = pushManager0.createDispatchThread();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager1.environment, pushManager0.sslContext, pushManager1.eventLoopGroup, pushManager0);
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.INVALID_PAYLOAD_SIZE;
      // Undeclared exception!
      try { 
        pushManager1.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = true;
      pushManager0.shouldShutDownEventLoopGroup = boolean0;
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FeedbackServiceClient feedbackServiceClient0 = pushManager0.feedbackServiceClient;
      pushManager0.feedbackServiceClient = feedbackServiceClient0;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      int int0 = (-3617);
      // Undeclared exception!
      try { 
        pushManager0.shutdown((long) int0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      Thread thread0 = pushManager0.createDispatchThread();
      // Undeclared exception!
      try { 
        pushManager0.start();
      } catch(IllegalStateException e) {
         //
         // Push manager has already been started.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      apnsConnection0.shutdownGracefully();
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionClosure(apnsConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      MockDate mockDate0 = new MockDate();
      long long0 = (-862L);
      Instant instant0 = MockInstant.ofEpochMilli(long0);
      long long1 = 27L;
      Instant instant1 = MockInstant.minusSeconds(instant0, long1);
      Instant instant2 = mockDate0.toInstant();
      long long2 = 683L;
      Date date0 = Date.from(instant2);
      Duration duration0 = Duration.ofNanos(long2);
      Instant instant3 = MockInstant.plus(instant1, (TemporalAmount) duration0);
      long long3 = 0L;
      Duration duration1 = Duration.from(duration0);
      Instant instant4 = MockInstant.minusMillis(instant3, long3);
      Date date1 = Date.from(instant4);
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager1.sslContext, pushManager0.eventLoopGroup, pushManager1);
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      String string0 = "A>!VPtJG@K-XIO";
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(string0, mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable(mockThrowable1);
      // Undeclared exception!
      try { 
        pushManager1.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }
}
