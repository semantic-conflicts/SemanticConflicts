/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 20:47:55 GMT 2020
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.ExpiredToken;
import com.relayrides.pushy.apns.FailedConnectionListener;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.local.LocalServerChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.GlobalEventExecutor;
import java.io.PrintWriter;
import java.nio.channels.DatagramChannel;
import java.nio.channels.SocketChannel;
import java.nio.channels.spi.AbstractSelector;
import java.nio.channels.spi.SelectorProvider;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.util.Date;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.ReentrantLock;
import javax.net.ssl.SSLContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      apnsConnection0.shutdownImmediately();
      apnsConnection0.shutdownImmediately();
      // Undeclared exception!
      try { 
        apnsConnection0.connect();
      } catch(NullPointerException e) {
         //
         // group
         //
         verifyException("io.netty.bootstrap.AbstractBootstrap", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      int int0 = (-27);
      long long0 = 909L;
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Class<Object> class0 = Object.class;
      int int1 = (-2903);
      DefaultThreadFactory defaultThreadFactory0 = null;
      try {
        defaultThreadFactory0 = new DefaultThreadFactory(class0, pushManager0.started, int1);
      } catch(IllegalArgumentException e) {
         //
         // priority: -2903 (expected: Thread.MIN_PRIORITY <= priority <= Thread.MAX_PRIORITY)
         //
         verifyException("io.netty.util.concurrent.DefaultThreadFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      SSLContext sSLContext0 = SSLContext.getDefault();
      int int0 = 179;
      Class<KnownBadPushNotification> class0 = KnownBadPushNotification.class;
      DefaultThreadFactory defaultThreadFactory0 = new DefaultThreadFactory(class0);
      SelectorProvider selectorProvider0 = SelectorProvider.provider();
      NioEventLoopGroup nioEventLoopGroup0 = null;
      try {
        nioEventLoopGroup0 = new NioEventLoopGroup(int0, defaultThreadFactory0, selectorProvider0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      int int0 = (-917);
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, int0);
      try { 
        SSLContext.getInstance(string0);
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      String string0 = null;
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      Provider provider0 = mockSecureRandom0.getProvider();
      // Undeclared exception!
      try { 
        SSLContext.getInstance(string0, provider0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Provider$ServiceKey", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = null;
      String string0 = "io.netty.channel.AbstractChannel";
      String string1 = "empty id";
      try { 
        SSLContext.getInstance(string0, string1);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      ApnsEnvironment apnsEnvironment1 = ApnsEnvironment.getProductionEnvironment();
      String string0 = "com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler";
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom();
      Provider provider0 = mockSecureRandom0.getProvider();
      try { 
        SSLContext.getInstance(string0, provider0);
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      Thread thread0 = pushManager1.createDispatchThread();
      MockThread mockThread0 = new MockThread(thread0);
      Throwable throwable0 = null;
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(mockThread0, throwable0);
      PushManager<KnownBadPushNotification> pushManager2 = pushManager_DispatchThreadExceptionHandler0.manager;
      pushManager_DispatchThreadExceptionHandler0.manager.connectionsFinished = pushManager_DispatchThreadExceptionHandler0.manager.connectionsFinished;
      Thread thread1 = pushManager2.createDispatchThread();
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(mockThread0, throwable0);
      Throwable throwable1 = null;
      MockThrowable mockThrowable0 = new MockThrowable(throwable1);
      StackTraceElement[] stackTraceElementArray0 = mockThrowable0.getStackTrace();
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(thread1, mockThrowable0);
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager_DispatchThreadExceptionHandler0.manager.environment, pushManager_DispatchThreadExceptionHandler0.manager.sslContext, pushManager_DispatchThreadExceptionHandler0.manager.eventLoopGroup, pushManager2);
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.manager.handleConnectionFailure(apnsConnection0, throwable1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getSandboxEnvironment();
      String string0 = "8$G7j_C{&43'_`6h0";
      try { 
        SSLContext.getInstance(string0, string0);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      int int0 = (-2577);
      pushManager0.concurrentConnectionCount = int0;
      pushManager0.createAndStartDispatchThread();
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      NioEventLoopGroup nioEventLoopGroup0 = pushManager0.eventLoopGroup;
      int int0 = 0;
      int int1 = 0;
      int int2 = 3460;
      MockDate mockDate0 = new MockDate(int0, int1, int2, pushManager0.concurrentConnectionCount, pushManager0.unfinishedConnectionCount, int2);
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.unfinishedConnectionCount, nioEventLoopGroup0, pushManager0.listenerExecutorService, pushManager0.retryQueue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "Dispatch thread died unexpectedly. Please file a bug with the exception details.";
      int int0 = 0;
      String string1 = "";
      int int1 = (-1248);
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string1, int1);
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      SSLContext sSLContext0 = pushManager1.sslContext;
      int int2 = 0;
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int2, pushManager1.eventLoopGroup, pushManager1.listenerExecutorService, pushManager0.retryQueue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsEnvironment apnsEnvironment0 = pushManager0.environment;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      Throwable throwable0 = null;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      Vector<FailedConnectionListener<KnownBadPushNotification>> vector0 = new Vector<FailedConnectionListener<KnownBadPushNotification>>();
      pushManager0.failedConnectionListeners = vector0;
      pushManager0.start();
      long long0 = 3600L;
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      String string0 = null;
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0, throwable0);
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager<KnownBadPushNotification> pushManager1 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager1);
      pushManager1.unfinishedConnectionCount = pushManager0.unfinishedConnectionCount;
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, pushManager1.queue);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ReentrantLock reentrantLock0 = new ReentrantLock();
      pushManager0.connectionLock = reentrantLock0;
      long long0 = 1L;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }
}
