/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 20:35:09 GMT 2020
 */

package com.relayrides.pushy.apns;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.relayrides.pushy.apns.ApnsConnection;
import com.relayrides.pushy.apns.ApnsConnectionPool;
import com.relayrides.pushy.apns.ApnsEnvironment;
import com.relayrides.pushy.apns.ExpiredToken;
import com.relayrides.pushy.apns.FailedConnectionListener;
import com.relayrides.pushy.apns.FeedbackServiceClient;
import com.relayrides.pushy.apns.KnownBadPushNotification;
import com.relayrides.pushy.apns.PushManager;
import com.relayrides.pushy.apns.RejectedNotificationListener;
import com.relayrides.pushy.apns.RejectedNotificationReason;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFuture;
import io.netty.channel.DefaultChannelProgressivePromise;
import io.netty.channel.local.LocalChannel;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.util.concurrent.DefaultThreadFactory;
import io.netty.util.concurrent.ImmediateEventExecutor;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.channels.spi.SelectorProvider;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.SecureRandom;
import java.time.Instant;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLParameters;
import javax.net.ssl.SSLServerSocketFactory;
import javax.net.ssl.TrustManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PushManager_ESTest extends PushManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      MockThread mockThread0 = new MockThread();
      String string0 = null;
      MockThread.dumpStack();
      Throwable throwable0 = null;
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      long long0 = (-377L);
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom(long0);
      Provider provider0 = mockSecureRandom0.getProvider();
      // Undeclared exception!
      try { 
        SSLContext.getInstance(string0, provider0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.Provider$ServiceKey", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      String string0 = "io.netty.channel.ChannelMetadata";
      int int0 = (-5);
      int int1 = 0;
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string0, int1);
      SSLContext sSLContext0 = SSLContext.getDefault();
      int int2 = 0;
      NioEventLoopGroup nioEventLoopGroup0 = null;
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = null;
      PushManager<KnownBadPushNotification> pushManager0 = null;
      try {
        pushManager0 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int2, nioEventLoopGroup0, nioEventLoopGroup0, blockingQueue0);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      String string0 = "sun.nio.ch.SelectorImpl";
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      try { 
        SSLContext.getInstance(string0, (Provider) xMLDSigRI0);
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      int int0 = 1558;
      int int1 = 579;
      int int2 = (-1060);
      MockDate mockDate0 = new MockDate(pushManager0.unfinishedConnectionCount, int0, pushManager0.concurrentConnectionCount, int1, int2, int2);
      Instant instant0 = mockDate0.toInstant();
      int int3 = 16;
      int int4 = 0;
      int int5 = (-395);
      long long0 = MockDate.UTC(int3, int4, int5, pushManager0.concurrentConnectionCount, int1, int4);
      Object object0 = mockDate0.clone();
      pushManager0.waitForAllOperationsToFinish(mockDate0);
      NioEventLoopGroup nioEventLoopGroup0 = null;
      try {
        nioEventLoopGroup0 = new NioEventLoopGroup();
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      String string0 = "[id: 0x%08x, %s]";
      MockThread mockThread0 = new MockThread(threadGroup0, string0);
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      Throwable[] throwableArray0 = mockThrowable0.getSuppressed();
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.uncaughtException(mockThread0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>();
      Thread thread0 = null;
      String string0 = "io.netty.channel.rxtx.RxtxDeviceAddress";
      MockThrowable mockThrowable0 = new MockThrowable(string0);
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.uncaughtException(thread0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager$DispatchThreadExceptionHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      long long0 = (-1430L);
      // Undeclared exception!
      try { 
        pushManager0.shutdown(long0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "complete already";
      int int0 = 1523;
      String string1 = "";
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string1, int0);
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      SSLContext sSLContext0 = pushManager0.sslContext;
      int int1 = (-2250);
      PushManager<KnownBadPushNotification> pushManager1 = null;
      try {
        pushManager1 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, sSLContext0, int1, pushManager0.eventLoopGroup, pushManager0.eventLoopGroup, pushManager0.retryQueue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.createAndStartDispatchThread();
      pushManager0.start();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.SHUTDOWN;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens();
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      long long0 = (-524L);
      Condition condition0 = pushManager0.connectionLock.newCondition();
      pushManager0.connectionsFinished = condition0;
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        pushManager0.getExpiredTokens(long0, timeUnit0);
      } catch(IllegalStateException e) {
         //
         // Push manager has not been started yet.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      pushManager1.start();
      boolean boolean0 = pushManager0.isShutDown();
      String string0 = null;
      // Undeclared exception!
      try { 
        SSLContext.getInstance(string0, string0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      SSLContext sSLContext0 = SSLContext.getDefault();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, sSLContext0, pushManager_DispatchThreadExceptionHandler0.manager.eventLoopGroup, pushManager1);
      // Undeclared exception!
      try { 
        pushManager_DispatchThreadExceptionHandler0.manager.handleConnectionSuccess(apnsConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      Collection<KnownBadPushNotification> collection0 = null;
      // Undeclared exception!
      try { 
        pushManager0.handleUnprocessedNotifications(apnsConnection0, collection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = true;
      pushManager0.shouldShutDownListenerExecutorService = boolean0;
      ApnsEnvironment apnsEnvironment0 = ApnsEnvironment.getProductionEnvironment();
      ApnsEnvironment apnsEnvironment1 = ApnsEnvironment.getSandboxEnvironment();
      ApnsEnvironment apnsEnvironment2 = ApnsEnvironment.getSandboxEnvironment();
      ApnsEnvironment apnsEnvironment3 = ApnsEnvironment.getProductionEnvironment();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      apnsConnection0.shutdownGracefully();
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionSuccess(apnsConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      boolean boolean0 = pushManager0.isStarted();
      boolean boolean1 = pushManager0.isShutDown();
      boolean boolean2 = pushManager0.isShutDown();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      String string0 = "com.relayrides.pushy.apns.PushManager$4";
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string0, throwable0);
      pushManager_DispatchThreadExceptionHandler0.uncaughtException(pushManager0.dispatchThread, mockThrowable0);
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      // Undeclared exception!
      try { 
        pushManager0.handleConnectionFailure(apnsConnection0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterRejectedNotificationListener(rejectedNotificationListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      ApnsEnvironment apnsEnvironment0 = pushManager1.environment;
      PushManager<KnownBadPushNotification> pushManager2 = null;
      try {
        pushManager2 = new PushManager<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.unfinishedConnectionCount, pushManager0.eventLoopGroup, pushManager1.eventLoopGroup, pushManager1.queue);
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class io.netty.util.concurrent.DefaultPromise
         //
         verifyException("io.netty.util.concurrent.MultithreadEventExecutorGroup", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager1.unregisterRejectedNotificationListener(rejectedNotificationListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
      } catch(IllegalStateException e) {
         //
         // Push manager has not yet been started and cannot be shut down.
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ReentrantLock reentrantLock0 = pushManager0.connectionLock;
      pushManager0.connectionLock = reentrantLock0;
      Thread thread0 = pushManager0.createDispatchThread();
      boolean boolean0 = pushManager0.isStarted();
      SSLContext sSLContext0 = SSLContext.getDefault();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, sSLContext0, pushManager0.eventLoopGroup, pushManager0);
      boolean boolean1 = true;
      pushManager0.shutDownFinished = boolean1;
      boolean boolean2 = reentrantLock0.isHeldByCurrentThread();
      apnsConnection0.waitForPendingOperationsToFinish();
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.MISSING_PAYLOAD;
      String string0 = "io.netty.channel.VoidChannelPromise";
      String string1 = "com.relayrides.pushy.apns.PushManager$4";
      try { 
        SSLContext.getInstance(string0, string1);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      RejectedNotificationListener<KnownBadPushNotification> rejectedNotificationListener0 = (RejectedNotificationListener<KnownBadPushNotification>) mock(RejectedNotificationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.registerRejectedNotificationListener(rejectedNotificationListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      int int0 = (-1656);
      pushManager0.concurrentConnectionCount = int0;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      apnsConnection0.shutdownGracefully();
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.SHUTDOWN;
      int int0 = (-1);
      pushManager0.unfinishedConnectionCount = int0;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      pushManager0.start();
      boolean boolean0 = true;
      boolean boolean1 = false;
      pushManager0.shutDown = boolean1;
      // Undeclared exception!
      try { 
        pushManager0.shutdown();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FeedbackServiceClient feedbackServiceClient0 = pushManager0.feedbackServiceClient;
      boolean boolean0 = true;
      ReentrantLock reentrantLock0 = new ReentrantLock(boolean0);
      pushManager0.connectionLock = reentrantLock0;
      pushManager0.feedbackServiceClient = feedbackServiceClient0;
      BlockingQueue<KnownBadPushNotification> blockingQueue0 = pushManager0.getQueue();
      String string0 = "Push manager has not yet been started and cannot be shut down.";
      try { 
        SSLContext.getInstance(string0, string0);
      } catch(NoSuchProviderException e) {
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification> pushManager_DispatchThreadExceptionHandler0 = new PushManager.DispatchThreadExceptionHandler<KnownBadPushNotification>(pushManager0);
      PushManager<KnownBadPushNotification> pushManager1 = pushManager_DispatchThreadExceptionHandler0.manager;
      pushManager_DispatchThreadExceptionHandler0.manager = pushManager0;
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(pushManager0.environment, pushManager0.sslContext, pushManager1.eventLoopGroup, pushManager1);
      boolean boolean0 = true;
      pushManager0.connectionsFinished = pushManager1.connectionsFinished;
      apnsConnection0.shutdownGracefully();
      pushManager0.started = boolean0;
      // Undeclared exception!
      try { 
        pushManager1.handleConnectionClosure(apnsConnection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = null;
      // Undeclared exception!
      try { 
        pushManager0.registerFailedConnectionListener(failedConnectionListener0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      Vector<FailedConnectionListener<KnownBadPushNotification>> vector0 = new Vector<FailedConnectionListener<KnownBadPushNotification>>();
      pushManager0.failedConnectionListeners = vector0;
      FailedConnectionListener<KnownBadPushNotification> failedConnectionListener0 = (FailedConnectionListener<KnownBadPushNotification>) mock(FailedConnectionListener.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = pushManager0.unregisterFailedConnectionListener(failedConnectionListener0);
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = null;
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      RejectedNotificationReason rejectedNotificationReason0 = RejectedNotificationReason.INVALID_PAYLOAD_SIZE;
      // Undeclared exception!
      try { 
        pushManager0.handleRejectedNotification(apnsConnection0, knownBadPushNotification0, rejectedNotificationReason0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      PushManager<KnownBadPushNotification> pushManager0 = new PushManager<KnownBadPushNotification>();
      Condition condition0 = pushManager0.connectionLock.newCondition();
      pushManager0.connectionsFinished = condition0;
      String string0 = "";
      int int0 = 132;
      String string1 = null;
      int int1 = (-2803);
      ApnsEnvironment apnsEnvironment0 = new ApnsEnvironment(string0, int0, string1, int1);
      ApnsEnvironment apnsEnvironment1 = ApnsEnvironment.getProductionEnvironment();
      ApnsConnection<KnownBadPushNotification> apnsConnection0 = new ApnsConnection<KnownBadPushNotification>(apnsEnvironment0, pushManager0.sslContext, pushManager0.eventLoopGroup, pushManager0);
      KnownBadPushNotification knownBadPushNotification0 = new KnownBadPushNotification();
      Throwable throwable0 = null;
      MockThrowable mockThrowable0 = new MockThrowable(string1, throwable0);
      // Undeclared exception!
      try { 
        pushManager0.handleWriteFailure(apnsConnection0, knownBadPushNotification0, mockThrowable0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.relayrides.pushy.apns.PushManager", e);
      }
  }
}
