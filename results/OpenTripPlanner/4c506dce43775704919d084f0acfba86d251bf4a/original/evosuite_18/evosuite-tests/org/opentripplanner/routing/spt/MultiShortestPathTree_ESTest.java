/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:11:50 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.AgencyAndId;
import org.onebusaway.gtfs.model.Stop;
import org.opentripplanner.api.parameter.QualifiedMode;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RouteMatcher;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.StationStopEdge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.request.BannedStopSet;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.TransitStation;
import org.opentripplanner.routing.vertextype.TransitStop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      RoutingRequest routingRequest2 = routingRequest1.clone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      int int0 = multiShortestPathTree0.getVertexCount();
      ObjectInputStream objectInputStream0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.BASIC;
      Stop stop0 = new Stop();
      Stop stop1 = new Stop(stop0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      double double0 = 3389.48427824;
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRANSIT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-6);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-77);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-33);
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(enumSet0);
      traverseModeSet1.setCustomMotorVehicle(boolean0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      boolean boolean1 = false;
      traverseModeSet0.setBus(boolean1);
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      TraverseModeSet traverseModeSet2 = TraverseModeSet.allModes();
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      boolean boolean3 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean4 = multiShortestPathTree0.add(state0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(enumSet0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      TraverseModeSet traverseModeSet2 = TraverseModeSet.allModes();
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      long long0 = 0L;
      TraverseModeSet traverseModeSet3 = TraverseModeSet.allModes();
      System.setCurrentTimeMillis(long0);
      boolean boolean2 = multiShortestPathTree0.visit(state0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[18];
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.GONDOLA;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.SUBWAY;
      traverseModeArray0[2] = traverseMode2;
      TraverseModeSet traverseModeSet0 = null;
      try {
        traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.TraverseModeSet", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = null;
      ArrayList<Set<QualifiedMode>> arrayList0 = new ArrayList<Set<QualifiedMode>>();
      Vertex vertex0 = null;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      RoutingRequest routingRequest1 = new RoutingRequest(routingRequest0.modes, routingRequest0.optimize);
      routingRequest1.setUnpreferredAgencies(routingRequest0.routerId);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      boolean boolean1 = true;
      routingRequest0.reverseOptimizeOnTheFly = boolean1;
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      long long0 = (-3227L);
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      state0.weight = (double) routingRequest0.MIN_SIMILARITY;
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      State state1 = multiShortestPathTree0.getState(vertex0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      int int0 = 1;
      routingRequest0.bikeRentalPickupCost = int0;
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      state0.weight = (double) routingRequest0.MIN_SIMILARITY;
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      State state1 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      System.setCurrentTimeMillis(routingRequest0.boardSlack);
      Graph graph0 = new Graph();
      Vertex vertex0 = graph0.getVertexById(routingRequest0.carDropoffTime);
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.useBikeRentalAvailabilityInformation);
      int int0 = graph0.removeEdgelessVertices();
      Stop stop0 = null;
      Stop stop1 = null;
      try {
        stop1 = new Stop(stop0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.onebusaway.gtfs.model.Stop", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      String string0 = "bT4lc\\k%Hj3XD[M";
      double double0 = 0.0;
      double double1 = 3980.800795625;
      String string1 = null;
      ParkAndRideVertex parkAndRideVertex0 = new ParkAndRideVertex(graph0, string0, routingRequest0.routerId, double0, double1, string1);
      State state0 = multiShortestPathTree0.getState(parkAndRideVertex0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      Class<TraverseMode> class0 = TraverseMode.class;
      EnumSet<TraverseMode> enumSet0 = EnumSet.noneOf(class0);
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = null;
      boolean boolean0 = false;
      routingRequest0.walkingBike = boolean0;
      String string0 = "Asia/Kolkata";
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, routingRequest0.waitAtBeginningFactor, routingRequest0.preTransitPenalty);
      intersectionVertex0.freeFlowing = routingRequest0.walkingBike;
      State state0 = multiShortestPathTree0.getState(intersectionVertex0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      String string0 = "";
      double double0 = (-1101.50808640057);
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest0.elevatorBoardTime, double0);
      List<State> list0 = multiShortestPathTree0.getStates(onboardDepartVertex0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      RouteMatcher routeMatcher0 = routingRequest0.bannedRoutes;
      HashMap<AgencyAndId, BannedStopSet> hashMap0 = routingRequest0.bannedTrips;
      routingRequest0.bannedTrips = hashMap0;
      routingRequest0.bannedRoutes = routeMatcher0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Function<Object, BannedStopSet> function0 = (Function<Object, BannedStopSet>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      BannedStopSet bannedStopSet0 = hashMap0.computeIfAbsent(routingRequest0.startingTransitStopId, function0);
      String string0 = null;
      HashSet<String> hashSet0 = new HashSet<String>();
      routingRequest0.preferredAgencies = hashSet0;
      routingRequest0.setBannedRoutes(string0);
      boolean boolean0 = false;
      routingRequest0.kissAndRide = boolean0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      TraverseMode traverseMode1 = TraverseMode.WALK;
      double double0 = routingRequest0.getSpeed(traverseMode1);
      TraverseModeSet traverseModeSet0 = routingRequest0.modes.clone();
      routingRequest0.modes = traverseModeSet0;
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      routingRequest1.setBannedRoutes(routingRequest0.routerId);
      routingRequest1.bikeWalkingOptions = routingRequest0;
      TraverseModeSet traverseModeSet1 = TraverseModeSet.allModes();
      int int0 = 0;
      routingRequest1.transferPenalty = int0;
      routingRequest1.setMode(traverseMode1);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      traverseModeSet0.setMode(traverseMode0, routingRequest0.softWalkLimiting);
      State state0 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(enumSet0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(enumSet0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      boolean boolean0 = false;
      traverseModeSet0.setBus(boolean0);
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      TraverseModeSet traverseModeSet2 = TraverseModeSet.allModes();
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      boolean boolean2 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean3 = multiShortestPathTree0.add(state0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      EnumSet<TraverseMode> enumSet0 = EnumSet.copyOf((Collection<TraverseMode>) list0);
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(enumSet0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      EnumSet<TraverseMode> enumSet1 = EnumSet.copyOf(enumSet0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      TraverseModeSet traverseModeSet2 = TraverseModeSet.allModes();
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      boolean boolean2 = multiShortestPathTree0.visit(state0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }
}
