/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:09:18 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.StopTime;
import org.onebusaway.gtfs.model.Trip;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.graph_builder.annotation.TripDegenerate;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.alertpatch.AlertPatch;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RouteMatcher;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.StateData;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.LegSwitchingEdge;
import org.opentripplanner.routing.edgetype.PreAlightEdge;
import org.opentripplanner.routing.edgetype.PreBoardEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.TimedTransferEdge;
import org.opentripplanner.routing.edgetype.TransitBoardAlight;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.services.StreetVertexIndexService;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopArrive;
import org.opentripplanner.routing.vertextype.TransitStopDepart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[6];
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.GONDOLA;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.WALK;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.BUS;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.BUSISH;
      traverseModeArray0[4] = traverseMode4;
      TraverseMode traverseMode5 = TraverseMode.LEG_SWITCH;
      traverseModeArray0[5] = traverseMode5;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      RoutingRequest routingRequest2 = routingRequest1.reversedClone();
      RoutingRequest routingRequest3 = routingRequest2.clone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest3);
      String string0 = "GQKKb_(2.jr|{pk";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, routingRequest3.carAccelerationSpeed, routingRequest0.walkBoardCost);
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(onboardDepartVertex0, onboardDepartVertex0);
      onboardDepartVertex0.addOutgoing(timedTransferEdge0);
      double double0 = 1309.9349;
      int int0 = 2776;
      SimpleEdge simpleEdge0 = new SimpleEdge(onboardDepartVertex0, onboardDepartVertex0, double0, int0);
      State state0 = new State(onboardDepartVertex0, simpleEdge0, routingRequest0.maxPreTransitTime, multiShortestPathTree0.options);
      State state1 = simpleEdge0.traverse(state0);
      boolean boolean0 = multiShortestPathTree0.add(state1);
      boolean boolean1 = MultiShortestPathTree.dominates(state1, state0);
      boolean boolean2 = MultiShortestPathTree.dominates(state1, state1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      double double0 = 2580.2557237;
      routingRequest0.carAccelerationSpeed = double0;
      String string0 = " vertices)";
      routingRequest0.setUnpreferredAgencies(string0);
      double double1 = 1.02;
      RouteMatcher routeMatcher0 = routingRequest0.bannedRoutes;
      routingRequest0.unpreferredRoutes = routeMatcher0;
      int int0 = 0;
      routingRequest0.bikeSwitchCost = int0;
      routingRequest0.carDecelerationSpeed = double1;
      String string1 = "";
      routingRequest0.setUnpreferredRoutes(string1);
      RouteMatcher routeMatcher1 = RouteMatcher.emptyMatcher();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string2 = multiShortestPathTree0.toString();
      int int1 = multiShortestPathTree0.getVertexCount();
      ObjectInputStream objectInputStream0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.FULL;
      DefaultStreetVertexIndexFactory defaultStreetVertexIndexFactory0 = new DefaultStreetVertexIndexFactory();
      // Undeclared exception!
      try { 
        Graph.load(objectInputStream0, graph_LoadLevel0, (StreetVertexIndexFactory) defaultStreetVertexIndexFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      TransitStop transitStop0 = null;
      Graph graph0 = new Graph();
      Graph graph1 = new Graph(graph0);
      Stop stop0 = new Stop();
      TransitStopDepart transitStopDepart0 = null;
      try {
        transitStopDepart0 = new TransitStopDepart(graph1, stop0, transitStop0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.gtfs.GtfsLibrary", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.clone();
      routingRequest1.batch = routingRequest0.ignoreRealtimeUpdates;
      boolean boolean0 = true;
      String string0 = routingRequest0.getUnpreferredAgenciesStr();
      String string1 = routingRequest1.getBannedStopsHardStr();
      int int0 = 129;
      routingRequest0.numItineraries = int0;
      routingRequest1.showIntermediateStops = boolean0;
      routingRequest0.walkReluctance = (double) routingRequest1.bikeSwitchCost;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = null;
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      double double0 = 0.0;
      ElevatorOffboardVertex elevatorOffboardVertex0 = new ElevatorOffboardVertex(graph0, string0, routingRequest1.heuristicWeight, double0, routingRequest1.routerId);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, elevatorOffboardVertex0);
      Vertex vertex0 = streetBikeRentalLink0.getFromVertex();
      boolean boolean1 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean1);
      String string2 = multiShortestPathTree0.toString();
      String string3 = multiShortestPathTree0.toString();
      String string4 = multiShortestPathTree0.toString();
      State state0 = new State(bikeRentalStationVertex0, streetBikeRentalLink0, routingRequest1.dateTime, routingRequest1);
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.clone();
      routingRequest1.batch = routingRequest0.ignoreRealtimeUpdates;
      boolean boolean0 = true;
      String string0 = routingRequest0.getUnpreferredAgenciesStr();
      String string1 = routingRequest1.getBannedStopsHardStr();
      int int0 = 129;
      routingRequest0.numItineraries = int0;
      routingRequest1.showIntermediateStops = boolean0;
      routingRequest0.walkReluctance = (double) routingRequest1.bikeSwitchCost;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = null;
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      double double0 = 0.0;
      ElevatorOffboardVertex elevatorOffboardVertex0 = new ElevatorOffboardVertex(graph0, string0, routingRequest1.heuristicWeight, double0, routingRequest1.routerId);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, elevatorOffboardVertex0);
      Vertex vertex0 = streetBikeRentalLink0.getFromVertex();
      boolean boolean1 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean1);
      String string2 = multiShortestPathTree0.toString();
      String string3 = multiShortestPathTree0.toString();
      String string4 = multiShortestPathTree0.toString();
      State state0 = new State(bikeRentalStationVertex0, streetBikeRentalLink0, routingRequest1.dateTime, routingRequest1);
      bikeRentalStationVertex0.setId(routingRequest1.routerId);
      StateData stateData0 = state0.stateData;
      state0.stateData = stateData0;
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      routingRequest1.setModes(routingRequest0.modes);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      long long0 = 3337L;
      routingRequest1.worstTime = long0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      String string0 = routingRequest1.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      String string0 = "MultiSPT(";
      routingRequest0.setPreferredAgencies(string0);
      int int0 = 0;
      routingRequest0.setWalkBoardCost(int0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      routingRequest0.setMaxWalkDistance(routingRequest1.waitAtBeginningFactor);
      RoutingRequest routingRequest2 = routingRequest1.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      routingRequest1.from = routingRequest2.to;
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      long long0 = (-1694L);
      boolean boolean0 = false;
      routingRequest2.kissAndRide = boolean0;
      routingRequest1.worstTime = long0;
      State state0 = null;
      routingRequest2.setWheelchairAccessible(routingRequest0.driveOnRight);
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.clone();
      routingRequest1.batch = routingRequest0.ignoreRealtimeUpdates;
      boolean boolean0 = true;
      String string0 = routingRequest1.getUnpreferredAgenciesStr();
      String string1 = routingRequest1.getBannedStopsHardStr();
      int int0 = 135;
      routingRequest0.numItineraries = int0;
      routingRequest1.showIntermediateStops = routingRequest1.walkingBike;
      routingRequest0.walkReluctance = (double) routingRequest1.bikeSwitchCost;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = null;
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      double double0 = 0.0;
      ElevatorOffboardVertex elevatorOffboardVertex0 = new ElevatorOffboardVertex(graph0, string0, routingRequest1.heuristicWeight, double0, routingRequest1.routerId);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, elevatorOffboardVertex0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Vertex vertex0 = streetBikeRentalLink0.getFromVertex();
      boolean boolean2 = true;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean2);
      String string2 = multiShortestPathTree0.toString();
      String string3 = multiShortestPathTree0.toString();
      String string4 = multiShortestPathTree0.toString();
      State state0 = new State(bikeRentalStationVertex0, streetBikeRentalLink0, routingRequest1.dateTime, routingRequest1);
      boolean boolean3 = multiShortestPathTree0.add(state0);
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      long long0 = (-3958705157555305932L);
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      System.setCurrentTimeMillis(long0);
      long long1 = 0L;
      System.setCurrentTimeMillis(long1);
  }
}
