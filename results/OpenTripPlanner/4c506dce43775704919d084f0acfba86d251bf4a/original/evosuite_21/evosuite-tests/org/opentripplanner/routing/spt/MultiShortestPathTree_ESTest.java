/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:27:42 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.impl.calendar.CalendarServiceImpl;
import org.onebusaway.gtfs.model.StopTime;
import org.onebusaway.gtfs.model.Trip;
import org.opentripplanner.api.resource.GraphMetadata;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.ServiceDay;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.OnBoardDepartPatternHop;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.trippattern.TripTimes;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      routingRequest0.waitAtBeginningFactor = (double) routingRequest0.elevatorHopTime;
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      State state0 = new State(vertex0, routingRequest0.bikeRentalDropoffCost, multiShortestPathTree0.options);
      boolean boolean2 = multiShortestPathTree0.add(state0);
      String string2 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      double double0 = (-1.0);
      state0.weight = double0;
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string3 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string3, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      boolean boolean3 = multiShortestPathTree0.visit(state0);
      long long0 = 592L;
      boolean boolean4 = multiShortestPathTree0.add(state0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      TripTimes tripTimes0 = state0.getTripTimes();
      State state1 = new State(vertex0, routingRequest0);
      boolean boolean5 = multiShortestPathTree0.visit(state1);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      GraphMetadata graphMetadata0 = graph0.getMetadata();
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      routingRequest0.setOptimize(optimizeType0);
      String string0 = " vertices)";
      double double0 = 2047.0;
      String string1 = "3M${69i";
      Properties properties0 = graph0.embeddedPreferences;
      graph0.embeddedPreferences = properties0;
      ElevatorOffboardVertex elevatorOffboardVertex0 = new ElevatorOffboardVertex(graph0, string0, double0, routingRequest0.triangleSafetyFactor, string1);
      elevatorOffboardVertex0.removeAllEdges();
      State state0 = multiShortestPathTree0.getState(elevatorOffboardVertex0);
      int int0 = multiShortestPathTree0.getVertexCount();
      State state1 = multiShortestPathTree0.getState(elevatorOffboardVertex0);
      State state2 = multiShortestPathTree0.getState(elevatorOffboardVertex0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string1 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      String string2 = "cVty-bkes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string2, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      int int0 = 0;
      routingRequest0.useUnpreferredRoutesPenalty = int0;
      Vector<StopTime> vector0 = new Vector<StopTime>();
      String string3 = ">iT2%R4u&<bQ8Um{C";
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      int int1 = (-1063);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      State state0 = new State(vertex0, routingRequest0.elevatorHopCost, multiShortestPathTree0.options);
      boolean boolean2 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string2 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      String string3 = "city-bikes";
      PatternStopVertex patternStopVertex0 = null;
      boolean boolean3 = multiShortestPathTree0.visit(state0);
      boolean boolean4 = multiShortestPathTree0.add(state0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      TraverseMode traverseMode0 = TraverseMode.BUS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      File file0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.BASIC;
      // Undeclared exception!
      try { 
        Graph.load(file0, graph_LoadLevel0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.clone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[9];
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.FUNICULAR;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.CABLE_CAR;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.RAIL;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.TRANSIT;
      traverseModeArray0[4] = traverseMode4;
      TraverseMode traverseMode5 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[5] = traverseMode5;
      TraverseMode traverseMode6 = TraverseMode.SUBWAY;
      traverseModeArray0[6] = traverseMode6;
      TraverseMode traverseMode7 = TraverseMode.TRAINISH;
      traverseModeArray0[7] = traverseMode7;
      TraverseMode traverseMode8 = TraverseMode.GONDOLA;
      traverseModeArray0[8] = traverseMode8;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      TraverseModeSet traverseModeSet1 = traverseModeSet0.clone();
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      boolean boolean0 = false;
      traverseModeSet1.setBus(boolean0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.GONDOLA;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      RoutingRequest routingRequest2 = routingRequest1.clone();
      RoutingRequest routingRequest3 = routingRequest2.reversedClone();
      routingRequest3.bikeRentalDropoffTime = routingRequest2.bikeRentalDropoffTime;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest3);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[0];
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      long long0 = (-527L);
      routingRequest0.dateTime = long0;
      TraverseModeSet traverseModeSet1 = TraverseModeSet.allModes();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      routingRequest0.stairsReluctance = (double) long0;
      State state0 = null;
      traverseModeSet0.setSubway(routingRequest0.useBikeRentalAvailabilityInformation);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string1 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string2 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string2, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      PatternStopVertex patternStopVertex0 = null;
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      TripTimes tripTimes0 = null;
      try {
        tripTimes0 = new TripTimes(trip1, vector0, graph0.deduplicator);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string1 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string2 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string2, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      PatternStopVertex patternStopVertex0 = null;
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      boolean boolean2 = multiShortestPathTree0.visit(state0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      TripTimes tripTimes0 = null;
      try {
        tripTimes0 = new TripTimes(trip1, vector0, graph0.deduplicator);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string1 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string1, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      PatternStopVertex patternStopVertex0 = null;
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      CalendarServiceImpl calendarServiceImpl0 = new CalendarServiceImpl();
      String string2 = ">iT2%R4u&<bQ8Um{C";
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean2 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string2 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string3 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string3, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      PatternStopVertex patternStopVertex0 = null;
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      boolean boolean3 = multiShortestPathTree0.visit(state0);
      long long1 = 605L;
      System.setCurrentTimeMillis(long1);
      boolean boolean4 = multiShortestPathTree0.add(state0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      TripTimes tripTimes0 = null;
      try {
        tripTimes0 = new TripTimes(trip1, vector0, graph0.deduplicator);
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string2 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string3 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string3, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      PatternStopVertex patternStopVertex0 = null;
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = new LinkedList<State>();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      Vertex vertex0 = graph0.getVertex(routingRequest0.routerId);
      long long0 = 7L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string0 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string1 = "cVty-bkes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string1, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      int int0 = 0;
      routingRequest0.useUnpreferredRoutesPenalty = int0;
      PatternStopVertex patternStopVertex0 = null;
      Vector<StopTime> vector0 = new Vector<StopTime>();
      CalendarServiceImpl calendarServiceImpl0 = new CalendarServiceImpl();
      String string2 = ">iT2%R4u&<bQ8Um{C";
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      int int1 = (-1063);
      State state1 = multiShortestPathTree0.getState(vertex0);
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      double double0 = (-2092.04);
      routingRequest0.waitAtBeginningFactor = double0;
      String string0 = "*mKO7 b2y";
      Vertex vertex0 = graph0.getVertex(string0);
      long long0 = 2064L;
      State state0 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string1 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      boolean boolean1 = true;
      routingRequest0.kissAndRide = boolean1;
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string2 = "cVty-bkes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string2, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      int int0 = 0;
      routingRequest0.useUnpreferredRoutesPenalty = int0;
      PatternStopVertex patternStopVertex0 = null;
      Vector<StopTime> vector0 = new Vector<StopTime>();
      CalendarServiceImpl calendarServiceImpl0 = new CalendarServiceImpl();
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      int int1 = (-1063);
      State state1 = multiShortestPathTree0.getState(vertex0);
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      routingRequest0.waitAtBeginningFactor = (double) routingRequest0.elevatorHopTime;
      String string0 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph0.getVertex(string0);
      State state0 = new State(vertex0, routingRequest0.bikeRentalDropoffCost, multiShortestPathTree0.options);
      boolean boolean2 = multiShortestPathTree0.add(state0);
      String string2 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      double double0 = (-1.0);
      state0.weight = double0;
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string3 = "city-bikes";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string3, routingRequest0.triangleSafetyFactor, routingRequest0.carSpeed);
      Trip trip0 = new Trip();
      Trip trip1 = new Trip(trip0);
      boolean boolean3 = multiShortestPathTree0.visit(state0);
      long long0 = 592L;
      System.setCurrentTimeMillis(long0);
      boolean boolean4 = multiShortestPathTree0.add(state0);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      TripTimes tripTimes0 = state0.getTripTimes();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      String string0 = "%\"5fuLlLDDD";
      double double0 = (-1.0);
      String string1 = "";
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, routingRequest0.carAccelerationSpeed, double0, string1);
      State state0 = multiShortestPathTree0.getState(intersectionVertex0);
      Graph graph1 = new Graph();
      double double1 = (-2091.4494868114684);
      String string2 = "*mKO7 b2y";
      EvoSuiteFile evoSuiteFile0 = null;
      String string3 = ";{t,B9vu";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, routingRequest0.routerId);
      Vertex vertex0 = graph1.getVertex(string2);
      long long0 = 7L;
      State state1 = new State(vertex0, long0, multiShortestPathTree0.options);
      boolean boolean2 = multiShortestPathTree0.add(state1);
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string4 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      String string5 = "city-bikes";
      PatternStopVertex patternStopVertex0 = null;
      boolean boolean3 = multiShortestPathTree0.visit(state1);
      boolean boolean4 = multiShortestPathTree0.add(state1);
      Vector<StopTime> vector0 = new Vector<StopTime>();
      State state2 = new State(vertex0, state1.backEdge, routingRequest0.bikeRentalPickupTime, routingRequest0);
      boolean boolean5 = multiShortestPathTree0.visit(state2);
  }
}
