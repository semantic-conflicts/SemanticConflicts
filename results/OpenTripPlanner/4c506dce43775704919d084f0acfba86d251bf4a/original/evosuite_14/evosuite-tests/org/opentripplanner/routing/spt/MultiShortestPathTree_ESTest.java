/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:53:29 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.opentripplanner.common.model.NamedPlace;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Vertex vertex0 = null;
      State state0 = null;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      PriorityQueue<State> priorityQueue0 = new PriorityQueue<State>();
      String string0 = multiShortestPathTree0.toString();
      boolean boolean1 = multiShortestPathTree0.add(state0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Graph graph0 = new Graph();
      double double0 = 443.21;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.stairsReluctance, graph0.routerId);
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(intersectionVertex0, bikeRentalStationVertex0);
      intersectionVertex0.trafficLight = routingRequest0.reverseOptimizing;
      State state0 = new State(intersectionVertex0, streetBikeRentalLink0, routingRequest0.maxPreTransitTime, routingRequest0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      graph0.removeTemporaryEdge(streetBikeRentalLink0);
      int int0 = multiShortestPathTree0.getVertexCount();
      routingRequest0.bikeRentalDropoffTime = int0;
      state0.weight = routingRequest0.carDecelerationSpeed;
      List<State> list0 = multiShortestPathTree0.getStates(bikeRentalStationVertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      List<State> list1 = multiShortestPathTree0.getStates(bikeRentalStationVertex0);
      bikeRentalStationVertex0.setBikesAvailable(routingRequest0.elevatorBoardTime);
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      bikeRentalStation0.spacesAvailable = routingRequest0.bikeSwitchTime;
      boolean boolean3 = multiShortestPathTree0.add(state0);
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      List<State> list2 = multiShortestPathTree0.getStates(intersectionVertex0);
      boolean boolean5 = multiShortestPathTree0.add(state0);
      boolean boolean6 = multiShortestPathTree0.add(state0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      int int0 = (-2060);
      routingRequest0.bikeBoardCost = int0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getPaths();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.AbstractShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      int int0 = 1;
      routingRequest0.boardSlack = int0;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.reverseOptimizing);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      String string0 = multiShortestPathTree0.toString();
      String string1 = routingRequest0.getBannedRouteStr();
      int int1 = multiShortestPathTree0.getVertexCount();
      Set<Vertex> set1 = multiShortestPathTree0.getVertices();
      List<State> list1 = multiShortestPathTree0.getStates(vertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      double double0 = (-1540.0);
      String string2 = "";
      TransitStopStreetVertex transitStopStreetVertex0 = null;
      try {
        transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, bikeRentalStation0.id, double0, bikeRentalStation0.y, string0, string2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      String string0 = routingRequest0.getPreferredRouteStr();
      boolean boolean0 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = multiShortestPathTree0.visit(state0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest1);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      int int0 = (-2060);
      routingRequest0.bikeBoardCost = int0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      routingRequest0.clampInitialWait = (long) routingRequest1.transferSlack;
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      State state0 = null;
      String string0 = multiShortestPathTree0.toString();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      boolean boolean0 = false;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, boolean0);
      State state0 = multiShortestPathTree0.getState(vertex0);
      boolean boolean1 = false;
      routingRequest0.wheelchairAccessible = boolean1;
      String string0 = routingRequest0.getUnpreferredAgenciesStr();
      int int0 = multiShortestPathTree0.getVertexCount();
      NamedPlace namedPlace0 = routingRequest0.getFromPlace();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest1);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = multiShortestPathTree0.visit(state0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = new PriorityQueue<State>();
      boolean boolean1 = multiShortestPathTree0.add(state0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Graph graph0 = new Graph();
      double double0 = 443.21;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, routingRequest0.routerId, double0, routingRequest0.stairsReluctance, graph0.routerId);
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(intersectionVertex0, bikeRentalStationVertex0);
      intersectionVertex0.trafficLight = routingRequest0.reverseOptimizing;
      State state0 = new State(intersectionVertex0, streetBikeRentalLink0, routingRequest0.maxPreTransitTime, routingRequest0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      graph0.removeTemporaryEdge(streetBikeRentalLink0);
      int int0 = multiShortestPathTree0.getVertexCount();
      routingRequest0.bikeRentalDropoffTime = int0;
      List<State> list0 = multiShortestPathTree0.getStates(bikeRentalStationVertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      List<State> list1 = multiShortestPathTree0.getStates(bikeRentalStationVertex0);
      bikeRentalStationVertex0.setBikesAvailable(routingRequest0.elevatorBoardTime);
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = MultiShortestPathTree.dominates(state0, state0);
      bikeRentalStation0.spacesAvailable = routingRequest0.bikeSwitchTime;
      boolean boolean3 = multiShortestPathTree0.add(state0);
      boolean boolean4 = multiShortestPathTree0.visit(state0);
      List<State> list2 = multiShortestPathTree0.getStates(intersectionVertex0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest1);
      boolean boolean0 = true;
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, boolean0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean2 = multiShortestPathTree0.visit(state0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = new State(vertex0, routingRequest0);
      boolean boolean0 = multiShortestPathTree0.add(state0);
      PriorityQueue<State> priorityQueue0 = new PriorityQueue<State>();
      boolean boolean1 = multiShortestPathTree0.add(state0);
      RoutingRequest routingRequest1 = multiShortestPathTree0.options.reversedClone();
      State state1 = new State(vertex0, routingRequest1);
      state1.dumpPath();
      boolean boolean2 = multiShortestPathTree0.add(state1);
  }
}
