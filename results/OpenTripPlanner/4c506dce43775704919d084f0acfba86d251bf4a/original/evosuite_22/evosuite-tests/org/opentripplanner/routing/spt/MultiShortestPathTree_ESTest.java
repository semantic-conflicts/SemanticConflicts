/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 14:30:26 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.impl.PackedCoordinateSequence;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.ObjectInputStream;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.impl.GtfsRelationalDaoImpl;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.Transfer;
import org.opentripplanner.api.parameter.QualifiedModeSetSequence;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ParkAndRideEdge;
import org.opentripplanner.routing.edgetype.PatternInterlineDwell;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.TransitStation;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      int int0 = 375;
      routingRequest0.transferPenalty = int0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      TraverseModeSet traverseModeSet0 = routingRequest0.modes.clone();
      routingRequest0.setModes(traverseModeSet0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      String string0 = multiShortestPathTree0.toString();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      boolean boolean0 = true;
      routingRequest0.bikeParkAndRide = boolean0;
      int int1 = multiShortestPathTree0.getVertexCount();
      routingRequest0.bikeWalkingOptions = multiShortestPathTree0.options;
      int int2 = multiShortestPathTree0.getVertexCount();
      String string1 = multiShortestPathTree0.toString();
      String string2 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      boolean boolean0 = false;
      routingRequest0.allowBikeRental = boolean0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUS;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.clone();
      boolean boolean0 = false;
      routingRequest1.useBikeRentalAvailabilityInformation = boolean0;
      routingRequest0.setPreferredAgencies(routingRequest1.routerId);
      routingRequest0.clampInitialWait = routingRequest1.clampInitialWait;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      File file0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.BASIC;
      routingRequest0.intermediatePlacesOrdered = routingRequest1.showIntermediateStops;
      // Undeclared exception!
      try { 
        Graph.load(file0, graph_LoadLevel0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      HashSet<TraverseMode> hashSet0 = new HashSet<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(hashSet0);
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      boolean boolean0 = false;
      traverseModeSet0.setRail(boolean0);
      traverseModeSet0.setBusish(boolean0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      String string0 = routingRequest0.getBannedAgenciesStr();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      TraverseMode traverseMode0 = TraverseMode.RAIL;
      boolean boolean1 = hashSet0.add(traverseMode0);
      int int0 = multiShortestPathTree0.getVertexCount();
      int int1 = multiShortestPathTree0.getVertexCount();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      Class<StreetLocation> class0 = StreetLocation.class;
      String string1 = "7D.j";
      Coordinate coordinate0 = new Coordinate();
      StreetLocation streetLocation0 = new StreetLocation(graph0, string1, coordinate0, routingRequest0.routerId);
      StreetLocation streetLocation1 = graph0.putService(class0, streetLocation0);
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      List<State> list0 = multiShortestPathTree0.getStates(bikeRentalStationVertex0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "org.apache.lucene.search.TopDocsCollector";
      QualifiedModeSetSequence qualifiedModeSetSequence0 = null;
      try {
        qualifiedModeSetSequence0 = new QualifiedModeSetSequence(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.opentripplanner.routing.core.TraverseMode.org.apache.lucene.search.TopDocsCollector
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      RoutingRequest routingRequest0 = null;
      try {
        routingRequest0 = new RoutingRequest(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.opentripplanner.routing.core.TraverseMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.TRAM;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      Route route0 = null;
      StopPattern stopPattern0 = null;
      TripPattern tripPattern0 = null;
      try {
        tripPattern0 = new TripPattern(route0, stopPattern0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.gtfs.GtfsLibrary", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Stack<TraverseMode> stack0 = new Stack<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(stack0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(string0);
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      traverseModeSet0.setTram(routingRequest0.parkAndRide);
      double double0 = 1853.05;
      routingRequest0.maxSlope = double0;
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      String string1 = multiShortestPathTree0.toString();
      routingRequest0.cleanup();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      State state0 = null;
      State state1 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      ExitVertex exitVertex0 = new ExitVertex(graph0, routingRequest0.routerId, routingRequest0.bikeRentalPickupTime, routingRequest0.triangleSlopeFactor);
      State state0 = multiShortestPathTree0.getState(exitVertex0);
  }
}
