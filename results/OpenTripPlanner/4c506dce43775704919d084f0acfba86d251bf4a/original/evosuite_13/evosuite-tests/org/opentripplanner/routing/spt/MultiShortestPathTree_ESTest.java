/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 13:50:39 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.Stop;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraversalRequirements;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ParkAndRideEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.PathwayEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.edgetype.TimedTransferEdge;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.GraphIndex;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopDepart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUSISH;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      ObjectInputStream objectInputStream0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.FULL;
      DefaultStreetVertexIndexFactory defaultStreetVertexIndexFactory0 = new DefaultStreetVertexIndexFactory();
      // Undeclared exception!
      try { 
        Graph.load(objectInputStream0, graph_LoadLevel0, (StreetVertexIndexFactory) defaultStreetVertexIndexFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      double double0 = (-566.0153);
      String string0 = "X^Al,Q";
      routingRequest0.setToString(string0);
      routingRequest0.bikeSpeed = double0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getPaths();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.AbstractShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      double double0 = 0.0;
      routingRequest0.walkReluctance = double0;
      String string0 = routingRequest0.toString();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string1 = multiShortestPathTree0.toString();
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      ClassLoader classLoader0 = null;
      String string0 = "h#:\\0$ky]s!`%%rC";
      MockFile mockFile0 = new MockFile(string0);
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      try { 
        Graph.load(classLoader0, (File) mockFile0, graph_LoadLevel0);
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Stack<TraverseMode> stack0 = new Stack<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(stack0);
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = "6\"dZc[obFZ-K2lU";
      Stack<State> stack0 = new Stack<State>();
      double double0 = (-0.018460396178271388);
      double double1 = 303.02769;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double1);
      List<State> list0 = multiShortestPathTree0.getStates(onboardDepartVertex0);
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      StreetTraversalPermission streetTraversalPermission0 = StreetTraversalPermission.BICYCLE_AND_CAR;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      PriorityQueue<TraverseMode> priorityQueue0 = new PriorityQueue<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(priorityQueue0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = 1149;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, int0);
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[0];
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      TraverseModeSet traverseModeSet1 = new TraverseModeSet(list0);
      boolean boolean0 = false;
      traverseModeSet1.setCableCar(boolean0);
      TraverseModeSet traverseModeSet2 = traverseModeSet1.getNonTransitSet();
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet2);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      ObjectInputStream objectInputStream0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.FULL;
      DefaultStreetVertexIndexFactory defaultStreetVertexIndexFactory0 = new DefaultStreetVertexIndexFactory();
      // Undeclared exception!
      try { 
        Graph.load(objectInputStream0, graph_LoadLevel0, (StreetVertexIndexFactory) defaultStreetVertexIndexFactory0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      GenericLocation genericLocation0 = new GenericLocation(routingRequest0.bikeSwitchTime, routingRequest0.bikeRentalDropoffCost, routingRequest0.turnReluctance);
      routingRequest0.from = genericLocation0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      double double0 = 3186.4417;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(routingRequest0.routerId, routingRequest0.elevatorHopCost, double0);
      List<State> list0 = multiShortestPathTree0.getStates(onboardDepartVertex0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      String string0 = "";
      PriorityQueue<StreetEdge> priorityQueue0 = new PriorityQueue<StreetEdge>();
      double double0 = 1.0;
      Coordinate coordinate0 = new Coordinate(routingRequest0.carDropoffTime, routingRequest0.softWalkPenalty, double0);
      Coordinate coordinate1 = new Coordinate(coordinate0);
      coordinate1.z = (double) routingRequest0.carDropoffTime;
      StreetLocation streetLocation0 = StreetLocation.createStreetLocation(graph0, graph0.routerId, string0, (Iterable<StreetEdge>) priorityQueue0, coordinate1, coordinate1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      priorityQueue0.forEach(consumer0);
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(streetLocation0, bikeRentalStationVertex0);
      Vertex vertex0 = streetBikeRentalLink0.getToVertex();
      State state0 = multiShortestPathTree0.getState(vertex0);
      List<State> list0 = multiShortestPathTree0.getStates(streetLocation0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }
}
