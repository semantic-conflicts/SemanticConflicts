/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:11:51 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Envelope;
import com.vividsolutions.jts.geom.LineString;
import java.io.File;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.StopTime;
import org.opentripplanner.common.geometry.PackedCoordinateSequence;
import org.opentripplanner.common.geometry.SphericalDistanceLibrary;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraversalRequirements;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.LegSwitchingEdge;
import org.opentripplanner.routing.edgetype.PatternInterlineDwell;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.StreetTransitLink;
import org.opentripplanner.routing.edgetype.TimedTransferEdge;
import org.opentripplanner.routing.edgetype.TransferEdge;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.TransitStop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[6];
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.TRAINISH;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.TRAINISH;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.BICYCLE;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.CABLE_CAR;
      traverseModeArray0[4] = traverseMode4;
      TraverseMode traverseMode5 = TraverseMode.TRAINISH;
      traverseModeArray0[5] = traverseMode5;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      boolean boolean0 = false;
      traverseModeSet0.setSubway(boolean0);
      TraverseModeSet traverseModeSet1 = traverseModeSet0.getNonTransitSet();
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      double double0 = (-2496.7713966679);
      MultiShortestPathTree.TIME_EPSILON = double0;
      String string0 = multiShortestPathTree0.toString();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      String string1 = multiShortestPathTree0.toString();
      Graph graph0 = null;
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      String string2 = "+U~y";
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string2, routingRequest0.bikeRentalDropoffCost, multiShortestPathTree0.TIME_EPSILON, bikeRentalStation0.name);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, intersectionVertex0);
      Vertex vertex0 = streetBikeRentalLink0.getFromVertex();
      State state0 = multiShortestPathTree0.getState(vertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[0];
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      routingRequest0.useUnpreferredRoutesPenalty = multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      boolean boolean0 = false;
      double double0 = 0.0;
      double double1 = (-1471.2777045736193);
      String string0 = "org.opentripplanner.routing.spt.MultiShortestPathTree";
      double double2 = 1.0;
      SphericalDistanceLibrary sphericalDistanceLibrary0 = new SphericalDistanceLibrary();
      double double3 = 520.8105776316457;
      double double4 = 1.7976931348623157E308;
      double double5 = 0.0;
      Envelope envelope0 = sphericalDistanceLibrary0.bounds(double3, double2, double4, double5);
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double2, double1);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CAR;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = multiShortestPathTree0.add(state2);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(elevatorOnboardVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = multiShortestPathTree0.add(state2);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = multiShortestPathTree0.visit(state1);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(elevatorOnboardVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      Integer integer0 = new Integer(routingRequest0.walkBoardCost);
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      boolean boolean0 = legSwitchingEdge0.hasBogusName();
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean1 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean2 = MultiShortestPathTree.dominates(state2, state2);
      boolean boolean3 = MultiShortestPathTree.dominates(state0, state1);
      boolean boolean4 = multiShortestPathTree0.add(state1);
      boolean boolean5 = multiShortestPathTree0.visit(state0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = new Graph();
      Stop stop0 = new Stop();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = new Graph();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      MultiShortestPathTree.TIME_DIFF_MARGIN = multiShortestPathTree0.TIME_DIFF_MARGIN;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      MultiShortestPathTree.WEIGHT_EPSILON = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      double double0 = 0.0;
      MultiShortestPathTree.TIME_EPSILON = double0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      int int0 = 30;
      routingRequest0.transferPenalty = int0;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.batch);
      int int1 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      TraversalRequirements traversalRequirements0 = new TraversalRequirements();
      TraverseModeSet traverseModeSet0 = traversalRequirements0.modes;
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      Vector<TraverseMode> vector0 = new Vector<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(vector0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      double double0 = 0.0;
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      String string0 = "Asia/Tokyo";
      double double0 = 0.0;
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, double0, multiShortestPathTree0.TIME_DIFF_MARGIN, string0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(intersectionVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = new TreeMap<Vertex, List<State>>();
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.ElevatorOnboardVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean1 = multiShortestPathTree0.add(state1);
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      State state2 = timedTransferEdge0.traverse(state1);
      int int2 = (-2872);
      routingRequest0.setOtherThanPreferredRoutesPenalty(int2);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = multiShortestPathTree0.add(state1);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = multiShortestPathTree0.add(state2);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      boolean boolean0 = legSwitchingEdge0.hasBogusName();
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean1 = MultiShortestPathTree.dominates(state2, state0);
      boolean boolean2 = MultiShortestPathTree.dominates(state2, state2);
      boolean boolean3 = MultiShortestPathTree.dominates(state0, state1);
      boolean boolean4 = multiShortestPathTree0.add(state1);
      boolean boolean5 = multiShortestPathTree0.visit(state0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Graph graph0 = new Graph();
      String string0 = "57&`:&_0Nk^hQ?_z!-j";
      double double0 = 1334.0;
      String string1 = null;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string0, routingRequest0.elevatorBoardCost, double0, string1);
      elevatorOnboardVertex0.removeAllEdges();
      List<State> list0 = multiShortestPathTree0.getStates(elevatorOnboardVertex0);
      int int1 = multiShortestPathTree0.getVertexCount();
      TimedTransferEdge timedTransferEdge0 = new TimedTransferEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(elevatorOnboardVertex0, elevatorOnboardVertex0);
      State state0 = new State(elevatorOnboardVertex0, routingRequest0.clampInitialWait, multiShortestPathTree0.options);
      State state1 = legSwitchingEdge0.traverse(state0);
      double double1 = 641.0241008548942;
      state0.weight = double1;
      State state2 = timedTransferEdge0.traverse(state1);
      boolean boolean0 = multiShortestPathTree0.add(state1);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      boolean boolean2 = multiShortestPathTree0.add(state2);
  }
}
