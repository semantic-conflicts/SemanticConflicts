/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 22:33:02 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import com.vividsolutions.jts.geom.Geometry;
import com.vividsolutions.jts.geom.PrecisionModel;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.AgencyAndId;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.StopTime;
import org.onebusaway.gtfs.model.Transfer;
import org.onebusaway.gtfs.model.Trip;
import org.onebusaway.gtfs.services.calendar.CalendarService;
import org.opentripplanner.common.geometry.PackedCoordinateSequence;
import org.opentripplanner.graph_builder.annotation.NonStationParentStation;
import org.opentripplanner.graph_builder.annotation.StopNotLinkedForTransfers;
import org.opentripplanner.graph_builder.annotation.StopUnlinked;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.ServiceDay;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorAlightEdge;
import org.opentripplanner.routing.edgetype.LegSwitchingEdge;
import org.opentripplanner.routing.edgetype.OnBoardDepartPatternHop;
import org.opentripplanner.routing.edgetype.ParkAndRideEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.PathwayEdge;
import org.opentripplanner.routing.edgetype.PatternHop;
import org.opentripplanner.routing.edgetype.PatternInterlineDwell;
import org.opentripplanner.routing.edgetype.PreAlightEdge;
import org.opentripplanner.routing.edgetype.RentABikeOffEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.trippattern.TripTimes;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternArriveVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.StreetVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopArrive;
import org.opentripplanner.routing.vertextype.TransitStopDepart;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[7];
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.TRAM;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.LEG_SWITCH;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.BUSISH;
      traverseModeArray0[4] = traverseMode4;
      TraverseMode traverseMode5 = TraverseMode.TRANSIT;
      traverseModeArray0[5] = traverseMode5;
      TraverseMode traverseMode6 = TraverseMode.BUS;
      traverseModeArray0[6] = traverseMode6;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      boolean boolean0 = false;
      traverseModeSet0.setCustomMotorVehicle(boolean0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      boolean boolean1 = true;
      traverseModeSet0.setBusish(boolean1);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      State state0 = null;
      try {
        state0 = new State(routingRequest0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      String string0 = "";
      Route route0 = new Route();
      StopPattern stopPattern0 = null;
      TripPattern tripPattern0 = null;
      try {
        tripPattern0 = new TripPattern(route0, stopPattern0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.edgetype.TripPattern", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = 292278993;
      MultiShortestPathTree.TIME_DIFF_MARGIN = int0;
      State state0 = null;
      try {
        state0 = new State(multiShortestPathTree0.options);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      double double0 = (-1.0);
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      HashSet<TraverseMode> hashSet0 = new HashSet<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(hashSet0);
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      boolean boolean0 = true;
      routingRequest1.intermediatePlacesOrdered = boolean0;
      double double0 = 0.0;
      double double1 = routingRequest0.getTransitSpeedUpperBound();
      routingRequest1.carSpeed = double0;
      routingRequest1.reverseOptimizing = routingRequest0.driveOnRight;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.arriveBy);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      LinkedHashSet<State> linkedHashSet0 = new LinkedHashSet<State>();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = null;
      RoutingRequest routingRequest0 = null;
      try {
        routingRequest0 = new RoutingRequest(traverseModeSet0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.RoutingRequest", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      routingRequest0.setMode(traverseMode0);
      AgencyAndId agencyAndId0 = routingRequest0.startingTransitTripId;
      routingRequest0.banTrip(agencyAndId0);
      routingRequest0.cleanup();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      boolean boolean0 = false;
      routingRequest0.useBikeRentalAvailabilityInformation = boolean0;
      byte[] byteArray0 = null;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[5];
      TraverseMode traverseMode0 = TraverseMode.BUS;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.CABLE_CAR;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.FERRY;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[4] = traverseMode4;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      TraverseModeSet traverseModeSet1 = traverseModeSet0.clone();
      OptimizeType optimizeType0 = OptimizeType.TRIANGLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      String string0 = "'c~\"Pv!p4Doh-0}`";
      MockFile mockFile0 = new MockFile(string0);
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      try { 
        Graph.load((File) mockFile0, graph_LoadLevel0);
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = false;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean2, boolean3);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      State state0 = multiShortestPathTree0.getState(vertex0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = 167;
      MultiShortestPathTree.WEIGHT_DIFF_MARGIN = int0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[2];
      TraverseMode traverseMode0 = TraverseMode.TRAINISH;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      traverseModeArray0[1] = traverseMode1;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      boolean boolean0 = false;
      traverseModeSet0.setTrainish(boolean0);
      routingRequest0.maxWeight = multiShortestPathTree0.TIME_EPSILON;
      traverseModeSet0.setSubway(routingRequest0.ignoreRealtimeUpdates);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      double double0 = 0.0;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      Stop stop0 = new Stop();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      double double0 = 76.0307;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Graph graph0 = null;
      String string0 = "";
      double double1 = 1000000.0;
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, double1, multiShortestPathTree0.TIME_DIFF_MARGIN);
      Collection<Edge> collection0 = exitVertex0.getOutgoing();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(exitVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = new Graph();
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$FixedNumber";
      double double0 = 0.0;
      String string1 = "Maximum value exceeded for add";
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, string0, multiShortestPathTree0.WEIGHT_DIFF_MARGIN, double0, string0, string1);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStopStreetVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = new Graph();
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      String string0 = "xPL+`U>Zo";
      PriorityQueue<StreetEdge> priorityQueue0 = new PriorityQueue<StreetEdge>();
      PriorityQueue<StreetEdge> priorityQueue1 = new PriorityQueue<StreetEdge>(priorityQueue0);
      double double0 = 90.0;
      Coordinate coordinate0 = new Coordinate(routingRequest0.clampInitialWait, double0);
      StreetLocation streetLocation0 = StreetLocation.createStreetLocation(graph0, string0, bikeRentalStation0.name, (Iterable<StreetEdge>) priorityQueue1, coordinate0);
      StreetBikeRentalLink streetBikeRentalLink0 = new StreetBikeRentalLink(bikeRentalStationVertex0, streetLocation0);
      Vertex vertex0 = streetBikeRentalLink0.getFromVertex();
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      String string1 = null;
      double double1 = 0.02;
      ParkAndRideVertex parkAndRideVertex0 = new ParkAndRideVertex(graph0, string0, string1, double1, routingRequest0.stairsReluctance, graph0.routerId);
      ParkAndRideEdge parkAndRideEdge0 = new ParkAndRideEdge(parkAndRideVertex0);
      LegSwitchingEdge legSwitchingEdge0 = new LegSwitchingEdge(vertex0, vertex0);
      Edge edge0 = null;
      long long0 = 15778800000L;
      State state0 = new State(bikeRentalStationVertex0, edge0, long0, routingRequest0);
      State state1 = legSwitchingEdge0.traverse(state0);
      State state2 = parkAndRideEdge0.traverse(state1);
      boolean boolean0 = MultiShortestPathTree.dominates(state2, state0);
  }
}
