/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 22:55:05 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.ImmutableSetMultimap;
import com.vividsolutions.jts.geom.Coordinate;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.DateTimeZone;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.impl.GtfsRelationalDaoImpl;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.ShapePoint;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.StopTime;
import org.onebusaway.gtfs.model.Transfer;
import org.onebusaway.gtfs.model.Trip;
import org.onebusaway.gtfs.services.calendar.CalendarService;
import org.opentripplanner.common.geometry.DistanceLibrary;
import org.opentripplanner.common.geometry.SphericalDistanceLibrary;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.graph_builder.annotation.StopNotLinkedForTransfers;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.alertpatch.AlertPatch;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.ServiceDay;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.StateEditor;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorHopEdge;
import org.opentripplanner.routing.edgetype.OnBoardDepartPatternHop;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.PatternHop;
import org.opentripplanner.routing.edgetype.RentABikeOffEdge;
import org.opentripplanner.routing.edgetype.StreetTraversalPermission;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.GraphIndex;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.services.StreetVertexIndexService;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.trippattern.TripTimes;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ExitVertex;
import org.opentripplanner.routing.vertextype.IntersectionVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternArriveVertex;
import org.opentripplanner.routing.vertextype.PatternDepartVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.StreetVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopDepart;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Graph graph0 = null;
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      bikeRentalStation0.networks = set0;
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      String string0 = "U.N4_b";
      double double0 = 5.0;
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      String string0 = multiShortestPathTree0.toString();
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      routingRequest0.to = routingRequest1.to;
      boolean boolean0 = multiShortestPathTree0.add(state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      try { 
        pipedInputStream0.read();
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest1.elevatorHopCost;
      State state0 = multiShortestPathTree0.getState(vertex0);
      String string0 = multiShortestPathTree0.toString();
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      double double0 = 695.2490750014;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      boolean boolean0 = multiShortestPathTree0.add(state1);
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      Date date0 = routingRequest1.getDateTime();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.core.State", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = (-1861);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      File file0 = null;
      int int1 = 0;
      MultiShortestPathTree.WEIGHT_DIFF_MARGIN = int1;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      Stop stop0 = new Stop();
      boolean boolean0 = false;
      String string0 = "";
      OptimizeType optimizeType0 = OptimizeType.FLAT;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Graph graph0 = new Graph();
      String string0 = "KK3j9wMhh";
      MockFile mockFile0 = new MockFile(string0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      int int0 = 1;
      routingRequest0.maxTransfers = int0;
      String string0 = routingRequest0.getBannedRouteStr();
      routingRequest0.maxWeight = routingRequest0.preTransitPenalty;
      RoutingRequest routingRequest1 = routingRequest0.clone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      int int1 = multiShortestPathTree0.getVertexCount();
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(inputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = (-951);
      MultiShortestPathTree.WEIGHT_EPSILON = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      multiShortestPathTree0.WALK_DIST_EPSILON = (double) int0;
      State state0 = null;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Vertex vertex0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      long long0 = 4607182418800017408L;
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      State state0 = new State(vertex0, long0, routingRequest0);
      boolean boolean3 = MultiShortestPathTree.dominates(state0, state0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      double double0 = (-2143.339);
      Coordinate coordinate0 = new Coordinate(routingRequest0.bikeRentalPickupCost, double0);
      System.setCurrentTimeMillis(routingRequest0.bikeSwitchTime);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Vertex vertex0 = null;
      long long0 = (-2356L);
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      State state0 = new State(vertex0, long0, routingRequest1);
      boolean boolean0 = MultiShortestPathTree.dominates(state0, state0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[2];
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.FERRY;
      traverseModeArray0[1] = traverseMode1;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      String string0 = traverseModeSet0.getAsStr();
      boolean boolean0 = true;
      routingRequest0.setWheelchairAccessible(boolean0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      double double0 = (-3448.193177);
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(routingRequest0.routerId, double0, routingRequest0.boardSlack);
      boolean boolean1 = false;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths((Vertex) onboardDepartVertex0, boolean1);
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      State state1 = multiShortestPathTree0.getState(onboardDepartVertex0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = 1;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      MultiShortestPathTree.WEIGHT_EPSILON = routingRequest0.walkReluctance;
      int int0 = multiShortestPathTree0.getVertexCount();
      int int1 = multiShortestPathTree0.getVertexCount();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      String string0 = "";
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, multiShortestPathTree0.WEIGHT_EPSILON, multiShortestPathTree0.WEIGHT_EPSILON);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BUS;
      OptimizeType optimizeType0 = OptimizeType.QUICK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Graph graph0 = new Graph();
      Graph graph1 = new Graph(graph0);
      StreetVertexIndexServiceImpl streetVertexIndexServiceImpl0 = new StreetVertexIndexServiceImpl(graph1, routingRequest0.useBikeRentalAvailabilityInformation);
      Vertex vertex0 = streetVertexIndexServiceImpl0.getVertexForLocation(routingRequest0.to, routingRequest0);
      State state0 = multiShortestPathTree0.getState(vertex0);
      DistanceLibrary distanceLibrary0 = SphericalDistanceLibrary.getInstance();
      streetVertexIndexServiceImpl0.distanceLibrary = distanceLibrary0;
      InputStream inputStream0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.BASIC;
      // Undeclared exception!
      try { 
        Graph.load(inputStream0, graph_LoadLevel0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      String string0 = "";
      double double0 = (-547.605822106277);
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      double double1 = 354.210416388;
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, multiShortestPathTree0.WEIGHT_EPSILON, double1);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(exitVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      boolean boolean0 = false;
      traverseModeSet0.setWalk(boolean0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      List<TraverseMode> list0 = traverseModeSet0.getModes();
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      boolean boolean1 = false;
      String string0 = routingRequest1.getBannedAgenciesStr();
      routingRequest0.setWheelchairAccessible(boolean1);
      Vertex vertex0 = null;
      String string1 = routingRequest1.getPreferredRouteStr();
      int int0 = 1661;
      MultiShortestPathTree.TIME_DIFF_MARGIN = int0;
      TraverseMode traverseMode0 = TraverseMode.WALK;
      routingRequest1.setMode(traverseMode0);
      String string2 = multiShortestPathTree0.toString();
      State state0 = multiShortestPathTree0.getState(vertex0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      String string0 = "^l.Kar{,H";
      double double0 = 0.0;
      ExitVertex exitVertex0 = new ExitVertex(graph0, string0, double0, multiShortestPathTree0.TIME_EPSILON);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(exitVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      Graph graph0 = new Graph();
      GtfsRelationalDaoImpl gtfsRelationalDaoImpl0 = new GtfsRelationalDaoImpl();
      int int0 = (-384);
      String string0 = "now wait for ";
      double double0 = 1213.812;
      double double1 = (-122.722674491);
      IntersectionVertex intersectionVertex0 = new IntersectionVertex(graph0, string0, double0, double1, string0);
      graph0.removeVertex(intersectionVertex0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(intersectionVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      double double0 = (-46.52039352887);
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      MultiShortestPathTree.WEIGHT_EPSILON = multiShortestPathTree0.WALK_DIST_EPSILON;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.FERRY;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      StreetVertexIndexServiceImpl streetVertexIndexServiceImpl0 = new StreetVertexIndexServiceImpl(graph0, routingRequest0.kissAndRide);
      double double0 = (-2143.339);
      Coordinate coordinate0 = new Coordinate(routingRequest0.bikeRentalPickupCost, double0);
      StreetVertex streetVertex0 = streetVertexIndexServiceImpl0.getIntersectionAt(coordinate0);
      List<State> list0 = multiShortestPathTree0.getStates(streetVertex0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = (-2099);
      MultiShortestPathTree.TIME_DIFF_MARGIN = int0;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      TraverseModeSet traverseModeSet1 = traverseModeSet0.getNonTransitSet();
      boolean boolean0 = true;
      traverseModeSet0.setBicycle(boolean0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      MultiShortestPathTree.TIME_DIFF_MARGIN = multiShortestPathTree0.TIME_DIFF_MARGIN;
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      MultiShortestPathTree.WALK_DIST_EPSILON = (double) multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      String string0 = "S";
      double double0 = 0.0;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, multiShortestPathTree0.WEIGHT_EPSILON, double0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(onboardDepartVertex0);
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.OnboardDepartVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      Vertex vertex0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      long long0 = 4607182418800017408L;
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.TRANSFERS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      State state0 = new State(vertex0, long0, routingRequest0);
      boolean boolean3 = MultiShortestPathTree.dominates(state0, state0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest1.elevatorHopCost;
      State state0 = multiShortestPathTree0.getState(vertex0);
      String string0 = multiShortestPathTree0.toString();
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      double double0 = 695.2490750013635;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      routingRequest0.to = routingRequest1.to;
      boolean boolean0 = multiShortestPathTree0.add(state1);
      try { 
        pipedInputStream0.read();
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest1.elevatorHopCost;
      String string0 = multiShortestPathTree0.toString();
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      double double0 = 695.2490750013635;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      routingRequest0.to = routingRequest1.to;
      boolean boolean0 = multiShortestPathTree0.add(state0);
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      Date date0 = routingRequest1.getDateTime();
      int int0 = multiShortestPathTree0.getVertexCount();
      State state1 = state0.reversedClone();
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = MultiShortestPathTree.dominates(state0, state0);
      String string2 = multiShortestPathTree0.toString();
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      Collection<State> collection3 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest1.elevatorHopCost;
      String string0 = multiShortestPathTree0.toString();
      State state0 = new State(vertex0, multiShortestPathTree0.options);
      MultiShortestPathTree.WEIGHT_EPSILON = routingRequest1.walkReluctance;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      routingRequest0.to = routingRequest1.to;
      boolean boolean0 = multiShortestPathTree0.add(state0);
      boolean boolean1 = multiShortestPathTree0.add(state0);
      try { 
        pipedInputStream0.read();
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.BICYCLE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      Vertex vertex0 = null;
      routingRequest1.preTransitOverageRate = (double) routingRequest0.transferPenalty;
      routingRequest0.startingTransitStopId = routingRequest1.startingTransitTripId;
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest1.elevatorHopCost;
      State state0 = multiShortestPathTree0.getState(vertex0);
      String string0 = multiShortestPathTree0.toString();
      State state1 = new State(vertex0, multiShortestPathTree0.options);
      double double0 = 695.2490750013635;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.DEBUG;
      boolean boolean0 = multiShortestPathTree0.add(state1);
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      Date date0 = routingRequest1.getDateTime();
      int int0 = multiShortestPathTree0.getVertexCount();
      State state2 = state1.reversedClone();
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = MultiShortestPathTree.dominates(state1, state1);
      String string2 = multiShortestPathTree0.toString();
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      Collection<State> collection3 = multiShortestPathTree0.getAllStates();
      boolean boolean2 = multiShortestPathTree0.visit(state1);
      boolean boolean3 = MultiShortestPathTree.dominates(state2, state2);
  }
}
