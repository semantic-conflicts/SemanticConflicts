/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 22:35:44 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.vividsolutions.jts.geom.Coordinate;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.impl.GtfsRelationalDaoImpl;
import org.onebusaway.gtfs.model.AgencyAndId;
import org.onebusaway.gtfs.model.Pathway;
import org.onebusaway.gtfs.model.Stop;
import org.opentripplanner.api.parameter.QualifiedModeSetSequence;
import org.opentripplanner.common.geometry.DistanceLibrary;
import org.opentripplanner.common.geometry.SphericalDistanceLibrary;
import org.opentripplanner.common.model.GenericLocation;
import org.opentripplanner.common.model.NamedPlace;
import org.opentripplanner.routing.alertpatch.AlertPatch;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.LegSwitchingEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.RentABikeOffEdge;
import org.opentripplanner.routing.edgetype.SimpleEdge;
import org.opentripplanner.routing.edgetype.StreetBikeRentalLink;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.StreetTransitLink;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Edge;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.impl.DefaultStreetVertexIndexFactory;
import org.opentripplanner.routing.impl.StreetVertexIndexServiceImpl;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.services.StreetVertexIndexFactory;
import org.opentripplanner.routing.spt.GraphPath;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.ElevatorOnboardVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.PatternStopVertex;
import org.opentripplanner.routing.vertextype.TransitStation;
import org.opentripplanner.routing.vertextype.TransitStop;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      HashMap<Vertex, List<State>> hashMap0 = new HashMap<Vertex, List<State>>();
      String string0 = "";
      double double0 = 0.0;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      double double1 = (-1.0);
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double1, multiShortestPathTree0.WEIGHT_DIFF_MARGIN);
      LinkedList<State> linkedList0 = new LinkedList<State>();
      List<State> list0 = hashMap0.put(onboardDepartVertex0, linkedList0);
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) hashMap0;
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      int int0 = multiShortestPathTree0.getVertexCount();
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TraverseModeSet traverseModeSet0 = TraverseModeSet.allModes();
      TraverseModeSet traverseModeSet1 = traverseModeSet0.clone();
      OptimizeType optimizeType0 = OptimizeType.SAFE;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet1, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Graph graph0 = null;
      Graph graph1 = null;
      try {
        graph1 = new Graph(graph0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(string0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Vertex vertex0 = null;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Graph graph0 = new Graph();
      String string1 = "";
      double double0 = 0.0;
      ElevatorOnboardVertex elevatorOnboardVertex0 = new ElevatorOnboardVertex(graph0, string1, double0, routingRequest0.MIN_SIMILARITY, string1);
      routingRequest0.putExtension(string0, elevatorOnboardVertex0);
      boolean boolean0 = false;
      traverseModeSet0.setCar(boolean0);
      double double1 = routingRequest0.getTransitSpeedUpperBound();
      int int0 = 1540;
      List<GraphPath> list0 = multiShortestPathTree0.getPaths(vertex0, routingRequest0.kissAndRide);
      routingRequest0.setFromString(string0);
      routingRequest0.maxPreTransitTime = int0;
      TraverseModeSet traverseModeSet1 = traverseModeSet0.clone();
      NamedPlace namedPlace0 = routingRequest0.getFromPlace();
      boolean boolean1 = false;
      GraphPath graphPath0 = multiShortestPathTree0.getPath(vertex0, boolean1);
      State state0 = multiShortestPathTree0.getState(vertex0);
      boolean boolean2 = true;
      traverseModeSet0.setCableCar(boolean2);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      String string2 = multiShortestPathTree0.toString();
      List<State> list1 = multiShortestPathTree0.getStates(vertex0);
      State state1 = multiShortestPathTree0.getState(vertex0);
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      Collection<State> collection2 = multiShortestPathTree0.getAllStates();
      State state2 = multiShortestPathTree0.getState(vertex0);
      String string3 = null;
      double double2 = 608.4398442439692;
      ParkAndRideVertex parkAndRideVertex0 = null;
      try {
        parkAndRideVertex0 = new ParkAndRideVertex(graph0, string3, namedPlace0.name, routingRequest0.walkReluctance, double2, routingRequest0.routerId);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      MultiShortestPathTree.TIME_DIFF_MARGIN = multiShortestPathTree0.WEIGHT_DIFF_MARGIN;
      Integer integer0 = new Integer(multiShortestPathTree0.TIME_DIFF_MARGIN);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      String string0 = "";
      QualifiedModeSetSequence qualifiedModeSetSequence0 = null;
      try {
        qualifiedModeSetSequence0 = new QualifiedModeSetSequence(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.opentripplanner.routing.core.TraverseMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.WALK;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      double double0 = 1328.00230737;
      MultiShortestPathTree.TIME_EPSILON = double0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ArrayDeque<TraverseMode> arrayDeque0 = new ArrayDeque<TraverseMode>();
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(arrayDeque0);
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0);
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      RoutingRequest routingRequest2 = routingRequest1.reversedClone();
      TraverseMode traverseMode0 = TraverseMode.CUSTOM_MOTOR_VEHICLE;
      boolean boolean0 = arrayDeque0.add(traverseMode0);
      TraverseMode traverseMode1 = TraverseMode.BICYCLE;
      boolean boolean1 = arrayDeque0.add(traverseMode1);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      boolean boolean2 = false;
      traverseModeSet0.setCustomMotorVehicle(boolean2);
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      double double0 = (-1052.613305258004);
      int int0 = 0;
      routingRequest0.bikeSwitchCost = int0;
      routingRequest0.triangleTimeFactor = double0;
      RoutingRequest routingRequest1 = routingRequest0.bikeWalkingOptions;
      routingRequest0.bikeWalkingOptions = routingRequest1;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      MultiShortestPathTree.WEIGHT_EPSILON = routingRequest1.preTransitOverageRate;
      State state0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      RoutingRequest routingRequest2 = routingRequest1.clone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest2);
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.RAIL;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      RoutingRequest routingRequest1 = routingRequest0.reversedClone();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest1);
      int int0 = (-1);
      routingRequest1.setMaxTransfers(int0);
      int int1 = 408;
      MultiShortestPathTree.WEIGHT_DIFF_MARGIN = int1;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      routingRequest1.bikeParkAndRide = routingRequest0.bikeParkAndRide;
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
      String string0 = multiShortestPathTree0.toString();
      int int2 = multiShortestPathTree0.getVertexCount();
      Graph graph0 = new Graph();
      String string1 = "?/N#KcO3";
      double double0 = (-3508.0);
      Coordinate coordinate0 = new Coordinate(double0, routingRequest1.elevatorHopCost);
      String string2 = "{HhZy";
      StreetLocation streetLocation0 = new StreetLocation(graph0, string1, coordinate0, string2);
      State state0 = new State(streetLocation0, routingRequest1);
      boolean boolean0 = multiShortestPathTree0.add(state0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }
}
