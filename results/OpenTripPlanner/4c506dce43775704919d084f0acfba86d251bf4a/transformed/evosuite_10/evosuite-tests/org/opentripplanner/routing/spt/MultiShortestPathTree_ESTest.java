/*
 * This file was automatically generated by EvoSuite
 * Wed Apr 29 23:14:41 GMT 2020
 */

package org.opentripplanner.routing.spt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.hash.HashCode;
import com.google.common.hash.HashFunction;
import com.vividsolutions.jts.geom.Coordinate;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.TreeMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;
import org.onebusaway.gtfs.model.Route;
import org.onebusaway.gtfs.model.Stop;
import org.onebusaway.gtfs.model.StopTime;
import org.opentripplanner.common.model.NamedPlace;
import org.opentripplanner.graph_builder.annotation.StopUnlinked;
import org.opentripplanner.model.StopPattern;
import org.opentripplanner.routing.bike_rental.BikeRentalStation;
import org.opentripplanner.routing.core.OptimizeType;
import org.opentripplanner.routing.core.RoutingRequest;
import org.opentripplanner.routing.core.State;
import org.opentripplanner.routing.core.TraverseMode;
import org.opentripplanner.routing.core.TraverseModeSet;
import org.opentripplanner.routing.edgetype.ElevatorBoardEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideEdge;
import org.opentripplanner.routing.edgetype.ParkAndRideLinkEdge;
import org.opentripplanner.routing.edgetype.RentABikeOffEdge;
import org.opentripplanner.routing.edgetype.StreetEdge;
import org.opentripplanner.routing.edgetype.TripPattern;
import org.opentripplanner.routing.graph.Graph;
import org.opentripplanner.routing.graph.Vertex;
import org.opentripplanner.routing.location.StreetLocation;
import org.opentripplanner.routing.spt.MultiShortestPathTree;
import org.opentripplanner.routing.vertextype.BikeRentalStationVertex;
import org.opentripplanner.routing.vertextype.ElevatorOffboardVertex;
import org.opentripplanner.routing.vertextype.OnboardDepartVertex;
import org.opentripplanner.routing.vertextype.ParkAndRideVertex;
import org.opentripplanner.routing.vertextype.TransitStop;
import org.opentripplanner.routing.vertextype.TransitStopArrive;
import org.opentripplanner.routing.vertextype.TransitStopStreetVertex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiShortestPathTree_ESTest extends MultiShortestPathTree_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      MultiShortestPathTree.TIME_EPSILON = routingRequest0.waitAtBeginningFactor;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest0.useUnpreferredRoutesPenalty;
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      NamedPlace namedPlace0 = routingRequest0.getToPlace();
      String string1 = multiShortestPathTree0.toString();
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      int int0 = multiShortestPathTree0.getVertexCount();
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.FULL;
      double double0 = 0.0;
      String string2 = "A|S`9/o{^Q!xU";
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      TransitStop transitStop0 = null;
      StopUnlinked stopUnlinked0 = new StopUnlinked(transitStop0);
      String string0 = stopUnlinked0.getHTMLMessage();
      Vertex vertex0 = stopUnlinked0.getReferencedVertex();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = "r3*ZBb3cn6/Wb8<";
      double double0 = 0.0;
      double double1 = 1384.22340283602;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double1);
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      State state1 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.visit(state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = 164765718;
      int int1 = (-28);
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      int int0 = (-1539);
      multiShortestPathTree0.WEIGHT_EPSILON = (double) int0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      TraverseMode[] traverseModeArray0 = new TraverseMode[6];
      TraverseMode traverseMode0 = TraverseMode.LEG_SWITCH;
      traverseModeArray0[0] = traverseMode0;
      TraverseMode traverseMode1 = TraverseMode.RAIL;
      traverseModeArray0[1] = traverseMode1;
      TraverseMode traverseMode2 = TraverseMode.BUSISH;
      traverseModeArray0[2] = traverseMode2;
      TraverseMode traverseMode3 = TraverseMode.TRAM;
      traverseModeArray0[3] = traverseMode3;
      TraverseMode traverseMode4 = TraverseMode.BICYCLE;
      traverseModeArray0[4] = traverseMode4;
      TraverseMode traverseMode5 = TraverseMode.TRAM;
      traverseModeArray0[5] = traverseMode5;
      TraverseModeSet traverseModeSet0 = new TraverseModeSet(traverseModeArray0);
      boolean boolean0 = false;
      traverseModeSet0.setDriving(boolean0);
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseModeSet0, optimizeType0);
      MockDate mockDate0 = new MockDate(routingRequest0.boardSlack);
      traverseModeSet0.setTrainish(routingRequest0.parkAndRide);
      routingRequest0.setDateTime((Date) mockDate0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      boolean boolean1 = false;
      traverseModeSet0.setWalk(boolean1);
      int int0 = multiShortestPathTree0.getVertexCount();
      Graph graph0 = new Graph();
      BikeRentalStation bikeRentalStation0 = new BikeRentalStation();
      BikeRentalStationVertex bikeRentalStationVertex0 = new BikeRentalStationVertex(graph0, bikeRentalStation0);
      State state0 = multiShortestPathTree0.getState(bikeRentalStationVertex0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = "r3*ZBb3cn6/Wb8<";
      double double0 = 0.0;
      double double1 = 1384.22340283602;
      OnboardDepartVertex onboardDepartVertex0 = new OnboardDepartVertex(string0, double0, double1);
      State state0 = multiShortestPathTree0.getState(onboardDepartVertex0);
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      State state1 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.SUBWAY;
      OptimizeType optimizeType0 = OptimizeType.GREENWAYS;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0, optimizeType0);
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      int int0 = multiShortestPathTree0.getVertexCount();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getAllStates();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertexCount();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      TraverseMode traverseMode0 = TraverseMode.CABLE_CAR;
      RoutingRequest routingRequest0 = new RoutingRequest(traverseMode0);
      routingRequest0.clearIntermediatePlaces();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      Set<Vertex> set0 = multiShortestPathTree0.getVertices();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      MultiShortestPathTree.WEIGHT_EPSILON = multiShortestPathTree0.TIME_EPSILON;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getVertices();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = null;
      String string0 = "";
      double double0 = 557.8001607726683;
      ElevatorOffboardVertex elevatorOffboardVertex0 = new ElevatorOffboardVertex(graph0, string0, multiShortestPathTree0.WEIGHT_EPSILON, double0, string0);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(elevatorOffboardVertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Map<Vertex, List<State>> map0 = multiShortestPathTree0.stateSets;
      multiShortestPathTree0.stateSets = map0;
      Vertex vertex0 = null;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      Graph graph0 = new Graph();
      Vertex vertex0 = graph0.getVertexById(multiShortestPathTree0.WEIGHT_DIFF_MARGIN);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getStates(vertex0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      double double0 = (-1538.1342);
      MultiShortestPathTree.WEIGHT_EPSILON = multiShortestPathTree0.TIME_EPSILON;
      MultiShortestPathTree.WEIGHT_EPSILON = double0;
      // Undeclared exception!
      try { 
        multiShortestPathTree0.toString();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RoutingRequest routingRequest0 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      String string0 = multiShortestPathTree0.toString();
      String string1 = multiShortestPathTree0.toString();
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      Collection<State> collection1 = multiShortestPathTree0.getAllStates();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      State state0 = null;
      // Undeclared exception!
      try { 
        MultiShortestPathTree.dominates(state0, state0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      TreeMap<Vertex, List<State>> treeMap0 = new TreeMap<Vertex, List<State>>();
      multiShortestPathTree0.stateSets = (Map<Vertex, List<State>>) treeMap0;
      String string0 = multiShortestPathTree0.toString();
      String string1 = multiShortestPathTree0.toString();
      Graph graph0 = null;
      double double0 = 0.0;
      String string2 = "MultiSPT(";
      String string3 = "*z@F86I+GGBe";
      TransitStopStreetVertex transitStopStreetVertex0 = new TransitStopStreetVertex(graph0, string1, double0, double0, string2, string3);
      // Undeclared exception!
      try { 
        multiShortestPathTree0.getState(transitStopStreetVertex0);
      } catch(ClassCastException e) {
         //
         // org.opentripplanner.routing.vertextype.TransitStopStreetVertex cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RoutingRequest routingRequest0 = new RoutingRequest();
      Date date0 = routingRequest0.getDateTime();
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree(routingRequest0);
      MultiShortestPathTree.TIME_EPSILON = routingRequest0.waitAtBeginningFactor;
      Collection<State> collection0 = multiShortestPathTree0.getAllStates();
      MultiShortestPathTree.WEIGHT_EPSILON = (double) routingRequest0.useUnpreferredRoutesPenalty;
      String string0 = multiShortestPathTree0.toString();
      Vertex vertex0 = null;
      NamedPlace namedPlace0 = routingRequest0.getToPlace();
      String string1 = multiShortestPathTree0.toString();
      List<State> list0 = multiShortestPathTree0.getStates(vertex0);
      int int0 = multiShortestPathTree0.getVertexCount();
      File file0 = null;
      Graph.LoadLevel graph_LoadLevel0 = Graph.LoadLevel.BASIC;
      // Undeclared exception!
      try { 
        Graph.load(file0, graph_LoadLevel0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.graph.Graph", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      State state0 = null;
      State state1 = null;
      MultiShortestPathTree multiShortestPathTree0 = new MultiShortestPathTree();
      // Undeclared exception!
      try { 
        multiShortestPathTree0.add(state1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.opentripplanner.routing.spt.MultiShortestPathTree", e);
      }
  }
}
