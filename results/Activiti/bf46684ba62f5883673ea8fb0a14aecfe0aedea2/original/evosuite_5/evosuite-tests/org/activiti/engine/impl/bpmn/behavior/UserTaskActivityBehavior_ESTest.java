/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 08:58:34 GMT 2020
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import org.activiti.bpmn.model.ServiceTask;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.ProcessEngineConfiguration;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.delegate.TaskListener;
import org.activiti.engine.form.TaskFormData;
import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.ShellActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.el.FixedValue;
import org.activiti.engine.impl.form.DefaultTaskFormHandler;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.HistoricDetailAssignmentEntity;
import org.activiti.engine.impl.persistence.entity.IdentityInfoEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.task.TaskDefinition;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      TaskDefinition taskDefinition0 = null;
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      TaskEntity taskEntity0 = null;
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      UserTask userTask0 = new UserTask();
      UserTask userTask1 = userTask0.clone();
      String string0 = "";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      List<String> list0 = userTask0.getCandidateGroups();
      taskEntity0.removeVariablesLocal((Collection<String>) list0);
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      try { 
        userTaskActivityBehavior0.signal(executionImpl0, taskEntity0.DELETE_REASON_DELETED, taskDefinition1);
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      UserTask userTask0 = new UserTask();
      UserTask userTask1 = userTask0.clone();
      String string0 = "UserTask should not be signalled before complete";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      String string1 = "M~VZ";
      // Undeclared exception!
      try { 
        executionEntity0.involveUser(taskEntity0.DELETE_REASON_COMPLETED, string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.ExecutionEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      HistoricDetailAssignmentEntity historicDetailAssignmentEntity0 = new HistoricDetailAssignmentEntity();
      Date date0 = historicDetailAssignmentEntity0.getTime();
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      TaskFormData taskFormData0 = defaultTaskFormHandler0.createTaskForm(taskEntity0);
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      userTaskActivityBehavior0.taskDefinition = taskDefinition0;
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      ActivityExecution activityExecution0 = null;
      userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      TaskDefinition taskDefinition0 = null;
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      String string0 = "activiti-intermediate-catch-event-invalid-eventdefinition";
      defaultTaskFormHandler0.setDeploymentId(string0);
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      Expression expression0 = taskDefinition0.getPriorityExpression();
      taskDefinition0.setFormKeyExpression(expression0);
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      String string1 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      UserTask userTask0 = new UserTask();
      UserTask userTask1 = userTask0.clone();
      TaskEntity taskEntity0 = new TaskEntity();
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      MultiInstanceActivityBehavior multiInstanceActivityBehavior0 = userTaskActivityBehavior0.multiInstanceActivityBehavior;
      userTaskActivityBehavior0.setMultiInstanceActivityBehavior(multiInstanceActivityBehavior0);
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TaskEntity taskEntity0 = new TaskEntity();
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      Map<String, Object> map0 = taskEntity0.getTaskLocalVariables();
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      ExecutionEntity executionEntity0 = taskEntity0.getProcessInstance();
      taskEntity0.setVariablesLocal(map0);
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, taskEntity0.DELETE_REASON_DELETED, taskEntity0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      UserTask userTask0 = null;
      int int0 = 1;
      int int1 = 0;
      int int2 = (-5);
      MockDate mockDate0 = new MockDate(int0, int0, int1, int2, int0);
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      MultiInstanceActivityBehavior multiInstanceActivityBehavior0 = null;
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      Double double0 = new Double(int1);
      try { 
        userTaskActivityBehavior0.signal(executionImpl0, taskEntity0.DELETE_REASON_DELETED, double0);
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TaskEntity taskEntity0 = new TaskEntity();
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      Map<String, Object> map0 = executionImpl0.getVariables();
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      BpmnActivityBehavior bpmnActivityBehavior0 = new BpmnActivityBehavior();
      userTaskActivityBehavior0.bpmnActivityBehavior = bpmnActivityBehavior0;
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      ServiceTask serviceTask0 = new ServiceTask();
      String string0 = "";
      serviceTask0.setExtensionId(string0);
      ShellActivityBehavior shellActivityBehavior0 = defaultActivityBehaviorFactory0.createShellActivityBehavior(serviceTask0);
      boolean boolean0 = false;
      serviceTask0.setForCompensation(boolean0);
      Expression expression0 = shellActivityBehavior0.outputVariable;
      taskDefinition0.addCandidateUserIdExpression(expression0);
      String string1 = "~TG'ws7-TyAcz$(**";
      userTaskActivityBehavior0.taskDefinition = taskDefinition0;
      TaskEntity taskEntity0 = new TaskEntity();
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }
}
