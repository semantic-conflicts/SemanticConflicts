/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 06:39:02 GMT 2020
 */

package io.cloudslang.lang.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.cloudslang.lang.api.SlangImpl;
import io.cloudslang.lang.compiler.SlangCompiler;
import io.cloudslang.lang.compiler.SlangSource;
import io.cloudslang.lang.entities.CompilationArtifact;
import io.cloudslang.lang.entities.bindings.Input;
import io.cloudslang.lang.systemtests.BranchAggregatorListener;
import io.cloudslang.lang.systemtests.JoinAggregatorListener;
import io.cloudslang.lang.systemtests.RunDataAggregatorListener;
import io.cloudslang.lang.systemtests.StepData;
import io.cloudslang.score.api.ExecutionPlan;
import io.cloudslang.score.api.ExecutionStep;
import io.cloudslang.score.api.Score;
import io.cloudslang.score.api.TriggeringProperties;
import io.cloudslang.score.events.EventBus;
import io.cloudslang.score.events.ScoreEvent;
import io.cloudslang.score.events.ScoreEventListener;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.log4j.LogManager;
import org.apache.log4j.helpers.LogLog;
import org.apache.log4j.spi.LoggerRepository;
import org.apache.log4j.spi.RepositorySelector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlangImpl_ESTest extends SlangImpl_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      slangImpl0.unSubscribeOnEvents(runDataAggregatorListener0);
      int int0 = 248;
      String string0 = "2'@kM\"T0qh";
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      String string0 = "Va} ! ";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      Set<SlangSource> set0 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      String string0 = null;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      EvoSuiteURL evoSuiteURL0 = null;
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, string0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      ExecutionPlan executionPlan1 = new ExecutionPlan();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-107);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-123);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      CompilationArtifact compilationArtifact0 = null;
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "4U_r[HtQAOJrJV%Y=";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.subscribeOnAllEvents(branchAggregatorListener0);
      String string0 = null;
      String string1 = "";
      int int0 = 582;
      String string2 = "";
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null, (Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      ExecutionPlan executionPlan2 = executionPlan1.setBeginStep(long1);
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan2);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Comparator<Object> comparator0 = null;
      linkedList0.sort(comparator0);
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(hashMap0);
      Map<String, ExecutionPlan> map0 = triggeringProperties1.getDependencies();
      LinkedList<Input> linkedList1 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, map0, linkedList1, linkedList1);
      Long long2 = slangImpl0.run(compilationArtifact0, map0, hashMap0);
      Map<String, String> map1 = null;
      Long long3 = slangImpl0.run(compilationArtifact0, map1, map0);
      String string0 = null;
      String string1 = "O~cXgEg*E~V";
      SlangSource slangSource0 = null;
      try {
        slangSource0 = new SlangSource(string0, string1);
      } catch(NullPointerException e) {
         //
         // Source cannot be null
         //
         verifyException("org.apache.commons.lang3.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      String string0 = "4U_r[HtQA#grJV%Y=";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      Map<String, String> map0 = null;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = null;
      Set<SlangSource> set0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, set0);
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "The array of prefixes must not be null";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "4U_r[HtQA#grJV%Y=";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      slangImpl0.subscribeOnAllEvents(runDataAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-20);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-9);
      byteArray0[1] = byte1;
      String string0 = "*%e'>3J8QR";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      String string1 = "";
      SlangSource slangSource1 = SlangSource.fromBytes(byteArray0, string1);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = null;
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      boolean boolean0 = false;
      LogLog.setQuietMode(boolean0);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      slangImpl0.subscribeOnEvents(joinAggregatorListener0, set0);
      slangImpl0.unSubscribeOnEvents(joinAggregatorListener0);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)83;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-79);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-81);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)117;
      byteArray0[4] = byte4;
      byte byte5 = (byte)81;
      byteArray0[5] = byte5;
      String string0 = "4o.LCQ\"N}Z";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      boolean boolean1 = linkedHashSet0.add(slangSource0);
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null, (Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(map0);
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map0, linkedList0, linkedList0);
      Long long0 = slangImpl0.run(compilationArtifact0, map0, map0);
      Long long1 = slangImpl0.run(compilationArtifact0, map0, map0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-107);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-123);
      byteArray0[1] = byte1;
      byte byte2 = (byte)72;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-42);
      byteArray0[3] = byte3;
      byte byte4 = (byte)66;
      byteArray0[4] = byte4;
      String string0 = null;
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      Set<SlangSource> set0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, set0, map0, hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = null;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = null;
      // Undeclared exception!
      try { 
        TriggeringProperties.create(executionPlan0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)125;
      byteArray0[1] = byte1;
      byte byte2 = (byte)86;
      byteArray0[2] = byte2;
      byte byte3 = (byte)118;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-2);
      byteArray0[4] = byte4;
      byte byte5 = (byte)100;
      byteArray0[5] = byte5;
      String string0 = "";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      RepositorySelector repositorySelector0 = mock(RepositorySelector.class, new ViolatedAssumptionAnswer());
      SlangImpl slangImpl1 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      Map<String, ExecutionPlan> map0 = triggeringProperties0.getDependencies();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map0, linkedList0, linkedList0);
      SlangCompiler slangCompiler1 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0, (CompilationArtifact) null).when(slangCompiler1).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl1, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler1);
      EventBus eventBus1 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl1, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus1);
      Score score1 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score1).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl1, (Class<?>) SlangImpl.class, "score", (Object) score1);
      Injector.validateBean(slangImpl1, (Class<?>) SlangImpl.class);
      String string0 = "'n7Nh";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact1 = slangImpl1.compile(slangSource0, linkedHashSet0);
      LogManager.setRepositorySelector(repositorySelector0, slangImpl1);
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      Long long0 = slangImpl1.compileAndRun(slangSource0, linkedHashSet1, map0, map0);
  }
}
