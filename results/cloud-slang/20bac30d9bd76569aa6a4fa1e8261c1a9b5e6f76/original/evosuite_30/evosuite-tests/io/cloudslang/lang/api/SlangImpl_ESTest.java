/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 06:22:47 GMT 2020
 */

package io.cloudslang.lang.api;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import io.cloudslang.lang.api.SlangImpl;
import io.cloudslang.lang.compiler.SlangCompiler;
import io.cloudslang.lang.compiler.SlangSource;
import io.cloudslang.lang.entities.CompilationArtifact;
import io.cloudslang.lang.entities.bindings.Input;
import io.cloudslang.lang.systemtests.BranchAggregatorListener;
import io.cloudslang.lang.systemtests.JoinAggregatorListener;
import io.cloudslang.lang.systemtests.RunDataAggregatorListener;
import io.cloudslang.score.api.ExecutionPlan;
import io.cloudslang.score.api.ExecutionStep;
import io.cloudslang.score.api.Score;
import io.cloudslang.score.api.TriggeringProperties;
import io.cloudslang.score.events.EventBus;
import io.cloudslang.score.events.ScoreEventListener;
import java.time.ZoneId;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.apache.log4j.helpers.LogLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.javaee.injection.Injector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SlangImpl_ESTest extends SlangImpl_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      ExecutionStep executionStep0 = new ExecutionStep();
      ExecutionPlan executionPlan1 = executionPlan0.addStep(executionStep0);
      String string0 = "=6U";
      ExecutionPlan executionPlan2 = executionPlan1.setFlowUuid(string0);
      long long0 = 2575L;
      Long long1 = new Long(long0);
      ExecutionPlan executionPlan3 = executionPlan2.setBeginStep(long1);
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      HashMap<String, Input> hashMap0 = new HashMap<String, Input>();
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(hashMap0);
      Map<String, ExecutionPlan> map0 = triggeringProperties1.getDependencies();
      List<Input> list0 = null;
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      long long0 = 0L;
      Long long1 = new Long(long0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn(long1).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap1, linkedList0, linkedList0);
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(hashMap1);
      Map<String, Integer> map0 = null;
      Long long2 = slangImpl0.run(compilationArtifact0, map0, hashMap0);
      Long long3 = new Long(long0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      SlangSource slangSource0 = null;
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      // Undeclared exception!
      try { 
        slangImpl0.compile(slangSource0, linkedHashSet0);
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "EVENT_ASYNC_LOOP_OUTPUT_START";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = "";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = null;
      slangImpl0.unSubscribeOnEvents(scoreEventListener0);
      SlangSource slangSource0 = null;
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Source can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)48;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-52);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-8);
      byteArray0[3] = byte3;
      byte byte4 = (byte)5;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-80);
      byteArray0[6] = byte6;
      byte byte7 = (byte)64;
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-1);
      byteArray0[8] = byte8;
      String string0 = null;
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      String string0 = ";y>BG|p}iZx/;4";
      String string1 = "t+|dx4 3sUHyT";
      SlangSource slangSource0 = new SlangSource(string0, string1);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      Long long0 = slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      long long0 = (-560L);
      Long long1 = new Long(long0);
      ExecutionPlan executionPlan1 = executionPlan0.setBeginStep(long1);
      long long2 = 0L;
      Long long3 = new Long(long2);
      ExecutionStep executionStep0 = new ExecutionStep(long3);
      ExecutionPlan executionPlan2 = executionPlan1.addStep(executionStep0);
      Map<String, ExecutionPlan> map0 = null;
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan2, map0, linkedList0, linkedList0);
      Long long4 = slangImpl0.run(compilationArtifact0, map0, map0);
      RunDataAggregatorListener runDataAggregatorListener0 = new RunDataAggregatorListener();
      // Undeclared exception!
      try { 
        runDataAggregatorListener0.aggregate();
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected non-static field net.sf.cglib.proxy.Enhancer.serialVersionUID
         //
         verifyException("net.sf.cglib.proxy.Enhancer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ScoreEventListener scoreEventListener0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      slangImpl0.subscribeOnEvents(scoreEventListener0, linkedHashSet0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setPlatformMetadata(hashMap0);
      Map<String, ExecutionPlan> map0 = triggeringProperties1.getDependencies();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, map0, linkedList0, linkedList0);
      Long long0 = slangImpl0.run(compilationArtifact0, map0, hashMap0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      ExecutionPlan executionPlan0 = null;
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      LinkedList<Input> linkedList0 = new LinkedList<Input>();
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, linkedList0, linkedList0);
      boolean boolean0 = compilationArtifact0.equals(linkedList0);
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, hashMap0, hashMap0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      CompilationArtifact compilationArtifact0 = mock(CompilationArtifact.class, new ViolatedAssumptionAnswer());
      doReturn((ExecutionPlan) null).when(compilationArtifact0).getExecutionPlan();
      doReturn((String) null).when(compilationArtifact0).toString();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      boolean boolean0 = false;
      LogLog.setQuietMode(boolean0);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)80;
      byteArray0[0] = byte0;
      byte byte1 = (byte)23;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-14);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-63);
      byteArray0[4] = byte4;
      String string0 = "1K5(lPZ|8t#w<4";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      Map<String, String> map0 = null;
      LinkedHashSet<SlangSource> linkedHashSet1 = new LinkedHashSet<SlangSource>();
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet1, map0, map0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.cloudslang.score.api.TriggeringProperties", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setRuntimeValues(hashMap0);
      TriggeringProperties triggeringProperties2 = triggeringProperties1.setPlatformMetadata(hashMap0);
      ExecutionPlan executionPlan1 = triggeringProperties2.getExecutionPlan();
      HashMap<String, ExecutionPlan> hashMap1 = new HashMap<String, ExecutionPlan>();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      slangImpl0.subscribeOnAllEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      String string0 = "RETURN_VALUES";
      SlangSource slangSource0 = new SlangSource(string0, string0);
      Set<SlangSource> set2 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, set2, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      TriggeringProperties triggeringProperties0 = TriggeringProperties.create(executionPlan0);
      long long0 = 1L;
      Long long1 = new Long(long0);
      TriggeringProperties triggeringProperties1 = triggeringProperties0.setStartStep(long1);
      ExecutionPlan executionPlan1 = triggeringProperties1.getExecutionPlan();
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      JoinAggregatorListener joinAggregatorListener0 = new JoinAggregatorListener();
      slangImpl0.subscribeOnAllEvents(joinAggregatorListener0);
      String string0 = "-.";
      String string1 = "io.cloudslang.lang.systemtests.RunDataAggregatorListener";
      SlangSource slangSource0 = new SlangSource(string0, string1);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      CompilationArtifact compilationArtifact0 = slangImpl0.compile(slangSource0, linkedHashSet0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        slangImpl0.run(compilationArtifact0, map0, map0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      HashMap<String, ExecutionPlan> hashMap0 = new HashMap<String, ExecutionPlan>();
      List<Input> list0 = null;
      CompilationArtifact compilationArtifact0 = new CompilationArtifact(executionPlan0, hashMap0, list0, list0);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn(compilationArtifact0).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      doReturn((Long) null).when(score0).trigger(any(io.cloudslang.score.api.TriggeringProperties.class));
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-55);
      byteArray0[0] = byte0;
      byte byte1 = (byte)82;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)10;
      byteArray0[3] = byte3;
      String string0 = "not ";
      SlangSource slangSource0 = SlangSource.fromBytes(byteArray0, string0);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Long long0 = slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap1, hashMap1);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SlangImpl slangImpl0 = new SlangImpl();
      ExecutionPlan executionPlan0 = new ExecutionPlan();
      LinkedList<ExecutionStep> linkedList0 = new LinkedList<ExecutionStep>();
      ExecutionPlan executionPlan1 = executionPlan0.addSteps(linkedList0);
      ExecutionStep executionStep0 = new ExecutionStep();
      ExecutionPlan executionPlan2 = executionPlan1.addStep(executionStep0);
      String string0 = "";
      ExecutionPlan executionPlan3 = executionPlan2.setFlowUuid(string0);
      SlangCompiler slangCompiler0 = mock(SlangCompiler.class, new ViolatedAssumptionAnswer());
      doReturn((CompilationArtifact) null).when(slangCompiler0).compile(any(io.cloudslang.lang.compiler.SlangSource.class) , anySet());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "compiler", (Object) slangCompiler0);
      EventBus eventBus0 = mock(EventBus.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "eventBus", (Object) eventBus0);
      Score score0 = mock(Score.class, new ViolatedAssumptionAnswer());
      Injector.inject(slangImpl0, (Class<?>) SlangImpl.class, "score", (Object) score0);
      Injector.validateBean(slangImpl0, (Class<?>) SlangImpl.class);
      BranchAggregatorListener branchAggregatorListener0 = new BranchAggregatorListener();
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      Locale locale0 = Locale.CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Set<String> set1 = locale0.getUnicodeLocaleKeys();
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      slangImpl0.subscribeOnAllEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.unSubscribeOnEvents(branchAggregatorListener0);
      slangImpl0.subscribeOnEvents(branchAggregatorListener0, set0);
      String string1 = "<?V?HRLWonzTm";
      String string2 = "";
      SlangSource slangSource0 = new SlangSource(string1, string2);
      LinkedHashSet<SlangSource> linkedHashSet0 = new LinkedHashSet<SlangSource>();
      int int0 = 1;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(int0);
      // Undeclared exception!
      try { 
        slangImpl0.compileAndRun(slangSource0, linkedHashSet0, hashMap0, hashMap0);
      } catch(IllegalArgumentException e) {
         //
         // Compilation artifact can not be null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }
}
