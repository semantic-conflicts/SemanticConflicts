/*
 * This file was automatically generated by EvoSuite
 * Sun May 03 05:05:58 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.Gson;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import retrofit.RequestBuilder;
import retrofit.RestMethodInfo;
import retrofit.client.Header;
import retrofit.client.Request;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.mime.TypedByteArray;
import retrofit.mime.TypedOutput;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RequestBuilder_ESTest extends RequestBuilder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(restMethodInfo0);
      String string0 = "";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      RequestBuilder requestBuilder3 = requestBuilder0.methodInfo(restMethodInfo0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 60;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) requestBuilder0;
      objectArray0[1] = (Object) requestBuilder0;
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      String string0 = "O[N37.5v'0";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      // Undeclared exception!
      try { 
        requestBuilder2.build();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      String string0 = "/";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      List<Header> list0 = null;
      RequestBuilder requestBuilder2 = requestBuilder1.headers(list0);
      // Undeclared exception!
      try { 
        requestBuilder2.build();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      String string0 = "x9e;>HXpqv4>;\\9J6$";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Converter converter0 = null;
      RequestBuilder requestBuilder0 = new RequestBuilder(converter0);
      Object[] objectArray0 = new Object[0];
      RequestBuilder requestBuilder1 = requestBuilder0.args(objectArray0);
      String string0 = "";
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      // Undeclared exception!
      try { 
        requestBuilder0.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      TypedOutput typedOutput0 = gsonConverter0.toBody(gson0);
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
      RequestBuilder requestBuilder1 = requestBuilder0.headers(linkedList0);
      String string0 = "}{Tt~4";
      // Undeclared exception!
      try { 
        requestBuilder1.build();
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      String string0 = "";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      // Undeclared exception!
      try { 
        requestBuilder1.build();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      Object[] objectArray0 = new Object[0];
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder1 = requestBuilder0.methodInfo(restMethodInfo0);
      LinkedList<Header> linkedList0 = new LinkedList<Header>();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      String string0 = "/";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string0);
      RequestBuilder requestBuilder2 = requestBuilder1.apiUrl(string0);
      RestMethodInfo restMethodInfo0 = null;
      RequestBuilder requestBuilder3 = requestBuilder1.methodInfo(restMethodInfo0);
      List<Header> list0 = null;
      RequestBuilder requestBuilder4 = requestBuilder3.apiUrl(string0);
      TypedOutput typedOutput0 = gsonConverter0.toBody(list0);
      RequestBuilder requestBuilder5 = requestBuilder3.headers(list0);
      // Undeclared exception!
      try { 
        requestBuilder0.build();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 399;
      Random.setNextRandom(int0);
      Gson gson0 = new Gson();
      GsonConverter gsonConverter0 = new GsonConverter(gson0);
      RequestBuilder requestBuilder0 = new RequestBuilder(gsonConverter0);
      String string0 = "z(TnNh2-NoC5n)]m";
      byte[] byteArray0 = new byte[0];
      TypedByteArray typedByteArray0 = new TypedByteArray(string0, byteArray0);
      Class<Double> class0 = Double.TYPE;
      Object object0 = gsonConverter0.fromBody(typedByteArray0, class0);
      String string1 = "JSON must have only one top-level value./";
      RequestBuilder requestBuilder1 = requestBuilder0.apiUrl(string1);
      Reader reader0 = null;
      Class<Object> class1 = Object.class;
      // Undeclared exception!
      try { 
        requestBuilder1.build();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("retrofit.RequestBuilder", e);
      }
  }
}
