/*
 * This file was automatically generated by EvoSuite
 * Tue May 26 06:14:38 GMT 2020
 */

package retrofit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import android.graphics.drawable.AnimationDrawable;
import android.os.DropBoxManager;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.google.gson.Gson;
import com.squareup.okhttp.OkHttpClient;
import com.squareup.wire.Message;
import com.squareup.wire.Wire;
import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.LinkedList;
import java.util.concurrent.Delayed;
import java.util.concurrent.Executor;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.SingleClientConnManager;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpParams;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import retrofit.ErrorHandler;
import retrofit.Profiler;
import retrofit.RequestBuilder;
import retrofit.RequestInterceptor;
import retrofit.RequestInterceptorTape;
import retrofit.RestAdapter;
import retrofit.RestMethodInfo;
import retrofit.Server;
import retrofit.android.AndroidLog;
import retrofit.client.ApacheClient;
import retrofit.client.Client;
import retrofit.client.Header;
import retrofit.client.OkClient;
import retrofit.client.UrlConnectionClient;
import retrofit.converter.Converter;
import retrofit.converter.GsonConverter;
import retrofit.converter.JacksonConverter;
import retrofit.converter.ProtoConverter;
import retrofit.converter.WireConverter;
import retrofit.mime.TypedByteArray;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RestAdapter_ESTest extends RestAdapter_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      String string0 = "Interface definitions must not extend other interfaces.";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(errorHandler0);
      String string1 = "USE_GETTERS_AS_SETTERS";
      Server server0 = new Server(string1, string1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      String string2 = "Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value";
      String string3 = "1Q)6K:dx)]V;t5/)";
      requestInterceptorTape0.addEncodedPathParam(string2, string3);
      requestInterceptorTape0.addQueryParam(string0, string0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter restAdapter1 = restAdapter_Builder1.build();
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter1.create(class0);
      String string4 = "Client providermay ot be null.";
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter1.getLogLevel();
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder6.setServer(string0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      ErrorHandler errorHandler1 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder4.setErrorHandler(errorHandler1);
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.FULL;
      restAdapter1.setLogLevel(restAdapter_LogLevel2);
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter1.create(class1);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Class<String>[] classArray0 = (Class<String>[]) Array.newInstance(Class.class, 6);
      Class<String> class0 = String.class;
      classArray0[0] = class0;
      classArray0[1] = classArray0[0];
      Class<String> class1 = String.class;
      classArray0[2] = class1;
      Class<String> class2 = String.class;
      classArray0[3] = class2;
      Class<String> class3 = String.class;
      classArray0[4] = class3;
      Class<String> class4 = String.class;
      classArray0[5] = class4;
      Wire wire0 = new Wire(classArray0);
      WireConverter wireConverter0 = new WireConverter(wire0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(wireConverter0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient(client_Provider0);
      String string0 = null;
      String string1 = "g(-N";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(string1);
      byte[] byteArray0 = null;
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      TypedByteArray typedByteArray0 = null;
      try {
        typedByteArray0 = new TypedByteArray(string0, byteArray0);
      } catch(NullPointerException e) {
         //
         // bytes
         //
         verifyException("retrofit.mime.TypedByteArray", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "b91j";
      Server server0 = new Server(string0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      Class<Delayed> class0 = Delayed.class;
      Delayed delayed0 = restAdapter0.create(class0);
      Executor executor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setExecutors(executor0, executor0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) urlConnectionClient0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      Client.Provider client_Provider0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setClient(client_Provider0);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient(client_Provider0);
      String string0 = "";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(androidLog0);
      int int0 = 136;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadFactory0, threadPoolExecutor_DiscardOldestPolicy0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      LinkedList<Runnable> linkedList0 = new LinkedList<Runnable>();
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>(linkedList0);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(int0, int0, int0, timeUnit0, linkedBlockingDeque0, threadFactory1, threadPoolExecutor_DiscardOldestPolicy0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setExecutors(scheduledThreadPoolExecutor0, threadPoolExecutor0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setRequestInterceptor(requestInterceptor0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLogLevel(restAdapter_LogLevel0);
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setServer(string0);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setRequestInterceptor(requestInterceptor0);
      Profiler<AnimationDrawable> profiler0 = (Profiler<AnimationDrawable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      Gson gson0 = new Gson();
      String string0 = "^5^Gj$I7~PUQlF";
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string1 = "Out of space: position=";
      restAdapter_Log0.log(string1);
      restAdapter_Log0.log(string0);
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RequestInterceptor requestInterceptor1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder1.setRequestInterceptor(requestInterceptor1);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      Server server0 = new Server(string0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      int int0 = 0;
      requestInterceptorTape0.addEncodedQueryParam(string0, server0.DEFAULT_NAME);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      String string1 = "";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string1);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      Profiler<Header> profiler0 = (Profiler<Header>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setProfiler(profiler0);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder3.setRequestInterceptor(requestInterceptorTape0);
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      boolean boolean0 = restAdapter_LogLevel0.log();
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      String string0 = "k,p#tG";
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      OkClient okClient0 = new OkClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) okClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      String string1 = "BASIC";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder1.setServer(string1);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setClient(client_Provider0);
      String string2 = ": ";
      String string3 = "G?&vJE^8{dKIjG/";
      Server server0 = new Server(string2, string3);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      int int0 = 0;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setExecutors(scheduledThreadPoolExecutor0, scheduledThreadPoolExecutor0);
      Client.Provider client_Provider1 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder6.setClient(client_Provider1);
      boolean boolean1 = restAdapter_LogLevel0.log();
      String string4 = "_*";
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder1.setServer(string4);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder4.setLogLevel(restAdapter_LogLevel1);
      long long0 = 3540L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<Object> profiler0 = (Profiler<Object>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setErrorHandler(errorHandler0);
      // Undeclared exception!
      try { 
        restAdapter_Builder2.build();
      } catch(IllegalArgumentException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Rclg";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      String string1 = "Mc`sU}";
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      Profiler<TypedByteArray> profiler0 = (Profiler<TypedByteArray>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      String string0 = "( HMI;@|=l)GP\\qv";
      AndroidLog androidLog0 = new AndroidLog(string0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLog(androidLog0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder2.setServer(string0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      restAdapter_Log0.log(string0);
      String string1 = "";
      restAdapter_Log0.log(string1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setLog(restAdapter_Log0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder4.setServer(string0);
      restAdapter_Log0.log(string0);
      RestAdapter restAdapter0 = restAdapter_Builder5.build();
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      String string2 = null;
      restAdapter_Log0.log(string2);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.FULL;
      restAdapter0.setLogLevel(restAdapter_LogLevel1);
      String string3 = "<WwgbM7rXIJr@+";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string3);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.<WwgbM7rXIJr@+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setProfiler(profiler0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      String string0 = "";
      Profiler<Runnable> profiler1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setProfiler(profiler1);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "b91j";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder0.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Converter converter0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setConverter(converter0);
      } catch(NullPointerException e) {
         //
         // Converter may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Gson gson0 = null;
      String string0 = "$VALUES";
      GsonConverter gsonConverter0 = new GsonConverter(gson0, string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(gsonConverter0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      restAdapter_Log0.log(string0);
      restAdapter_Log0.log(string0);
      String string1 = "t>:/,;@KN";
      restAdapter_Log0.log(string1);
      String string2 = "";
      restAdapter_Log0.log(string2);
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(string2);
      } catch(NullPointerException e) {
         //
         // Server may not be blank.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      HttpParams httpParams0 = null;
      SchemeRegistry schemeRegistry0 = new SchemeRegistry();
      SingleClientConnManager singleClientConnManager0 = new SingleClientConnManager(httpParams0, schemeRegistry0);
      DefaultHttpClient defaultHttpClient0 = new DefaultHttpClient(singleClientConnManager0, httpParams0);
      ApacheClient apacheClient0 = new ApacheClient(defaultHttpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) apacheClient0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(singleClientConnManager0.MISUSE_MESSAGE);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setLog(restAdapter_Log0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      Profiler<Header> profiler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setProfiler(profiler0);
      } catch(NullPointerException e) {
         //
         // Profiler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setErrorHandler(errorHandler0);
      } catch(NullPointerException e) {
         //
         // Error handler may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      OkHttpClient okHttpClient0 = new OkHttpClient();
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setClient((Client) apacheClient0);
      OkClient okClient0 = new OkClient(okHttpClient0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setClient((Client) okClient0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient(client_Provider0);
      Client.Provider client_Provider1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setClient(client_Provider1);
      } catch(NullPointerException e) {
         //
         // Client provider may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      boolean boolean0 = restAdapter_LogLevel0.log();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      } catch(NullPointerException e) {
         //
         // Request interceptor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      RestAdapter.LogLevel[] restAdapter_LogLevelArray0 = RestAdapter.LogLevel.values();
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = null;
      String string1 = "Aobbx9a[A6rkVf\"mm";
      Server server0 = new Server(string0, string1);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      OkClient okClient0 = new OkClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) okClient0);
      Profiler<String> profiler0 = (Profiler<String>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setProfiler(profiler0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(errorHandler0);
      RestAdapter restAdapter0 = restAdapter_Builder4.build();
      Class<TypedByteArray> class0 = TypedByteArray.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      UrlConnectionClient urlConnectionClient0 = new UrlConnectionClient();
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setClient((Client) urlConnectionClient0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setRequestInterceptor(requestInterceptorTape0);
      String string0 = ")GLH=$5~L";
      Server server0 = new Server(string0, string0);
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setServer(server0);
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder4.setProfiler(profiler0);
      String string1 = "rP?MS$t^v0c]@";
      RestAdapter.Builder restAdapter_Builder7 = restAdapter_Builder6.setServer(string1);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder8 = restAdapter_Builder5.setErrorHandler(errorHandler0);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder9 = restAdapter_Builder8.setLogLevel(restAdapter_LogLevel1);
      RestAdapter restAdapter0 = restAdapter_Builder8.build();
      ErrorHandler errorHandler1 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder10 = restAdapter_Builder4.setErrorHandler(errorHandler1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        restAdapter0.create(class0);
      } catch(IllegalArgumentException e) {
         //
         // Only interface endpoint definitions are supported.
         //
         verifyException("retrofit.RestAdapter", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ProtoConverter protoConverter0 = new ProtoConverter();
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setConverter(protoConverter0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      ApacheClient apacheClient0 = new ApacheClient();
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setClient((Client) apacheClient0);
      Profiler<Delayed> profiler0 = (Profiler<Delayed>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setProfiler(profiler0);
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setClient(client_Provider0);
      RestAdapter.Log restAdapter_Log0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder5.setLog(restAdapter_Log0);
      } catch(NullPointerException e) {
         //
         // Log may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLog(restAdapter_Log0);
      String string0 = "Mv`sIU#T";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      Client client0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder3.setClient(client0);
      } catch(NullPointerException e) {
         //
         // Client may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RequestInterceptor requestInterceptor0 = RequestInterceptor.NONE;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setRequestInterceptor(requestInterceptor0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel0);
      ForkJoinPool forkJoinPool0 = ForkJoinTask.getPool();
      // Undeclared exception!
      try { 
        restAdapter_Builder2.setExecutors(forkJoinPool0, forkJoinPool0);
      } catch(NullPointerException e) {
         //
         // HTTP executor may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      Server server0 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setServer(server0);
      } catch(NullPointerException e) {
         //
         // Server may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      Profiler<Message> profiler0 = (Profiler<Message>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Log restAdapter_Log0 = RestAdapter.Log.NONE;
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      Client.Provider client_Provider0 = mock(Client.Provider.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setClient(client_Provider0);
      RestAdapter.LogLevel restAdapter_LogLevel1 = RestAdapter.LogLevel.BASIC;
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel1);
      boolean boolean0 = restAdapter_LogLevel0.log();
      String string0 = "-Bqaf) \\GS3^";
      restAdapter_Log0.log(string0);
      RestAdapter.LogLevel restAdapter_LogLevel2 = RestAdapter.LogLevel.NONE;
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setLogLevel(restAdapter_LogLevel2);
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string0);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.-Bqaf) \\GS3^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.FULL;
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setLogLevel(restAdapter_LogLevel0);
      Profiler<Runnable> profiler0 = (Profiler<Runnable>) mock(Profiler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder1.setProfiler(profiler0);
      String string0 = "Interface definitions must not extend other interfaces.";
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setServer(string0);
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder3.setErrorHandler(errorHandler0);
      String string1 = "";
      Server server0 = new Server(string1, string1);
      RestAdapter.Builder restAdapter_Builder5 = restAdapter_Builder4.setServer(server0);
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter restAdapter0 = restAdapter_Builder2.build();
      String string2 = "Failed to parse @JsonSerializableSchema.schemaObjectPropertiesDefinition value";
      String string3 = "1Q)6K:dx)]V;t5/)";
      requestInterceptorTape0.addEncodedPathParam(string2, string3);
      requestInterceptorTape0.addQueryParam(string0, string0);
      RestAdapter.Builder restAdapter_Builder6 = restAdapter_Builder5.setRequestInterceptor(requestInterceptorTape0);
      RestAdapter restAdapter1 = restAdapter_Builder1.build();
      Class<Runnable> class0 = Runnable.class;
      Runnable runnable0 = restAdapter1.create(class0);
      String string4 = "Client provider may not be null.";
      // Undeclared exception!
      try { 
        RestAdapter.LogLevel.valueOf(string4);
      } catch(IllegalArgumentException e) {
         //
         // No enum constant retrofit.RestAdapter.LogLevel.Client provider may not be null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      String string0 = "";
      Server server0 = new Server(string0);
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setServer(server0);
      RestAdapter restAdapter0 = restAdapter_Builder1.build();
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.BASIC;
      restAdapter0.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.Builder restAdapter_Builder2 = restAdapter_Builder0.setServer(server0);
      RestAdapter.Builder restAdapter_Builder3 = restAdapter_Builder2.setLogLevel(restAdapter_LogLevel0);
      RestAdapter.LogLevel restAdapter_LogLevel1 = restAdapter0.getLogLevel();
      RequestInterceptorTape requestInterceptorTape0 = new RequestInterceptorTape();
      RestAdapter.Builder restAdapter_Builder4 = restAdapter_Builder1.setRequestInterceptor(requestInterceptorTape0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      RestAdapter.Builder restAdapter_Builder0 = new RestAdapter.Builder();
      ErrorHandler errorHandler0 = mock(ErrorHandler.class, new ViolatedAssumptionAnswer());
      RestAdapter.Builder restAdapter_Builder1 = restAdapter_Builder0.setErrorHandler(errorHandler0);
      RestAdapter.LogLevel restAdapter_LogLevel0 = RestAdapter.LogLevel.HEADERS;
      RestAdapter.LogLevel restAdapter_LogLevel1 = null;
      // Undeclared exception!
      try { 
        restAdapter_Builder0.setLogLevel(restAdapter_LogLevel1);
      } catch(NullPointerException e) {
         //
         // Log level may not be null.
         //
         verifyException("retrofit.RestAdapter$Builder", e);
      }
  }
}
